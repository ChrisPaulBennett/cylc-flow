#!/usr/bin/env python

import os, sys, re
import cycle_time
from optparse import OptionParser

parser = OptionParser( usage = """cylcutil time-calc [options] [CYCLE] [STRING]

Cycle time arithmetic with optional transformation of the result via a
template string. Can be used by task scripts to calculate offsets from
the current cycle time, or to access cycle time-dependent file naming
conventions encoded in variables defined in the sytem config file.
The result is printed to stdout. 

STRING can be the name of an environment variable containing a template
string OR the template string itself. In the template, 'YYYY', 'MM',
'DD', or 'HH' will be replaced with computed cycle time components.

   $ cylcutil time-calc -s 6 2010082318 #....explicit cycle time offset
  2010082312

   $ export CYCLE_TIME=2010082318 # (as from task execution environment)

   $ cylcutil time-calc -s 6 #...............offset from current cycle
  2010082312

   $ cylcutil time-calc -s 6 fooHH-YYYYMMDD.nc #explicit name convention
  foo12-20100823.nc

   $ export NCONV=fooHH-YYYYMMDD.nc    # (as if from system config file)

   $ cylcutil time-calc NCONV #.............implicit filename convention
  foo18-20100823.nc
   $ cylcutil time-calc -s 6 NCONV_FOO #..same, with current cycle offset
  foo12-20100823.nc

Arguments:
   CYCLE        Cycle time (YYYYMMDDHH) defaults to $CYCLE_TIME.
   STRING       Template-containing env variable OR a template.""" )

parser.add_option( "-s", "--subtract", metavar="HOURS",
        help="Subtract HOURS from CYCLE", 
        action="store", dest="subtract" )

parser.add_option( "-a", "--add", metavar="HOURS",
        help="Add HOURS to CYCLE", 
        action="store", dest="add" )

parser.add_option( "-o", "--offset", metavar="HOURS",
        help="Apply an offset of +/-HOURS to CYCLE", 
        action="store", dest="offset" )

parser.add_option( "--year", help="Print only YYYY of result",
        action="store_true", default=False, dest="print_year" )

parser.add_option( "--month", help="Print only MM of result",
        action="store_true", default=False, dest="print_month" )

parser.add_option( "--day", help="Print only DD of result",
        action="store_true", default=False, dest="print_day" )

parser.add_option( "--hour", help="Print only HH of result",
        action="store_true", default=False, dest="print_hour" )

(options, args) = parser.parse_args()

got_template = False

if len( args ) == 0:
    # input cycle time must be definied in the environment.
    if 'CYCLE_TIME' not in os.environ:
        parser.error( "Provide CYCLE arg, or define $CYCLE_TIME" )
    else:
        cycle = os.environ[ 'CYCLE_TIME' ]
        if not cycle_time.is_valid( cycle ):
            parser.error( "invalid cycle time: " + cycle )
    # DONE (no args)

elif len( args ) == 1:
    # could be a cycle time or a template (name or string)
    tmp = args[0]
    if cycle_time.is_valid( tmp ):
        # arg is a cycle time
        cycle = tmp

    else:
        # cycle time must be defined in the environment
        if 'CYCLE_TIME' in os.environ:
            cycle = os.environ[ 'CYCLE_TIME' ]
            if not cycle_time.is_valid( cycle ):
                parser.error( "invalid cycle time: " + cycle )
        else:
            parser.error( "no valid cycle time found" )

        # arg must be a template name OR a template
        got_template = True
        if tmp in os.environ:
            template = os.environ[ tmp ]
        else:
            template = tmp

        # DONE (one arg)

elif len(args) == 2:
    cycle = args[0]
    if not cycle_time.is_valid( cycle ):
        parser.error( "invalid cycle time: " + cycle )

    got_template = True
    tmp = args[1]
    if tmp in os.environ:
        template = os.environ[ tmp ]
    else:
        template = tmp
else:
    parser.error( "Wrong number of arguments!" )

n_chosen = 0
subtract = False
add = False
offset = False

hours_str = int( cycle[8:10] ) 

if options.subtract:
    subtract = True
    n_chosen += 1 
    hours_str = int( options.subtract )

if options.add:
    add = True
    n_chosen += 1
    hours_str = int( options.add )

if options.offset:
    offset = True
    n_chosen += 1
    hours_str = int( options.offset )

if n_chosen > 1:
    parser.error( "Choose ZERO or ONE of subtract, add, or offset" )

if options.print_year or options.print_month or options.print_day or options.print_hour:
    if got_template:
        parser.error( 'specific print options are not compatible with STRING')
 
n_chosen = 0
print_year = False
print_month = False
print_day = False
print_hour = False

if options.print_year:
    n_chosen +=1
    print_year = True

if options.print_month:
    n_chosen +=1
    print_month = True

if options.print_day:
    n_chosen +=1
    print_day = True

if options.print_hour:
    n_chosen +=1
    print_hour = True

if n_chosen != 0 and n_chosen != 1:
    parser.error( "Choose NONE or ONE of print_(year|month|day|hour)" )

try:
    hours = int( hours_str )
except ValueError:
    parser.error( "HOURS must be integer" )

if offset:
    if hours < 0:
        subtract = True
        hours = - hours
    else:
        add = True

if add:
    cycle = cycle_time.increment( cycle, hours )
elif subtract:
    cycle = cycle_time.decrement( cycle, hours )

if got_template:
    string = template
    # replace YYYYMMDDHH
    string = re.sub( "YYYYMMDDHH", cycle, string )
    # replace YYYY, MM, DD, HH
    string = re.sub( 'YYYY', cycle[0:4],  string )
    string = re.sub( 'MM',   cycle[4:6],  string )
    string = re.sub( 'DD',   cycle[6:8],  string )
    string = re.sub( 'HH',   cycle[8:10], string )
    # replace YY
    string = re.sub( 'YY',   cycle[2:3],  string )

    print string

elif print_year:
    print cycle[0:4]
elif print_month:
    print cycle[4:6]
elif print_day:
    print cycle[6:8]
elif print_hour:
    print cycle[8:10]
else:
    print cycle
