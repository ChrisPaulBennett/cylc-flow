#!/usr/bin/env python

import os, sys, re
import cycle_time
from optparse import OptionParser

parser = OptionParser( usage = """cylc cycletime [options] [CYCLE]

Perform arithmetic operations on cycle times and print the results to 
sdtout. Examples:

   # offset from explicit cycle time:
   $ cylc cycletime -s 6 2010082318
  2010082312

   # offset from $CYCLE_TIME:
   $ export CYCLE_TIME=2010082318  # or task execution environment
   $ cylc cycletime -s 6 
  2010082312

Arguments:
   CYCLE        Cycle time (YYYYMMDDHH) defaults to $CYCLE_TIME.""" )

parser.add_option( "-s", "--subtract", metavar="HOURS",
        help="Subtract HOURS from CYCLE", 
        action="store", dest="subtract" )

parser.add_option( "-a", "--add", metavar="HOURS",
        help="Add HOURS to CYCLE", 
        action="store", dest="add" )

parser.add_option( "-o", "--offset", metavar="HOURS",
        help="Apply an offset of +/-HOURS to CYCLE", 
        action="store", dest="offset" )

parser.add_option( "--year", help="Print only YYYY of result",
        action="store_true", default=False, dest="print_year" )

parser.add_option( "--month", help="Print only MM of result",
        action="store_true", default=False, dest="print_month" )

parser.add_option( "--day", help="Print only DD of result",
        action="store_true", default=False, dest="print_day" )

parser.add_option( "--hour", help="Print only HH of result",
        action="store_true", default=False, dest="print_hour" )

(options, args) = parser.parse_args()

if len( args ) == 0:
    # input cycle time must be definied in the environment.
    if 'CYCLE_TIME' not in os.environ:
        parser.error( "Provide CYCLE arg, or define $CYCLE_TIME" )
    else:
        cycle = os.environ[ 'CYCLE_TIME' ]
        if not cycle_time.is_valid( cycle ):
            parser.error( "invalid cycle time: " + cycle )
    # DONE (no args)

elif len( args ) == 1:
    # must be cycle time
    cycle = args[0]
    if not cycle_time.is_valid( cycle ):
        print 'ERROR, invalid cycle time:', cycle
        sys.exit(1)
else:
    parser.error( "Wrong number of arguments!" )

n_chosen = 0
subtract = False
add = False
offset = False

hours_str = int( cycle[8:10] ) 

if options.subtract:
    subtract = True
    n_chosen += 1 
    hours_str = int( options.subtract )

if options.add:
    add = True
    n_chosen += 1
    hours_str = int( options.add )

if options.offset:
    offset = True
    n_chosen += 1
    hours_str = int( options.offset )

if n_chosen > 1:
    parser.error( "Choose ZERO or ONE of subtract, add, or offset" )

n_chosen = 0
print_year = False
print_month = False
print_day = False
print_hour = False

if options.print_year:
    n_chosen +=1
    print_year = True

if options.print_month:
    n_chosen +=1
    print_month = True

if options.print_day:
    n_chosen +=1
    print_day = True

if options.print_hour:
    n_chosen +=1
    print_hour = True

if n_chosen != 0 and n_chosen != 1:
    parser.error( "Choose NONE or ONE of print_(year|month|day|hour)" )

try:
    hours = int( hours_str )
except ValueError:
    parser.error( "HOURS must be integer" )

if offset:
    if hours < 0:
        subtract = True
        hours = - hours
    else:
        add = True

if add:
    cycle = cycle_time.increment( cycle, hours )
elif subtract:
    cycle = cycle_time.decrement( cycle, hours )

if print_year:
    print cycle[0:4]
elif print_month:
    print cycle[4:6]
elif print_day:
    print cycle[6:8]
elif print_hour:
    print cycle[8:10]
else:
    print cycle
