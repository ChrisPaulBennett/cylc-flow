#!/usr/bin/env python

import sys, os
from cylc.LogDiagnosis import LogAnalyser

if len(sys.argv) == 2 and sys.argv[1] == '--help':
    print """Usage: cylc [hook] diagnose-suite ARGS

This is a cylc Suite Run Diagnosis shutdown event handler, intended 
mainly for use in automated cylc test suites. Arguments are supplied by
cylc. On the suite shutdown event it compares the new suite log with an
existing reference log stored as "<suite definition directory>/log".
Currently it just compares runtime triggering information, disregarding
event order and timing, and fails the suite if there is any difference.
This should be sufficient to verify correct scheduling of any suite that
is not affected by different run-to-run conditional triggering.  

1) do a reference run of your suite and check it ran correctly
2) copy the reference log to the suite definition directory
3) put the following in your suite definition:

[cylc]
    log resolved dependencies = True
    [[event hooks]]
        events = shutdown
        script = "cylc hook diagnose-suite"
        abort if shutdown handler fails = True
        timeout = 0.5  # or however many minutes is reasonable
        abort on timeout = True
"""
    sys.exit(0)

print
print "This is the cylc Suite Run Diagnosis shutdown event handler"

event, suite = sys.argv[1], sys.argv[2]

if event != 'shutdown':
    raise SystemExit( "ERROR: run this as a shutdown event handler")

try:
    log_dir = os.path.expandvars( os.environ['CYLC_SUITE_LOG_DIR'] )
    suite_dir = os.path.expandvars( os.environ['CYLC_SUITE_DEF_PATH'] )
except KeyError, x:
    raise SystemExit(x)

new_log = os.path.join( log_dir, 'log' )
ref_log = os.path.join( suite_dir, 'log' )

try:
    lanal = LogAnalyser( new_log, ref_log )
    lanal.verify_triggering()
except Exception, x:
    print >> sys.stderr, x
    raise SystemExit( "SUITE RUN DIAGNOSIS: FAILED" )

print
print "SUITE DIAGNOSIS: OK"
print

