#!/usr/bin/env python

import os, sys
from optparse import OptionParser

parser = OptionParser( usage = """cylc check-vars [options] VARNAMES

Check that each member of a list of environment variables is defined,
and then optionally check their values according to the chosen
commandline option.

All the input variables are checked in turn, after which the script
aborts with exit status 1 if any are undefined or fail their checks.

Arguments:
   VARNAMES     Space-separated list of environment variable names.""")

parser.add_option( "-d", "--dirs-exist", 
        help="Check the variables represent directories that exist.", 
        action="store_true", default=False, dest="checkdirs" )

parser.add_option( "-f", "--files-exist", 
        help="Check the variables represent files that exist.", 
        action="store_true", default=False, dest="checkfiles" )

parser.add_option( "-s", "--silent", 
        help="Do not print the result of each check.", 
        action="store_false", default=True, dest="verbose" )

(options, args) = parser.parse_args()

if len( args ) == 0:
    parser.error( "VARNAMES argument is required" )

if options.checkdirs and options.checkfiles:
    parser.error( "Choose at most one of -f or -d" )

varnames = args

failed = False

for varname in varnames:
    if varname in os.environ:
        value = os.environ[ varname ]

        if options.verbose:
            print '$' + varname, "evaluates to", value

        if options.checkdirs:
            if os.path.isdir( os.environ[ varname ] ):
                if options.verbose:
                    print '   directory exists'
            else:
                failed = True
                if options.verbose:
                    print '   ERROR: directory not found'

        if options.checkfiles:
            if os.path.isfile( os.environ[ varname ] ):
                if options.verbose:
                    print '   file exists'
            else:
                failed = True
                if options.verbose:
                    print '   ERROR: file not found'

    else:
        failed = True
        if options.verbose:
            print 'ERROR: $' + varname, "is not defined"

if failed:
    sys.exit(1)


