#!/usr/bin/env python

import os, sys
from optparse import OptionParser

parser = OptionParser( usage = """cylcutil check-vars [options] VARNAMES

Check that each member of a list of environment variables is defined,
and then optionally check their values according to the chosen
commandline option. Environment variables must be exported first
(this script necessarily executes in a subshell).

All the input variables are checked in turn, after which the script
aborts with exit status 1 if any are undefined or fail their checks.

Arguments:
   VARNAMES     Space-separated list of environment variable names.""")

parser.add_option( "-d", "--dirs-exist", 
        help="Check that the variables refer to directories that exist.", 
        action="store_true", default=False, dest="checkdirs" )

parser.add_option( "-c", "--create-dirs", 
        help="Attempt to create the directories referred to the "
        "variables, if they do not already exist.",
        action="store_true", default=False, dest="createdirs" )

parser.add_option( "-f", "--files-exist", 
        help="Check that the variables refer to files that exist.", 
        action="store_true", default=False, dest="checkfiles" )

parser.add_option( "-i", "--int",
        help="Check that the variables refer to integer values.", 
        action="store_true", default=False, dest="checkint" )

parser.add_option( "-s", "--silent", 
        help="Do not print the result of each check.", 
        action="store_false", default=True, dest="verbose" )

(options, args) = parser.parse_args()

if len( args ) == 0:
    parser.error( "VARNAMES argument is required" )


if [ options.checkdirs, options.createdirs, options.checkfiles, \
        options.checkint ].count( True ) > 1:
    parser.error( "Please choose at most one option." )

varnames = args

failed = False

for varname in varnames:
    if varname in os.environ:
        value = os.environ[ varname ]

        if options.verbose:
            print '$' + varname, "evaluates to", value

        if options.createdirs:
            if os.path.isdir( value ):
                if options.verbose:
                    print '(directory exists)'
            else:
                try:
                    os.makedirs( value )
                except:
                    failed = True
                    print >> sys.stderr, 'ERROR, cannot create directory:', value
                else:
                    print '(directory created)'

        if options.checkdirs:
            if os.path.isdir( value ):
                if options.verbose:
                    print '(directory exists)'
            else:
                failed = True
                if options.verbose:
                    print >> sys.stderr, 'ERROR, directory not found:', value

        if options.checkfiles:
            if os.path.isfile( value ):
                if options.verbose:
                    print '(file exists)'
            else:
                failed = True
                if options.verbose:
                    print >> sys.stderr, 'ERROR, file not found:', value

        if options.checkint:
            # value is a string; conversion from string to int fails
            # unless the string contains *only* digits:
            # int( 100.1 ) = 100, but int( '100.1') fails.
            try:
                int( value )
            except:
                failed = True
                if options.verbose:
                    print >> sys.stderr, 'ERROR, value is not an integer:', value
            else:
                if options.verbose:
                    print '(is an integer)'
    else:
        failed = True
        if options.verbose:
            print >> sys.stderr, 'ERROR, variable not defined: $' + varname

if failed:
    sys.exit(1)
