
# THIS IS A SEQUENZ TASK CLASS DEFINITION FILE

%TASK_NAME
    foo

%VALID_REFERENCE_TIMES
    # list of comma separated hours
    6,18

%EXTERNAL_TASK
    # script to invoke when my prerequisites are all satisfied
    run_foo.sh

%USER_PREFIX
    # external task runs as user PREFIX_(dvel|test|oper)
    user_foo

%PREREQUISITES
    # ZERO OR MORE prerequisite messages, each on a separate line.
    # May contain:
    #  1. $(CURRENT_REFERENCE_TIME)
    #  2. $(CURRENT_REFERENCE_TIME - HRS)
    # ALL listed prerequisites must be satisfied for this task to run

    # For requisites that depend on reference hour, prefix with
    # a comma-separated hour list followed by the '|' character.
    # (USE NO PREFIX FOR REQUISTES THAT APPLY IN ALL VALID HOURS).

    bar finished for $(CURRENT_REFERENCE_TIME)
    0,12 | file baz_$(CURRENT_REFERENCE_TIME)_utc.nc ready

%POSTREQUISITES
    # TWO OR MORE postrequisite messages, each on a separate line.
    # + Each must be prefixed by estimated completion time in minutes. 
    # May contain:
    #  1. $(TASK_NAME) 
    #  2. $(CURRENT_REFERENCE_TIME)
    #  3. $(CURRENT_REFERENCE_TIME - HRS)
    # Must at least include 'started' and 'finished' messages, e.g.:
    #   0  min: $(TASK_NAME) started for $(CURRENT_REFERENCE_TIME)
    #   10 min: $(TASK_NAME) finished for $(CURRENT_REFERENCE_TIME)
    # ALL postrequisites must be satsified for this task to finish.
    # External tasks may send extra (non-postrequisite) messages,
    # however, for progess logging purposes.

    # For postrequisites that depend on reference hour, see above.

    0 min: $(TASK_NAME) started for $(CURRENT_REFERENCE_TIME)
    0,12 | 15 min: file foo_1_$(CURRENT_REFERENCE_TIME).nc ready
    6,18 | 15 min: file foo_2_$(CURRENT_REFERENCE_TIME).nc ready
    20 min: $(TASK_NAME) finished for $(CURRENT_REFERENCE_TIME)

# NOTE that requisites are literal strings (albeit with some variable
# substitution) and requisite matching is exact, so be careful of white 
# space, spelling errors, etc.

# OPTIONAL:
%DELAYED_DEATH
    # THIS KEY IS OPTIONAL and defaults to 'False'. Any task that has
    # only cotemporal downstream dependents (i.e. all normal tasks) can
    # be killed  as soon as it is finished AND there are no other
    # tasks yet to be finished at its reference time or earlier.
    # Specify delayed death for any tasks with downstream dependents in
    # later reference times, in which case they will be killed only when
    # the cutoff time specified by their dependents is reached.
    True

# OPTIONAL:
%EXPORT
    # specify environment variable names and values to passed to the
    # external task. (other than $REFERENCE_TIME and $TASK_NAME)
    FOO foo
    BAR bar
