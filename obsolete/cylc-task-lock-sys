#!/bin/bashX        # THIS SCRIPT MUST BE SOURCED IN THE CALLING SHELL

# Implement a "locking directory" mechanism to prevent THIS TASK (or
# rather the task that SOURCES this script) from running if another
# instance of it is running already (and has already acquired the lock).
# Locking must be done by the external task script, not by cylc, so that 
# the lock will be released by external tasks when they finish even if
# cylc has been shut down. 

# This version acquires a lock to prevent multiple copies of the task
# from running UNLESS they are running under different cylc system names. 
# Don't use this version unless your tasks are configured to use the
# cylc system name in their important I/O directories and so on, so 
# that parallel instances will not interfere with each other!

# See also 'cylc-task-lock' for a general lock.

# $TASK_ID and $CYLC_SYSTEM_NAME are in the cylc execution environment.

# Original version by Chris Edsall @ NIWA.
# - Uses directory creation as mkdir is an atomic operation.
# - Sourcing (dot-run) allows us to auto-release the lock on exit.


# ATTEMPT TO ACQUIRE YOUR LOCK AFTER SENDING THE CYLC START MESSAGE
# so that failure to lock will be reported to the cylc task logs, as
# well as to stdout, without causing cylc to complain that it has
# received a message from a task that has not started running yet. 
# Similarly, the lock release message is only echoed to stdout
# because it is necessarily emitted after the task finished message.
# (a cylc message after that time will cause cylc to complain that it
# has received a message from a task that has finished running). 

if ! mkdir -p $HOME/running/locks/$CYLC_SYSTEM_NAME; then
    cylc message -p CRITICAL "cannot create directory $HOME/running/locks"
    cylc message --failed
    exit 1
fi

LOCKDIR=$HOME/running/locks/$CYLC_SYSTEM_NAME/$TASK_ID
if ! mkdir "$LOCKDIR"; then
    # this task is already locked
	cylc message -p CRITICAL "cannot acquire lock $LOCKDIR"
    cylc message --failed
    exit 1
else
	# we got it.
	cylc message "acquired lock $LOCKDIR"
	# remove lockdir when the script finishes, or when it receives a signal
	trap 'echo "releasing lock"; rm -rf "$LOCKDIR"' 0 
	trap "exit 2" 1 2 3 15         # terminate script when receiving signal
fi
