#!/usr/bin/python

import os, re
import cycle_time
from optparse import OptionParser

usage = """get-filename [options] TEMPLATE-NAME

Generate a cycle time dependent filename according to a template that
has been exported into the environment. For example:
    $ export FOO=fooHH-YYYYMMDD.nc
    $ get-filename -c 2010112306 FOO
    foo06-20101123.nc

Use the cylc script 'cycle-time' to offset the current cycle time:
    # get-filename -c $(cycle-time --add=6) FOO
    foo12-20101123.nc

Filenaming conventions for an entire cylc system can thus be defined in 
the system config file enviroment section."""

parser = OptionParser( usage )

parser.add_option( "-c", "--cycle-time",
        metavar='YYYYMMDDHH',
        help="Cycle time, defaults to $CYCLE_TIME",
        action="store", dest="ctime" )

( options, args ) = parser.parse_args()

if options.ctime:
    ctime = options.ctime
elif 'CYCLE_TIME' in os.environ:
    ctime = os.environ[ 'CYCLE_TIME' ]
else:
    parser.error( "Use --cycle-time or define $CYCLE_TIME" )

if not cycle_time.is_valid( ctime ):
    parser.error( "invalid cycle time: " + ctime )

if len( args ) != 1:
    parser.error( "Please supply a template name" )

template_name = args[0]

if template_name not in os.environ:
    parser.error( "$" + template_name + " is not defined" )

template = os.environ[ template_name ]

# replace YYYYMMDDHH
result = re.sub( "YYYYMMDDHH", ctime, template )
# replace YYYY, MM, DD, HH
result = re.sub( 'YYYY', ctime[0:4], result )
result = re.sub( 'MM',   ctime[4:6], result )
result = re.sub( 'DD',   ctime[6:8], result )
result = re.sub( 'HH',   ctime[8:10], result )
# replace YY
result = re.sub( 'YY', ctime[2:3], result )

print result

