HOW TO RUN CYLC for system 'foo'

[paths below are relative to the top level cylc directory]

1/ Define your system using cylc task definition files. Maintain this
as a separate repository with version tags to indicate compatibility
with cylc versions, but install it into [cylc-top]/sys/foo/
(or any sub-directory under sys/).

2/ write your cylc user config file: [cylc-top]/sys/foo/user_config.py

3/ run bin/configure-system on your system definition directory, to
generate the task class code ([cylc-top]/sys/foo/task_classes.py) and
cylc environment script ([cylc-top]/sys/foo/environment.sh). This
only needs to be done before the first run, or after changing the task
definition files.

4/ source the cylc environment file for system foo (sets the PATH and
PYTHONPATH environment variables for access to general cylc and
system-specific code modules).  This needs to be done in the shell that
runs the cylc instance that handles system foo, and in any other
shells that need to interact with the same cylc instance (e.g. system
monitors).

   $ . [cylc-top]/sys/foo/environment.sh


5/ run cylc

   $ cylc [options] [args]

6/ To control an entirely different system using the same cylc
installation, just source the appropriate
[cylc-top]/sys/[system-name]/environment.sh 
before running cylc.
