CYLC METASCHEDULER CHANGE LOG, INITIALIZED after version 3.0.3.

Non-trivial changes of relevance to users are listed. All changes are
likely to involve unlisted minor updates and corrections to cylc 
documentation (User Guide, command line help, and GUI help).

Version number X.Y.Z incrementing:
  X - major changes
  Y - significant changes
  Z - minor changes and bug fixes

3.0.4
 + More documentation of error detection in task scripts.
 + 'cylc admin create-cdb' now uses its own test suite.

3.0.5
 + Clarified graph-based control GUI help.

3.1.0
 + Allow use of lockserver in simulation mode.
 + New suite compare/diff functionality added.

3.2.0
 + Big speed up for large suites due to some optimization of the
   scheduling algorithm.
 + Monospaced fonts in GUI output capture windows.

3.3.0
 + Updated the terminal monitor to display held (paused) tasks properly.
 + Entirely eliminated the need for explicit task wrapping:
   - moved 'task started' and 'task succeeded' messages, and automatic
   'task failed' messaging, to the generated task job script.
   - task scripts now only have to call 'task succeeded/failed', and
     only for tasks whose initiating processes detach and exit early.
   - this means the entire task job script is now seen by cylc, not just 
     the (formerly) wrapped command line.
   - task-specific pre-command scripting is no longer needed - instead
     the task command string can contain multiline scripting.
 + New variable $CYLC_SUITE_ENVIRONMENT in the task execution environment
   for use in custom wrappers for tasks with manual completion messaging.
 + Added and documented new example suite to illustrate custom task wrapping.

3.3.1
 + Fixed a typo in writing out the new $CYLC_SUITE_ENVIRONMENT to job
 scripts, which could break new-style custom wrappers for detaching tasks. 

3.3.2
 + Fixed a bug introduced at 3.2.0 that prevented failed tasks from 
   becoming 'unfailed' after retriggering them.

3.3.3
 + Full path configuration for suite state dump and log directories.
 + Fixed recently introduced bug affecting loadleveler job submission: an
   executable statement appeared before the directives in task job scripts.

3.3.4
 + Autogenerated HTML version of the User Guide added.
 + Fixed a bug introduced at 3.2.0 affecting suite warm starts:
   - a misspelled function call in bin/_run caused suite warm starts to fail.
 + Fixed a bug introduced at 3.3.0 affecting detached tasks in simulation mode:
   -  Since eliminating 'cylc wrap' tasks that handle their own
      completion messaging in real mode need automatic completion in sim mode.  
 + Documented local installation of Pyro, Graphviz, and Pygraphviz.
 + Documented how to upgrade to a new version of cylc.

 3.3.5
 + Fix a bug that affected task submission and execution timeouts:
   - if a timeout was set, the hook script was called even if the event
     did occur in time - which should cancel the timeout.
 + More detailed documentation of complete installation by non-root users.

 3.3.6
 + Documentation of graphviz installation without QT.
 + Improved detection of errors in suite.rc graph hours headings.
 + Improved detection of erroneous suite registrations on the command line.
 + Fixed a bug in 'cylc log' command task filtering.
 + At installation, unregister example suites from admin user's private db.
 + Task event hook script argument list changed. Cylc now calls:
     <hook script> EVENT SUITE TASK CTIME MESSAGE
   The new SUITE argument is particularly needed if running multiple suites.
   WARNING: this change will break existing task event hook scripts.
 + Added a task event hook script to 'cylc util' that sends email alerts.

3.3.7
 + Disabled the cylc lockserver by default.
 + Altered environment.sh to work with 'set -u'.
 + Better task error trapping: in addition to trapping processes that
 abort with non-zero exit status (ERR signal) cylc now also registers
 task failure after unexpected exit with normal exit status (EXIT
 signal), process termination by the TERM signal (e.g. by 'kill PID' or
 'llcancel JOBID'), and termination (e.g. by the batch scheduler) due
 to exceeding some system time limit (XCPU signal).

 
3.4.0 (4 August 2011)

  + Fixed bug introduced in 3.3.7: trapping of EXIT signal must be 
  turned off at the end of job scripts for detaching tasks (which
  handle their own completion messaging).

  + Task event hook script argument list changed again. It is now:
     <hook script> EVENT SUITE TASKID MESSAGE
  where TASKID works with both cycling and non-cycling (asynchronous)
  tasks. WARNING: this will break existing task event hook scripts.
  
  + Also, the EVENT argument for job submission failures is now
  "submission_failed" rather than "submit_failed", to be more consistent
  with the associated suite.rc item.

  + Disabled run time graphing by default, in suite.rc [visualization]. 
  It is mainly intended for use in cylc development and debugging.
  WARNING: this breaks existing suite.rc run time graph settings.

  + Initial and final cycles for graph plotting can now be provided in 
  the suite.rc file, and can be overridden on the command line.

  + Initial and final cycle times can now be provided in the suite.rc
  file, and optionally overridden on the command line.

  + Fixed a lockserver bug, introduced in March 2011, that only affected
  owned tasks.

  + Added asynchronous tasks (no cycle time):
    - one-off asynchronous tasks for any non-cycling jobs.
    - repeating asynchronous tasks for processing satellite passes.

  + Made the User Guide accessible from GUI help menus.

3.4.0-a (bug fix release 5 Aug 2011)

  + Fixed a bug affecting detaching tasks in simulation mode only - job
  script EXIT signal trapping was not being cleared before exiting. 
  + Fixed a bug in the FFTask example suite (which is not actually
  referred to in the User Guide yet) - it had not been upgraded for
  compatibility with recent cylc versions.

3.5.0

 + Fixed a bug, introduced in 3.4.0, in the lockserver client program
  for manual lock management.

 + The cylc code base is now a Python library and the environment.sh
 script is no longer needed: you just need the cylc command in $PATH.

 + Task generators: definition of multiple similar tasks all at once.
 Two new examples suites illustrate this new feature.

 3.5.1  bug fix release 15 Aug 2011

  + Fixed a Python indentation error introduced in 3.4.0, which 
  affected the list of valid hours for tasks that appear in multiple 
  suite.rc graph strings (i.e. tasks with different triggers at 
  different cycle times). 

________________________________________________________________________
4.0.0-rc1

+ WARNING cylc-4.0 IS NOT ENTIRELY BACKWARD COMPATIBLE with 3.x
due to significant changes to suite.rc structure and item names. 
 Suggested suite upgrade strategy: 
    1/ read this changelog, then
    2/ use 'cylc validate' to see which items are no longer valid ...
    3/ ... then consult the suite.rc reference, and 
    4/ examine the cylc example suites if necessary
Future changes will be more incremental and we will ensure backward
compatibility or provide a clear (possibly automated) upgrade path.

+ UTC Mode: optionally run a suite on UTC time even if the suite
 host's system clock is not in UTC mode.

+ Fixed a suite graph plotting bug: if the graph initial hour was 
 greater than the section hour for single hour graph sections, the
 section would be skipped even if the graph range encompassed the
 section, due to miss-handling of the 24-hour boundary.

+ Fixed a subtle bug in environment variable overriding: if a variable
 was defined twice, the second definition would override the first as
 it should, but it would retain the position (in the list of defined
 variables) of the first.

+ General parenthesized conditional triggers
  - WARNING: This required a change in intercycle dependency notation
    from ROUND to SQUARE brackets (to avoid clashing with parentheses 
    in conditional expressions):
       foo(T-6) becomes foo[T-6]

+ Embedded list-generating Python expressions can now be used to
 generate related dependencies in the graph (e.g. for the internal
 dependencies of an ensemble); and lists of task names or
 list-generating Python expressions in task config section headings,
 to define multiple tasks at once.

+ Configurable command template for at_now, background and loadleveler.
 Some example use cases might be:
  - a user may want to use batch instead of at now.
  - a user may want to use an option of llsubmit.
  - a user may want to use nice with a background submit.

+ Configurable ssh command template.
  - no longer require scp - use stdin to transfer job file.
  - -oBatchMode=yes prevents any hang ups.
  - (but ssh command is bit more complex.)

+ sudo job submission (for other owner on the suite host) removed. Now
use ssh as for remote hosts.

+ New default directory structure.
  - $HOME/cylc-run/$CYLC_SUITE_REG_NAME/{log/suite,log/job,state}

+ Task logs now go to the proper directory tree on remote hosts (and remote 
directories are created on the fly if necessary).

+ Use microseconds since epoch instead of random string for tagging a job task.
   - this allows "ls" to list things in the right order.
   - stdout and stderr files are now named after their task job scripts.

+ Fixed a bug preventing use of :fail triggers with asynchronous tasks.

 + New "suicide" triggers: graph = "A => !B" means B will take itself out of 
 the suite (after spawning, if it is a cycling task) if A succeeds. This can
 be used for automated recovery from task failures using sub-trees of tasks
 that tag along with a model (say) waiting for it to fail, but which
 automatically remove themselves if the model does not fail.

+ MAJOR CHANGE TO SUITE.RC STRUCTURE: 
  * better organization under new top level sections:
  [cylc] - non task-related suite config. 
  [scheduling] - determines when tasks are ready to run
  [runtime] - determines what runs, and how and where, when a task is ready
  * under [runtime] family and task properties are defined by a
  "namespace inheritance hierarchy" that allows common configuration of
  related tasks without repetition. 
WARNING: there are a number of changes associated with this item that
will break existing suite.rc files.

+ Task families are now defined by the runtime namespace hierarchy.
  * when used in the graph, they are suite definition shorthand only
   (no pseudo-task representing the family appears in the task pool). 
  * can be individually expanded or collapsed for graph plotting, and in
   the graph-based suite control GUI.

+ 'command =' config item changed to 'command scripting =' for consistency
  with 'pre-' and 'post-command scripting', and because it has long since
  ceased to be a single command.

+ New command 'cylc get-config' to retrieve any suite configuration data.

+ gcylc entry labels made consistent with command help, and gcylc Help
 buttons now call command help on the fly.

+ MAJOR CHANGE TO SUITE REGISTRATION SYNTAX:
   - changed from GROUP:NAME to an arbitrarily nested path (foo,
     foo.bar, foo.bar.baz, etc.)  Delimiter changed from colon to dot to
     avoid problems with use of suite identity in PATH variables.

+ suite identity variables changed for new registration names:
    CYLC_SUITE_REG_NAME    # foo.bar.baz
    CYLC_SUITE_REG_PATH    # foo/bar/baz
    CYLC_SUITE_DEF_PATH    # suite definition directory
+ task identity variables made consistent with suite identity variables:
    CYLC_TASK_ID
    CYLC_TASK_NAME
    CYLC_TASK_CYCLE_TIME
    CYLC_TASK_NAMESPACE_HIERARCHY  # <-- new

+ 'cylc admin test-suite' now detects failures properly.

+ Updated the User Guide for all the above.

+ suite hold is now implemented by holding all waiting tasks instead of
just not running them - this is more transparent to the user.

+ RUNAHEAD LIMIT:
    - now implemented by putting tasks into a special 'runahead' held
      state, rather than just delaying spawning. This is more
      transparent to the user.
    - now applies if (Ttask-Toldest) >= limit (was '>'). This generally 
    makes the limit shorter by one cycle, but is more intuitive.

+ Default start and stop times, if defined, are now displayed in the 
 GUI start panel (and the same for suite graph plotting).

+ Inlined editing of suite.rc files that use include-files: the 
 temporarily inlined file is now the live file during the editing
 session - i.e. changes take effect, for graphing or running the
 suite etc., whenever the inlined file is saved rather than on
 exiting the edit session.

________________________________________________________________________
 4.0.0-rc2

+ Bug fix: suite validation output aborted if an error occurred 
during task proxy instantiation.

+ 'cylc validate' now returns exit status 1 if validation fails.

+ restored full syntax highlighting to the User Guide.

+ corrected 'cylc email-alert' command help.

+ completed and documented the new task work and share directories

________________________________________________________________________
 4.0.0-rc3

+ documented a subtlety of namespace environment variable override.

+ vertical task name labelling in the GUI "LED light panel".

+ interactive family grouping controls for the graph viewer.

________________________________________________________________________
4.0.0-rc4

+ bug fix 'cylc graph' - it was failing if no initial or final cycle
times were provided by command line or in the suite.rc file.

+ better error messages for any failed attempt to create a directory,
if the user gives an illegal $TMPDIR or suite copy target directory.

+ JOB-SUBMISSION:
   - added support for PBS and SGE (qsub)
   - provided a simple mechanism for user-defined job submission methods
   - removed NIWA-specific job submission methods from the source tree

+ fixed a recently introduced fatal bug in the 'cylc [admin] test-db'
script (it referred to an example suite that has since been renamed).

________________________________________________________________________
4.1.0

+ A new "initial scripting" suite.rc item, for scripting inserted into
the very top of task job scripts. This can be used for environment setup
prior to configuring cylc access, e.g. for getting remote tasks to
source your login scripts (ssh remote command invocation doesn't do this).

+ Added support for the Jinja2 template engine, with documentation and
example suites. This allows powerful programmatic generation of suite
definitions.

+ Replaced the 'inline' command with 'view', which can show a temporary
Jinja2-processed suite in addition to inlining include-files.

+ Recently introduced bugs fixed: 
   - a background thread hung if the 'cylc graph' window was killed via
     the window manager.
   - a critical background thread died in the graph suite control GUI if
     the graph key was toggled on.

+ Unlock the suite database after any error other than "already locked".

+ Allow quotes around include-file filenames.

+ Bug fix: GUI suite restart: if an initial cycle was defined it was
passed through to the command line even if greyed out for a restart.

+ The graph command now handles suite parsing errors gracefully - if you
save an invalid suite.rc file while graphing, the graph window will
retry until the error is corrected, rather than aborting immediately.

+ Documented how to handle line continuation in graph strings.

+ Removed the ability to parse "Python:" expressions in the suite.rc
file, and to ignore items starting with underscores for use in configobj
string interpolation.  These have been made redundant by the more
powerful and general Jinja2 template processor (above).

+ A new --stdout option for 'cylc view' prints suite definitions to
stdout.

+ Fixed a bug in the unregister command - unregistering a group 'foo'
would result in group 'foo-bar' being unregistered too (this only
affected hyphenated names as '-' is now legal in suite names but is not
a regular expression "word character", and name matching was done up to 
a word boundary).

+ Simulation mode now works for tasks with internal outputs, and for
remotely hosted tasks without having to comment out some remote config.

+ Added trigger time offset and valid cycles to retrieved task state info.

+ Changed suite.rc special placeholder variables to avoid confusion with
environment variables:
   $(CYLC_TASK_CYCLE_TIME) => <CYLC_TASK_CYCLE_TIME>
   $(TASK) => <TASK>
   $(NAMESPACE) => <NAMESPACE>
   $(ASYNCID) => <ASYNCID>
See the updated User Guide, Section 8.7 "Special Placeholder Variables".

+ Many minor improvements to the User Guide.

________________________________________________________________________
4.1.1

+ Fixed a bug affecting home directory replacement in the share and work
directory paths for remote tasks that do not explicity override the
default share and work paths.

+ Defining the 'cylc directory' is now optional for remote tasks, for
sites that install cylc in the default $PATH.

+ A new variable CYLC_TASK_LOG_ROOT records the task stdout/stderr file
path prefix (everything prior to .out and .err) to allow use of the same
for related files (e.g. stats files).

+ Directives (e.g. for qsub or llsubmit) are now ignored unless the
chosen job submission method actually uses them. Previously they would
be written to the task job script regardless of the job submission
method (which was harmless - they are shell comments - but unnecessary).

+ Fixed two bugs affecting the runahead limit:
1/ runahead-held tasks were recorded in the final suite state dump, just
prior to shutdown, as normal "held" tasks and so were erroneously
released on restarting the suiteing the suiteing the suite.
2/ ability to change the runahead limit at run time was broken.

+ Updated the gcylc GUI Quick Guide help window.

+ Access to the cylc internet homepage from the gcylc Help menu.

+ New 'cylc browse' command for quick access to cylc documentation.

+ Validate command: 1/ bug fix: error messages during task proxy
instantiation were not being printed properly when multiple errors
occured. 2/ detect erroneous use of synchronous special tasks in
asynchronous graphs.

________________________________________________________________________
4.2.0

+ Cross-version suite compatibility. Put "#!cylc-x.y.z" as the first 
line of your suite.rc file, and cylc-x.y.z will be used to access the 
suite regardless of which cylc version is initially invoked.

+ Remote task stdout and stderr logs can now be accessed by gcylc, 
by the same passwordless-ssh based method used to submit remote tasks.

+ Runtime namespace inheritance hierarchy graphing.

+ gcylc now spawns ssh commands to retrieve remote task output via the
shell, so that task owner name can be defined by environment variable.

+ Task event handling:
  - restored the 'warning' event hook.
  - made timeout handling consistent with the other events:
    'submission_timeout' and/or 'execution_timeout' should now be 
    specified instead of just 'timeout'.

+ Added suite event handling, with one event: shutdown (have your suite
send an email before it shuts itself after completing the final cycle).
WARNING, this required changing the name of the existing ready-made
event handler:
   cylc [util] email-alert
has been replaced by:
   cylc [hook] email-task   (for task events)
   cylc [hook] email-suite  (for suite events)

+ Cycling tasks now spawn successors when they enter the submitted 
state, rather than the running state. This is better for external 
queueing systems (jobs get queued sooner) but otherwise makes no
difference.

+ Documented how multiple cycling graph sections combine to make the
complete graph. 

+ Family graph triggers with a cycle time offset are now handled
correctly, e.g. "foo[T-6] => bar" where foo is a task family defined
by the runtime namespace hierarchy.

+ Asynchronous (non-cycling) suites can now be stopped and restarted
mid-run.

+ Clock-triggered tasks can now be triggered manually before their
normal trigger time is up.

+ Improved graph string validation: dangling arrows are now caught;
the bad graph line is printed just before the error message.

+ Illegal namespace environment variable names are now detected; this
catches some beginner suite.rc section nesting errors such as thinking 
that indentation amount allows you to put higher level items such as 
'command scripting' below an environment section.

+ Documented how to omit tasks at runtime, completely or for later
insertion.

+ Graph GUI layout stability has been improved by redisplaying the graph
only if displayed state information (suite task content and task
state/color) changes.  The layout may still jump when a task changes
state/color even if nothing else has changed.

+ PBS job names are now truncated to 15 characters max (this is a
requirement for pre version 11 PBS).

+ Internal queues - the number of active tasks (i.e. those submitted or
running) at any one time can be limited, in one or more queues.

+ New User Guide chapter "Running Suites" which so far documents 
task states and internal queues.

________________________________________________________________________
4.2.1

+ Fixed an error in the housekeeping utility program, affecting
operations with no reference destination defined.

+ Fixed a serious bug affecting manual re-triggering of failed tasks: if
such a task failed again the failure would be logged but the task
state would remain 'running'; and if it succeeded the the previous
failure message would be erroneously identified as an "incomplete
output" resulting in cylc setting the task failed again (introduced
sometime after 3.5.1).

+ Exception handling and sensible error messages in case of suite state
dump corruption.

+ Restored remote host access to the ping, dump, show, and monitor
commands.  The '--host' and '--owner' command line arguments hard been
rendered ineffective by registration name validation assuming localhost.

________________________________________________________________________
4.2.2 PENDING

+ Implemented task started triggers (Issue #27):
     graph = "A:start => B"
  Means B triggers when A starts executing. This could previously be 
  achieved, more verbosely, by triggering off internal outputs.

+ Removed reversed command line argument handling in register command.

+ Bug fix: the registered command was aborting without unlocking the 
suite database if the suite.rc file was unreadable (broken since
cross-version compatibility introduced in 4.2.0).

