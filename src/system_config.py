#!/usr/bin/python

import logging
import sys
import os
import re

# import the system-specific default config settings generated by 'cylc
# configure', which should be located in the system definition directory.
import config_defaults

class system_config:

    def __init__( self, reg_name ):

        self.system_name = reg_name
        self.configured = {}

        self.system_item_list = \
                [
                        'logging_dir',
                        'state_dump_dir',
                        'task_list',
                        'task_groups',
                        'environment',
                        'max_runahead_hours',
                        'job_submit_method',
                        'job_submit_overrides',
                        'logging_level'
                 ]

        # load items in system_item_list from system config module
        self.load_config( config_defaults.config )

        # load user config override module, also in the system definition
        # directory.
        try:
            import config_override
        except ImportError:
            print 'No user config_override module found for ' + reg_name
        except SyntaxError, e:
            print 'SYNTAX ERROR IN USER CONFIG MODULE'
            raise SystemExit(e) # OR: raise the syntax error to see traceback
        except:
            print 'ERROR IN USER CONFIG MODULE'
            raise
        else:
            print 'Loading config overrides for ' + reg_name
            self.load_config( config_override.config )


        # check all were defined
        items = self.configured.keys()
        ok = True
        for item in self.system_item_list:
            if item not in items:
                print 'ERROR: REQUIRED CONFIG ITEM UNDEFINED:', item
                ok = False

        if not ok:
            raise SystemExit( "Required config items missing" )

        # check tasks in any named group are in the task list
        for group in ( self.configured['task_groups'] ).keys():
            tasks = self.configured['task_groups'][group]
            for task in tasks:
                if task not in self.configured[ 'task_list' ]:
                    raise SystemExit( "Task group member " + task + " not in task list" )

        # create dict of job submit methods by task name
        self.configured['job submit class'] = {}
        for task in self.configured['task_list']:
            self.configured['job submit class'][ task ] = self.configured[ 'job_submit_method' ]
            for method in self.configured[ 'job_submit_overrides' ]:
                if task in self.configured[ 'job_submit_overrides' ][ method ]:
                    self.configured['job submit class'][ task ] = method

        # DYNAMIC CONFIG
        # add registered system name to the logging and state dump dirs
        # to allow multiple instances of the same system (with different
        # names) to coexist
        statedir = self.configured['state_dump_dir'] + '/' + reg_name

        self.configured['state_dump_dir'] = statedir
        self.configured['state_dump_file'] = statedir + '/state'

        logdir = self.configured[ 'logging_dir' ] + '/' + reg_name 
        self.configured['logging_dir'] = logdir 

        if not os.path.exists( statedir ):
            try:
                print "Creating configured state dump directory"
                os.makedirs(  statedir )
            except Exception, e:
                raise SystemExit( e )

        if not os.path.exists( logdir ):
            try:
                print "Creating configured logging directory"
                os.makedirs(  logdir )
            except Exception, e:
                raise SystemExit( e )

    def load_config( self, config_items ):
        for key in config_items:
            self.configured[ key ] = config_items[ key ]


    def get( self, key ):
        return self.configured[ key ]

    def put( self, key, value ):
        self.configured[ key ] = value

    def set( self, key, value ):
        self.configured[ key ] = value

    def dump( self ):
        items = self.configured.keys()

        plain_items = {}
        sub_items = []
        for item in items:
            if item in ['clock', \
                    'daemon', \
                    'job_submit_method', \
                    'job_submit_overrides', \
                    'state_dump_file' ]:
                # TO DO: CLOCK AND DAEMON SHOULD NOT BE IN CONFIG!
                # job_submit_method and _overrides are subsumed into
                # the 'job submit class' item.
                continue

            try:
                subitems = (self.configured[item]).keys()
                sub_items.append( item )
            except:
                plain_items[ item ] = self.configured[ item ]

        self.dump_dict( plain_items )

        for item in sub_items:
            self.dump_dict( self.configured[ item ], item )

    def dump_dict( self, mydict, name = None ):

        indent = ' o '
        if name:
            print ' o  ' + name + ':'
            indent = '   - '

        items = mydict.keys()
        if len( items ) == 0:
            return

        longest_item = items[0]
        for item in items:
            if len(item) > len(longest_item):
                longest_item = item

        template = re.sub( '.', '.', longest_item )

        for item in items:
            print indent, re.sub( '^.{' + str(len(item))+ '}', item, template) + '...' + str( mydict[ item ] )

