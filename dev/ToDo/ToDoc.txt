################################################################
TO BE DOCUMENTED:

* REMOTE TASKS must define the remote CYLC_DIR and
  CYLC_SUITE_DIR in their [tasks]->[[foo]]->[[[environment]]] section
  (full path with no interpolation?); these will override the original
  (local) values in the job script's global environment section.
  Full path to remote task scripts not required - if they are in the
  remote $CYLC_SUITE_DIR/bin directory.

* new job submission method: derive a new class from the job_submit base
  class which, to be accessed by cylc, must have the same class and
  module name - used as: 'from new_js import new_js'.

* note 'cylc submit SUITE foo%T' results in T being adjusted to the next
  nearest valid cycle time for the task IF valid hours are defined for 
  the task by either graph or '[tasks][foo]hours'. If the latter is
  defined for a graphed task, it will be used to check the legality of 
  the graph, but only the graph hours will be used for the task (they
  may be a subset of the legal hours).  Ungraphed tasks can be:
   - inserted IFF [tasks][foo]hours is defined.
   - submitted: [task][foo]hours is used to adjust as above if defined,
                else the raw input T is used.

* catch invalid regular expression (e.g. unbalanced paren) in custom
  filter.

* ${CYLC_SUITE_NAME} or $CYLC_SUITE_NAME can be used in suite.rc
  job submission log directory.

* To dummy out a task, comment out its command list.

* Although cylc internals can easily handle different task
commands, environment, outputs etc., at different times,
I think this would rarely be needed (however: EXAMPLE
different n_restart_outputs for a model that does a short
forecast at 0,12 and long forecast at 6,18). To change this,
use more 'if HOUR in ...' conditionals in taskdef.py, as for
prerequisites via the dependency graph cycle-time lists, and some
interface to this in config.py (which however should be designed
not to further complicate suite.rc files for general use).

* duplicate keywords (e.g. dependency graph labels) in suite.rc
  result in a configobj.DuplicateError.

* special outputs do not result in dependence on the upstream task
  itself, just the output. Thus a oneoff task used to recover from 
  failure of another task can generate the same output as the task
  is emulating.

* task exec environment, regardless of order in suite.rc: 
  (i) CYLC environment (so can use cylcutil in globals)
  (ii) TASK ID          (so can use TASK_NAME in globals)
  (iii) user global
  (iv) user task
  (v) scripting

* changing dummy task run length:
  1/ dummy mode: command line or gui (sets CYLC_DUMMY_SLEEP in global env)
  3/ single task: CYLC_DUMMY_SLEEP in task environment

* suite behaviour if held up by one or more very slow tasks:
    - if not caught up to real time: newest tasks wait finished but
      unspawned.
    - if caught up to real time: newest tasks in waiting state.

* suite.rc environment sections:
  - any valid shell expression can be used, e.g.:
    FOO = $( some-command -option $ARGS )
  - but NOTE shell parameter expansions containing the '#' comment
    character must be quoted!

* extra task log files can be defined using environment variables
 (any other parameters in this category?)

* intercycle dependencies: 'foo(T-6) -> bar': 
  1/ only on left member of pairs
  2/ only negative offsets (outputs: only positive offsets)
  3/ with specific outputs: the output message must contain '$(CYCLE_TIME)'

* families can have internal dependencies.

* cold start prerequisites are ignored if the initial cycle time is not 
  a valid hour for the task (intentional: consider 00Z RCF task in nzlam).
