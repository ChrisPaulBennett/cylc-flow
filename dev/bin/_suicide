#!/usr/bin/env python

import os, sys
import socket
from time import sleep
from optparse import OptionParser
import cylc_pyro_client
import port_scan

# PARSE THE COMMAND LINE-----------------------------------------------
usage = """cylc suicide [options]

THIS COMMAND IS FOR USE BY EXTERNAL TASKS.

(untested for some time: may need updating)

An external task program can call this to see if the cylc operator has
told the corresponding task proxy to shut down, in which case the 
external task can shut itself down cleanly before being orphaned.

If invoked by a task that does not belong to a cylc scheduler (e.g. by
'cylc submit') it has no effect."""

parser = OptionParser( usage )

parser.set_defaults( started=False, success=False, failure=False, 
        all_restarts_completed=False, all_outputs_completed=False,
        priority='NORMAL')

parser.add_option( "-t", "--task-identity",
        metavar='TASK-ID',
        help="Task identity, defaults to $TASK_ID.",
        action="store", dest="task_id" )

parser.add_option( "-s", "--suite",
        metavar="SUITE",
        help="The name of the suite hosting the target task proxy object.",
        action="store", dest="suite_name" )

parser.add_option( "-o", "--owner",
        help="Owner of the target suite, defaults to $USER. Needed "
        "to infer the Pyro nameserver groupname",
        metavar="owner", action="store", dest="owner" )

parser.add_option( "--host",
        help="Cylc suite host, defaults to $CYLC_SUITE_HOST, then localhost.",
        metavar="HOSTNAME", action="store", dest="host" )

( options, args ) = parser.parse_args()

# MODE OF OPERATION ---------------------------------------------------
# have we been invoked from a script that was launched by 'cylc start',
# 'cylc submit', or a raw task script?
mode = 'raw'
if 'CYLC_MODE' in os.environ:
    mode = os.environ[ 'CYLC_MODE' ]
    # 'scheduler' or 'submit'

# TASK IDENTITY ---------------------------------------------------
if options.task_id:
    # command line
    task_id = options.task_id
else:
    # Default to $TASK_ID
    if 'TASK_ID' in os.environ.keys():
        task_id = os.environ[ 'TASK_ID' ]
    else:
        if mode == 'raw':
            #print 'cylc message: you appear to have invoked a raw task script'
            task_id = 'NAME%TAG'
        else:
            print 'ERROR: no task id provided!'
            sys.exit(1)

#  CYLC SUITE OWNER ------------------------------------------------------
if options.owner:
    owner = options.owner
else:
    owner = os.environ[ 'USER' ] 

# CYLC SUITE NAME-------------------------------------------------
if options.suite_name:
    suite = options.suite_name
elif 'CYLC_SUITE_NAME' in os.environ.keys():
    suite = os.environ[ 'CYLC_SUITE_NAME' ]
else:
    if mode == 'raw':
        suite = 'NONE'
    else:
        print 'ERROR: no task id provided!'
        sys.exit(1)

# CYLC SUITE HOST-------------------------------------------------------
if options.host:
    host = options.host
elif 'CYLC_SUITE_HOST' in os.environ.keys():
    host = os.environ[ 'CYLC_SUITE_HOST' ]
else:
    host = socket.getfqdn()
    #print 'WARNING, cylc message: no Pyro nameserver hostname provided!'
    #print 'will attempt to connect to a namerserver on local host'
 
if len( args ) != 0:
    parser.error( "no args allowed" )

if mode != 'scheduler':
    # there is no running scheduler assocated with this call
    sys.exit(0)

# CONNECT TO THE SUICIDE SUGGESTOR OBJECT-----------------------------
found, port = port_scan.get_port( suite, owner, host )
if not found:
    print >> sys.stderr, "suite " + suite + " is not running"
    sys.exit(1)

god = cylc_pyro_client.client( suite, owner, host, port ).get_proxy( 'remote' )

if god.should_i_die( task_id ):
    print "GOD SAYS YOUR TIME HAS COME!"
    sys.exit(1)
