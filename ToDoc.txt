################################################################
TO BE DOCUMENTED:

* To dummy out a task, comment out its command list.

* Although cylc internals can easily handle different task
commands, environment, outputs etc., at different times,
I think this would rarely be needed (however: EXAMPLE
different n_restart_outputs for a model that does a short
forecast at 0,12 and long forecast at 6,18). To change this,
use more 'if HOUR in ...' conditionals in taskdef.py, as for
prerequisites via the dependency graph cycle-time lists, and some
interface to this in config.py (which however should be designed
not to further complicate suite.rc files for general use).

* auto task insertion group: "all coldstart tasks"

* duplicate keywords (e.g. dependency graph labels) in suite.rc
  result in a configobj.DuplicateError.

* special outputs do not result in dependence on the upstream task
  itself, just the output. Thus a oneoff task used to recover from 
  failure of another task can generate the same output as the task
  is emulating.

* use of nohup: stdout will be buffered, so you can only see stderr
  prior to shutting down cylc (unless the buffer fills up?).  To 
  prevent this 'export PYTHONUNBUFFERED=true'
  prior to starting cylc.  
  ('#!/usr/bin/python -u' has the same effect, but we can't pass
  options to the interpreter when invoked with:
   '#!/usr/bin/env python')

* task exec environment ordering, regardless of order in suite.rc: 
  (i) global env
  (ii) task env
  (iii) scripting

* changing dummy task run length:
  1/ command line or gui (sets CYLC_DUMMY_SLEEP in global env)
  2/ CONFIG ITEM <- to do
  3/ single task: CYLC_DUMMY_SLEEP in task environment

* suite behaviour if held up by one or more very slow tasks:
    - if not caught up to real time: newest tasks wait finished but
      unspawned.
    - if caught up to real time: newest tasks in waiting state.

* suite.rc environment sections: shell parameter expansions 
  containing the '#' comment character must be quoted!

* extra task log files can be defined using environment variables
 (any other parameters in this category?)

* intercycle dependencies: 'foo(T-6) -> bar': 
  1/ only on left member of pairs
  2/ only negative offsets
  3/ ok with specific outputs: must contain '$(CYCLE_TIME)'

* families can have internal dependencies.
