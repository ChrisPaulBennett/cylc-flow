# MASTER CYLC TASK DEFINITION FILE, All available options, annotated.

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|

# Refer also to the cylc userguide. Optional keys: [square brackets].

#----------------------------------------------------------------------
%NAME
    # - name[, shortname]
    # - the optional short name can be displayed by the monitor to help
    #   clarify views of large systems. Cylc commands can refer to
    #   tasks by their full or short names.
    nz_forecast, nzf

#----------------------------------------------------------------------
%DESCRIPTION
    # - freeform multiline text description of what this task does.
    The quick brown fox jumped over the lazy dog.

#----------------------------------------------------------------------
%TYPE
    # - Task type ('free' or 'tied') with optional type modifiers
    free[, oneoff, sequential, dummy, contact, catchup_contact ]

    # - FREE tasks have no previous-instance dependence: successive
    #     instances can run in parallel if the opportunity arises.
    #     Most non-forecast model tasks should be of this type.
    # - TIED tasks have previous instance dependence through special
    #     'restart' outputs and prerequisites. 
    #     Most forecast model tasks should be of this type.
    
    # - The SEQUENTIAL modifier forces successive instances to run in
    #     sequence even if the opportunity to run in parallel arises.
    # - A task with the ONEOFF modifier does not spawn a successor.
    # - A task with the CONTACT modifier "makes contact" with the
    #     external world by waiting on some external event, usually
    #     availability or arrival of data; see %CONTACT_DELAY below.
    # - A task with the CATCHUP_CONTACT modifier is aware of whether
    #     tasks of its class have caught up to real time operation yet. 
    # - A task with the DUMMY modifier always invokes the external dummy
    #     task program, even in real operation mode.

    # SEE THE CYLC USERGUIDE FOR MORE ON TASK TYPES AND MODIFIERS.

#----------------------------------------------------------------------
%CYCLES
    # - Comma separated list of cycle hours valid for this task
    0,6,12,18

#----------------------------------------------------------------------
%TASK
    # - The program or script to submit to run this task.
    # - Located in the system definition scripts sub-directory,
    #     or an external location (full path, or not if in $PATH)
    # - Not required by tasks with the 'dummy' modifier.
    run-foo.sh

#----------------------------------------------------------------------
%REMOTE_HOST
    # - URL of a remote machine on which this task must run.
    # - This becomes 'self.remote_host' in the job submission class.
    # - It can be an environment variable set in system_config.py, e.g.:
    $SUPERCOMPUTER
 
#----------------------------------------------------------------------
[%CONTACT_DELAY]
    # - Only for tasks with the 'contact' modifier.
    # - Units: min, sec, hr 
    # - Task will not be submitted unless its prerequisites are
    #     satisfied AND wall clock time > task cycle time + the delay.
    # - Has no affect on case study or sufficiently delayed operation
    #     (where wall clock time > cycle time + delay).
    4.5 hr

#----------------------------------------------------------------------
[%OWNER]
    # - Sudo-run the task under this username, if supported by the 
    #     job submit method selected for the task.
    # - Defaults to the owner of the scheduler process. 
    bob

#----------------------------------------------------------------------
[%ENVIRONMENT]
    # - Environment variables to export in the task execution environment
    # - The following variables are automatically set:
    #     $TASK_ID, $TASK_NAME, $CYCLE_TIME, 
    #     $CYLC_SYSTEM_NAME, $CYLC_MODE, 
    #     $CYLC_NS_HOST, $CYLC_NS_GROUP, 
    #     $CYLC_DIR, $CYLC_SYSTEM_DIR (*)
    #   The latter two are used to give the executing task access to
    #   cylc itself and to your system-specific scripts. They
    #   necessarily refer to the local cylc installation. For tasks 
    #   that will be submitted on a remote machine, you can override
    #   these variables in this section with the correct remote paths.
    # - STRINGS CONTAINING SPACES SHOULD NOT BE QUOTED.
    # - Values may contain:
    #     (i) local environment variables, e.g. $HOME or ${HOME}
    #       These are interpolated before submitting the task.
    #    (ii) $(CYCLE_TIME [+/-N])   # NOTE ROUND PARENTHESES
    #       These are interpolated by cylc before submitting the task.
    #       $(CYCLE_TIME) without +/-N is equivalent to $CYCLE_TIME.
    #   (iii) Delayed environment variables: e.g. $[HOME]
    #       These will be replaced with literal '$HOME' etc in the job
    #       script that is submitted to execute the task and thus will
    #       not be evaluated until the task executes (may be required
    #       for jobs that run on remote hosts).
    #    (iv) Other variables defined in this section.

    VARNAME     value
    REMOTE_HOME $[HOME]
    ANIMAL      foxy fox  # NOT QUOTED!

[%COMMANDLINE]
    # - Any strings listed here are concatenated to construct a
    #   commandline that will be passed to the task when it is executed.
    # - You can list all arguments on one line, or use multiple lines.
    # - cylc-wrapper passes the command line through to wrapped tasks.
    # - The command line may contain:
    #     (i) local environment variables such as $HOME
    #       These are interpolated prior to submitting the task.
    #    (ii) cylc $(CYCLE_TIME) with +/- arithmetic (see above).
    #   (iii) task-specific %ENVIRONMENT variables defined above.
    #       These are not explicitly interpolated before constructing
    #       the command line, but the effect is the same because they
    #       are defined beforehand in the environment section.
    #    (iv) Delayed environment variables, e.g. $[HOME]
    #       These will be replaced with literal '$HOME' etc in the job
    #       script that is submitted to execute the task and thus will
    #       not be evaluated until the task executes (may be required
    #       for jobs that run on remote hosts).
    # - STRINGS CONTAINING SPACES MUST BE ENCLOSED IN DOUBLE QUOTES.
    #   (and if the external task is a shell script, it must be able
    #   to extracting quoted strings from the command line.)

    --next-analysis-time $(CYCLE_TIME + 6)
    -v -h $HOME
    --quoted-arg="The quick brown $ANIMAL jumped" 


#----------------------------------------------------------------------
[%DIRECTIVES]
    # - Scheduler directives for qsub, loadleveler, or similar.
    # - Choose a job submit class that makes use of these.
    # - The job class will likely define some default directives, which
    #   you can add to or override here.
    # - Values can contain the cycle time variable, $(CYCLE_TIME), which
    #   will be interpolated by cylc and can make use of cylc's internal
    #   cycle time arithmetic, e.g. $( CYCLE_TIME [+/-N] ), and shell 
    #   environment variables which will be passed on to the shell.
    #   Thus $(CYCLE_TIME) is equavilent to $CYCLE_TIME except that the
    #   former version will be interpolated before reaching the shell.
    #   and can use cylc's internal cycle time arithmetic - note the
    #   parentheses to distinguish from shell environment variables.
    directive_name1 value1
    directive_name2 value2

#----------------------------------------------------------------------
%ESTIMATED_RUN_TIME   
    # - Units: min, sec, hr
    # - Used only in dummy mode, to simulate correct task run time
    # - May be conditional on cycle hour.
           20 min      # default 20 minutes
    0,12 | 25 min      # 25 minutes if cycle hour is 00 or 12
    6,18 | 35 min      # 35 minutes if cycle hour is 06 or 18

#----------------------------------------------------------------------
%PREREQUISITES      
    # - Quoted string literals, one per lines.
    # - Cycle time arithmetic supported: $(CYCLE_TIME [+/- <hours>])
    # - May be conditional on cycle hour.
    # - Do not list the restart prerequisites of 'tied' tasks (forecast 
    #     models), they are created and handled automatically.
    # - You may use the automatic started, completed, finished, outputs.
    # - Should contain $(CYCLE_TIME) somewhere, to distinguish outputs
    #     from different cycles.

           "baz finished for $(CYCLE_TIME)"
           "file bar_$(CYCLE_TIME).nc ready"
    0,12 | "foo output files ready for $(CYCLE_TIME)"

#----------------------------------------------------------------------
[%STARTUP_PREREQUISITES]
    # - Prerequisites that are only used once, at system start up.
    "cold start outputs ready for $(CYCLE_TIME)"

#----------------------------------------------------------------------
%OUTPUTS
    # - Quoted string literals, one output message per line.
    # - Prefix with estimated completion time in min, sec, or hr. 
    #   - (used only in dummy mode, to simulate correct completion time).
    # - Cycle time arithmetic supported: $(CYCLE_TIME [+/- <hours>])
    # - DO NOT REGISTER the special 'started' and 'finished' messages,
    #     or the special restart outputs of 'tied' tasks (i.e. forecast
    #     models); these are all handled automatically by cylc.
    # - May be conditional on cycle hour, as for prerequisites.
    # - Should contain $(CYCLE_TIME) somewhere, to distinguish outputs
    #     from different cycles.

           10 min: "file foo_0_$(CYCLE_TIME).nc ready"
    0,12 | 15 min: "foo outputs ready for $(CYCLE_TIME)"
    6,18 | 15 min: "file foo_2_$(CYCLE_TIME).nc ready"

#----------------------------------------------------------------------
[%ESTIMATED_RESTART_OUTPUT_TIMES]
    # - 'tied' tasks only (i.e. forecast models).
    # - Comma separated list of estimated completion times, in min, sec,
    #     or hr, for the restart outputs depended on by subsequent
    #     instances of this task.
    # - May be conditional on cycle hour, as for prerequisites.
    # - The number of times listed should equal the number of restart
    #   outputs dumped by the task in real operation.
    # - The time estimates are used only in dummy mode, to correctly 
    #     simulate the time that restart outputs are completed.
    # - The time values are used only in dummy mode, but number of
    #   times listed is more generally important: for N entries, ONE
    #     special restart PREREQUISITE and N special restart OUTPUTS
    #     are registered automatically.
    # - The first restart output is assumed to valid at the cycle time 
    #     of the NEXT task instance, the second for the NEXT NEXT
    #     instance, and so on.
    0,12 | 5 min
    6,18 | 5 min, 10 min, 15 min

#----------------------------------------------------------------------
[%NO_NONCOTEMPORAL_DEPENDANTS] 
    # - Set True if you can guarantee that this task has only cotemporal
    #     (same cycle) dependants. This allows cylc to delete the task
    #     as soon as it is finished AND there are no other tasks still 
    #     waiting at or prior to its cycle time.
    # - DO NOT SET TRUE FOR 'tied' TASKS (FORECAST MODELS), which by 
    #     definition depend on their predescessor's restart outputs.
    True

#----------------------------------------------------------------------
[%ONEOFF_FOLLOW_ON]
    # - Name of another task to "hand the baton on to". 
    # - This is only required for oneoff tasks with non-cotemporal 
    #   dependants (which your system will probably not have!) so
    #   that cylc knows when it can delete this task (it cannot be
    #   deleted before its depandants exist).
    task_foo
