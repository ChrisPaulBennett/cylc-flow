# ANNOTATED CYLC TASK DEFINITION FILE.
# See also family.def and the cylc userguide. 
# Optional (or task-type-dependent) sections: [square brackets].

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|

#______________________________________________________________ALL TASKS
%NAME
    # - Name[, Shortname]

    # - The optional short name can be displayed by system monitors to 
    #   help save screen real estate when viewing large systems. 
    # - Cylc commands can refer to tasks by full or short names.

#______________________________________________________________ALL TASKS
%DESCRIPTION
    # - freeform multiline text description of what this task does.

    The quick brown fox jumped over the lazy dog.

#______________________________________________________________ALL TASKS
%TYPE
    free[, oneoff, sequential, dummy, contact, catchup_contact ]

    # - Task type ('free' or 'tied') with optional type modifiers
    # - FREE tasks have no previous-instance dependence: successive
    #     instances can run in parallel if the opportunity arises.
    #     Most non-forecast model tasks should be of this type.
    # - TIED tasks have previous instance dependence through special
    #     'restart' outputs and prerequisites. 
    #     Most forecast model tasks should be of this type.
    
    # - The SEQUENTIAL modifier forces successive instances to run in
    #     sequence even if the opportunity to run in parallel arises.
    # - A task with the ONEOFF modifier does not spawn a successor.
    # - A task with the CONTACT modifier "makes contact" with the
    #     external world by waiting on some external event, usually
    #     availability or arrival of data; see %CONTACT_DELAY below.
    # - A task with the CATCHUP_CONTACT modifier is aware of whether
    #     tasks of its class have caught up to real time operation yet. 
    # - A task with the DUMMY modifier always invokes the external dummy
    #     task program, even in real operation mode.

    # SEE THE CYLC USERGUIDE FOR MORE ON TASK TYPES AND MODIFIERS.

#______________________________________________________________ALL TASKS
%CYCLES
    # - Comma separated list of cycle hours valid for this task

    0,6,12,18

#______________________________________________________________ALL TASKS
%TASK
    # - The program or script cylc must submit to run this task.
    # - Located in the system definition scripts sub-directory,
    #     or an external location (full path, or not if in $PATH)
    # - Not required by tasks with the 'dummy' modifier.
    # - RETRY LIST: each listed commandline will be used in turn if 
    #   the task reports failure on the previous commandline 

    run-foo.sh                                          # try no.1
    run-foo.sh --try-again-with-a-long-commandline \    # try no.2
        "like this: the quick brown fox jumped over the lazy dog"
    disaster-recovery.sh                                # try no.3

#_______________________________________________________________________
%PREREQUISITES                    # MAY DEPEND ON CYCLE HOUR - see below
    # - Quoted string literals, one per lines.
    # - Use $(CYCLE_TIME), $CYCLE_TIME, or ${CYCLE_TIME} to distinguish
    #   between the outputs of task instances with different cycle times.
    # - Cycle time arithmetic is supported: $(CYCLE_TIME [+/- <hours>])
    # - A RESTART PREREQUISITE IS REGISTERED AUTOMATICALLY FOR TIED TASKS:
    #     + "NAME restart files ready for $CYCLE_TIME"
    # - You may trigger off started, completed, finished, failed messages.

    "foo output files ready for $(CYCLE_TIME)"
    "file bar-$(CYCLE_TIME).nc ready"

    # - You may trigger off started, completed, finished, failed messages.

    "baz%$(CYCLE_TIME) finished"
    "baz%$(CYCLE_TIME) failed"
    
    #___________________________________________________________________
    # CONDITIONAL PREREQUISITES
    # By default ALL prerequisites must be satified before the task gets
    # submitted; alternatively you can provide labels and a conditional
    # expression as follows:

    A  "main_forecast%$(CYCLE_TIME) finished"
    B  "recovery_forecast%$(CYCLE_TIME) finished"
    C  "processed obs ready for plotting"
    conditional: ( [A] or [B] ) and [C]

#_______________________________________________________________________
%OUTPUTS                          # MAY DEPEND ON CYCLE HOUR - see below
    # - Quoted string literals, one output message per line.
    # - $(CYCLE_TIME), $CYCLE_TIME, or ${CYCLE_TIME} should almost
    #   certainly appear somewhere in the string to distinguish between
    #   the outputs of task instances with different cycle times.
    # - Cycle time arithmetic supported: $(CYCLE_TIME [+/- <hours>])
    # - SOME SPECIAL OUTPUTS ARE REGISTERED AUTOMATICALLY BY CYLC:
    #     + "NAME%CYCLE started|finished|failed|completed" (ALL TASKS)
    #     + "NAME restart files ready for CYCLE"          (TIED TASKS)
    # - May be conditional on cycle hour
    
    "file foo-$(CYCLE_TIME).nc ready"
    "atmos model postprocessing done for $(CYCLE_TIME)"
    "file bar-$(CYCLE_TIME).nc ready"

#_______________________________________________________________________
%[MEMBER_OF]
    FamilyX
 
    # - See the annotated family.def file.
    # - Task triggers when FamilyX starts (if no other prerequisites).
    # - A task family finishes when its member tasks have all finished.
#_______________________________________________________________________
[%REMOTE_HOST]
    # - URL of a remote machine on which this task must but submitted.
    # - Can be defined by an environment variable from system_config
    # - This section is not required IF the task runs on a remote
    #   machine but is submitted locally (e.g. to a cross-platform
    #   batch queue resource manager such as loadleveler).

    $SUPERCOMPUTER
 
#_______________________________________________________________________
[%CONTACT_DELAY]                  # MAY DEPEND ON CYCLE HOUR - see below
    # - Only for tasks with the 'contact' modifier.
    # - Units: min, sec, hr 
    # - Task will not be submitted unless its prerequisites are
    #     satisfied AND wall clock time > task cycle time + the delay.
    # - Has no affect on case study or sufficiently delayed operation
    #     (where wall clock time > cycle time + delay).

    4.5 hr

#_______________________________________________________________________
[%OWNER]
    # - Submit the task to run under this username.
    # - Defaults to the cylc user.
    # - Can be defined by an environment variable from system_config

    bob
    # or:
    $REMOTE_MODEL_OWNER

#_______________________________________________________________________
[%ENVIRONMENT]
    # - Environment variables to export in the task execution environment
    # - The following variables are automatically set:
    #     $TASK_ID, $TASK_NAME, $CYCLE_TIME, 
    #     $CYLC_SYSTEM_NAME, $CYLC_MODE, 
    #     $CYLC_NS_HOST, $CYLC_NS_GROUP, 
    #     $CYLC_DIR, $CYLC_SYSTEM_DIR (*)
    #   The latter two are used to give the executing task access to
    #   cylc itself and to your system-specific scripts. They
    #   necessarily refer to the local cylc installation. For tasks 
    #   that will be submitted on a remote machine, you can override
    #   these variables in this section with the correct remote paths.
    # - STRINGS CONTAINING SPACES SHOULD NOT BE QUOTED.
    # - Values may refer to global variables, other local variables
    # defined previously in this section, and $(CYCLE_TIME [+/-N]) 

    VARNAME     value
    OTHER_VARNAME     other_value

#_______________________________________________________________________
[%DIRECTIVES]
    # - Scheduler directives for qsub, loadleveler, or similar.
    # - Choose a job submit class that makes use of these.
    # - The job class will likely define some default directives, which
    #   you can add to or override here.
    # - Values can contain the cycle time variable, $(CYCLE_TIME), which
    #   will be interpolated by cylc and can make use of cylc's internal
    #   cycle time arithmetic, e.g. $( CYCLE_TIME [+/-N] ), and shell 
    #   environment variables which will be passed on to the shell.
    #   Thus $(CYCLE_TIME) is equavilent to $CYCLE_TIME except that the
    #   former version will be interpolated before reaching the shell.
    #   and can use cylc's internal cycle time arithmetic - note the
    #   parentheses to distinguish from shell environment variables.

    directive_name1 value1
    directive_name2 value2

#_______________________________________________________________________
[%EXTRA_SCRIPTING]
    # - Any additional SHELL SCRIPTING to execute before the task script.
    # - Can be used to source existing environment setup scripts etc.
    # - Can include and environment variables as for COMMANDLINE etc.
    #   but NOT $(CYCLE_TIME [+/-N]) - which gets translated to Python.
    #   (you can achieve the same result using 'cylc calc' however:)

    echo "hello from $[USER]"
    echo "This cycle is $CYCLE_TIME"
    echo "Next cycle is $( cylc calc --add=6 )"
    uname -a
    . $[HOME]/environment/configure.sh

#_______________________________________________________________________
[%COLDSTART_PREREQUISITES]        # MAY DEPEND ON CYCLE HOUR - see below
    # - Prerequisites that are only used at system start up.
    # - In subsquent cycles only %PREREQUISITES are used.
    # - These entirely override (rather than add to) %PREREQUISITES
    # - Use of this section heading with no prerequisites listed under
    #   it implies literally "no prerequisites" at startup. 

    # - Maybe depend on cycle time, and conditional expressions are 
    #   allowed as for %PREREQUISITES.

    "cold start files ready for $(CYCLE_TIME)"

#_______________________________________________________________________
[%SUICIDE_PREREQUISITES]          # MAY DEPEND ON CYCLE HOUR - see below
    # - Prerequisites that, if satisfied, cause task to self destruct.
    # - Maybe depend on cycle time, and conditional expressions are 
    #   allowed as for %PREREQUISITES.

    # - E.g. for a special failure recovery task that is not needed if
    #   the main task completes successfully:

    "main_forecast%$(CYCLE_TIME) finished"

#_______________________________________________________________________
[%N_RESTART_OUTPUTS]              # MAY DEPEND ON CYCLE HOUR - see below
    # - The number of subsequent consecutive cycles for which this task
    #   writes "restart files".
    # - Required for "tied" tasks (i.e. forecast models).
    # - May be conditional on cycle hour.
    # - Results in ONE restart PREREQUISITE and N restart OUTPUTS
    #   being registered automatically for this task.

    4

#_______________________________________________________________________
[%INTERCYCLE] 
    True   # Default is False

    # - NON-RESTART INTERCYCLE DEPENDENCY INDICATOR, set True if this
    #   task has any direct downstream dependants in subsequent cycles.
    # - Not required to indicate normal tied task restart dependencies.
    # - Cylc assumes by default that tasks have only cotemporal
    #   dependants (other than restart dependencies) simply because 
    #   this will be true of the vast majority of tasks in most systems,
    #   and it allows spent tasks to be removed from the system earlier.
    # - Setting "use quick task elimination = False" in cylc preferences 
    #   is equivalent to assuming that all tasks could have general
    #   intercycle dependencies, in which case %INTERCYCLE is not needed.
#_______________________________________________________________________
[%FOLLOW_ON]
    foo

    # - This is required ONLY for oneoff tasks with INTERCYCLE=True.
    # - Name of another task to "hand the baton on to". This task will
    #   not be removed from the system until that task has finished. 
#_______________________________________________________________________
[%INHERIT]
    # - Name of another task from which to inherit taskdef properties.
    # - You must supply at least %NAME, %DESCRIPTION, and %OUTPUTS.
    # - Non-singular quantities such as prerequisites and environment
    #   variables, if provided, will entirely OVERRIDE, not add to,
    #   those defined in the parent task.
    # - Task definition files are generally so brief that there is not 
    #   a lot of benefit to inheritance, but it may save some effort
    #   when defining a lot of very similar tasks (e.g. for obs
    #   processing, or a forecast ensemble). 
    
    parent_task_name
#_______________________________________________________________________
[%LOGFILES]
    # - List of "output logs" and similar, IN ADDITION TO stdout and
    #   stderr capture from the cylc job submission process (which
    #   is are provided automatically by the job submission method
    #   where possible) to make available via the cylc gtk monitor. 
    #   This section can be used for tasks that direct their own stdout
    #   and stderr streams to named files, and for tasks with
    #   complicated native job-submission procedures that have to be
    #   invoked by cylc via a custom wrapper such that the initial
    #   process submitted by cylc is not the process that generates the
    #   output of interest. See the Userguide on Custom Job Submit Wrappers.

    $HOME/atmos/running/$CYCLE_TIME/met.out
    $HOME/atmos/running/$CYCLE_TIME/met.err

#_______________________________________________________________________
#_S_E_C_T_I_O_N_S__T_H_A_T__M_A_Y__D_E_P_E_N_D__O_N__C_Y_C_L_E__H_O_U_R_

    # %PREREQUISITES, %COLDSTART_PREREQUISITES, %SUICIDE_PREREQUISITES,
    # %OUTPUTS, %CONTACT_DELAY, %N_RESTART_OUTPUTS. 

    # Example:

      general1
      general2

      if HOUR in 0,12:
        conditional1
        conditional2

      if HOUR in 6,18:
        conditional3

    # Note that the general case can be used as a default that gets
    # overridden by the specific cases below it, EXCEPT in the case of
    # prerequisites and outputs: these are *added* to a list so that
    # hour-specific requisites will, if the hour is right, add to but
    # not replace any general ones that have already been defined. 
