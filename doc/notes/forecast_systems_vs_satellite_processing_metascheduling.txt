From: Hilary Oliver
To: Michael Uddstrom; Bernard Miville; Simon Wood
Date: Friday, May 15, 2009 4:04 PM
Subject: forecast systems vs satellite processing metascheduling

Simon, Michael, and Bernard, 

Before I forget about it, here's the full explanation of why my "metascheduler
for multi-model forecasting systems", sequenz, is not suited to controlling
asynchronous satellite data processing.

In terms of task sequencing, IF satellite pass times are analogous to forecast
reference times, then the satellite data processing system does look
suspiciously like a simplified forecasting system -  simplified in that it
only has cotemporal  (same satellite pass, or same reference time)
dependencies. However, if I understand Simon correctly, the fact that
satellite pass times are (for our purposes) unpredictable, restricts how early
he can create his task proxy objects (because their prerequisites are
undetermined until the pass time is known).  But forecast reference times are
completely predetermined, so I have the freedom to create my task objects
earlier than that if there's a good reason to do so - and as it happens there
is: I handle my non-cotemporal dependencies (a forecast model always depends
on its own previous instance) by making them implicit in my task creation
mechanism and then proceeding as if they don't exist: a task gets created when
its previous instance achieves a "finished" state [*], so it can't run before
then. But for satellite processing, even if this didn't conflict with the
creation time restriction above, it would be silly to impose universal
previous instance dependence where there should be none at all: it would
prevent the processing of entire satellite passes in parallel, which Simon
will presumably be able to do when multiple input datasets are available.

Hilary

[*] but see my note on "previous instance dependence" and "maximal system
throughput".
