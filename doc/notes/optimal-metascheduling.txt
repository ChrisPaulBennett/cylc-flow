OPTIMAL METASCHEDULING

An optimal metascheduler would queue every task for execution at the instant
its prerequisites are satisfied, regardless of reference time or any other
consideration, except where we want to stop certain kinds of task from running
too far ahead of the rest.  

Forecast models have previous instance dependence: they can't begin running
before their 'restart files' (i.e. background model state information valid at
the start of the new forecast) have been written out by the previous forecast.
This is often treated implicitly in the model: if the restart file is not used
for any other purpose it may be written and read from some model "running
directory" so that the user does not have to know about it.  This was also
handled implicitly in early versions of cylc, through the task proxy
creation mechanism: a new forecast task was not created before the previous
instance had finished, thus it could not beginning running before prior to
that point. This had the advantage of simplicity, particular at system startup
when there are no previous instances.  However, (i) the real system does have
these dependencies and they have to be satisfied externally prior to system
startup, or by oneoff cold start tasks that masquerade as previous instances,
and, and (ii) there are advantages to having the system know about actual
restart dependencies: if one weather forecast has to be ommitted because of
missing data, say, downstream models that write out restart files for several
subsequent forecast can continue warm cycling over the gap. Cylc now uses
explicit restart dependencies which makes it possible to continue running over
most operational problems with minimal human intervention and (no need to shut
the system down).

Postprocessing tasks don't have previous instance dependence, but they depend
directly or indirectly on forecast models that do. So, in practice successive
instances will never be able to run entirely in parallel, but they may be able
to overlap somewhat (this happens when the post processing task takes longer
to run than the total time between the previous and current model instances
finishing (i.e. significantly longer than the model itself). If it is not safe
to run multiple instances of the same post processing job at the same time in
the same area without interference between instances, then the task can be
artificially constrained to run sequentially. 

The difference between preprocessing and postprocessing tasks is somewhat ill
defined, but some preprocessing tasks are  of the "contact" type: they make
contact with the external world where they wait on some event to occur at
some known real time interval (approximately) after their reference time.
Waiting on incoming real time observations, for example. These tasks, in
addition to having to wait for their prerequisites to be satisifed, also wait
for their particular delayed start time to arrive before running. If the
systme is running behind ('catching up') then they begin running as soon as
their prerequisites are satisfied). There has to be at least one of these
tasks in every system.  They constrain the system in real time operation and
create a gap between successive cycles.

Tasks with no prerequisites and no previous instance dependence, e.g. (some?)
ocean tide model(s), would naturally 'all go off at once' out to the configured
stop time (if there is one!). These are constrained by the maximum allowed
runahead time, i.e. the reference time interval between the fastest and
slowest tasks in the system.  They can additionally be forced to run in
sequence, or given artificial prerequisites that tie them to other tasks, if
that is desirable.

-----------

WHEN A TASK RUNS CAN RUN IS DETERMINED ENTIRELY BY:

  (a) EXISTENCE -it must be created by the time it is needed. This is
      determined by task ABDICATION: each task object tells the task manager
      when its next instance can be created: forecast models abdicate when
      their restart files have been written out, forced sequential tasks
      abdicate only when they have finished.

  (b) PREREQUISITES - these must be satisfied before a task can run. This
      includes explicit restart prerequisites for forecast models. 

  (c) DELAYED REAL START TIME - contact tasks only; these won't start running
      until their delayed start time is up.


Note on ABDICATION

The entity that best knows when a new of a particular task is needed is the
previous instance of that same task type, because: the task class ("type")
knows what the next valid reference time, etc., is for that task and, most
importantly, it knows how tasks of its own type depend on their previous
instances.  
