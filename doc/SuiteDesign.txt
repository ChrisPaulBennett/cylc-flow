________________________________________________________________________
                                              CYLC SUITE DESIGN OVERVIEW

This is a minimal overview of cylc suite definition, and some general
suite design guidelines. For more information, see the cylc userguide.

____________________________________
SUITE DEFINITION DIRECTORY STRUCTURE

.
├── suite.rc       # suite config file
│ 
└── bin/           # task scripts
    ├── foo.sh
    └── ...
  
In addition, the suite definition directory may contain: 

1/ any number of include-files referred to by the suite.rc file,
at the top level, or in sub-directories as you like.

2/ any other suite-related files or sub-directories (e.g. a
documentation sub-directory); these will be ignored by cylc,
but can be version-controlled with the suite definition.

> WHAT GETS RUN WHEN A TASK'S PREREQUISITES ARE READY?

Most tasks, when ready to run, will run a command line specified 
in the suite.rc file, after configuring the task execution environment,
also as specified in the sutie.rc file. The command line may run a
script or executable located in the suite bin directory, or elsewhere,
but simple tasks may be entirely scripted in the suite.rc file,
and multiple tasks with similar functionality can call the same task
script with different input parameters.

Scripts or executables in the suite 'bin' directory is automatically
accessible to the suite (i.e. you don't need to supply the full file
path).

___________________________________
PROVIDING INPUT PARAMETERS TO TASKS

Cylc tasks, as defined in the suite.rc file, can take input from command
line arguments and/or environment variables that can be defined in the
suite.rc global or task-specific environment sections.  Generally
speaking, input parameters common to several tasks should be defined
once in the global environment section, and those specific to a single
task can go in the task's config section.

Global environment variables can reference other previously defined
global variables, and task-specific variables can reference global
variables or other local variables previously defined for the same task
(cylc preserves the order of variable definition).

____________________________________
HANDLING TASK INPUT AND OUTPUT FILES

To run a single task outside of a suite and verify its correctness, the
minimum information required is: what are its prerequisites/inputs and
its outputs. Because cylc is self organising, the ideal is to build a
suite from tasks that are each configured with no more than this
information - in other words unaware of their place in the wider system.
Then in principle tasks could be swapped in and out of, and between,
suites without having to change anything else (except perhaps to ensure
that common inputs and outputs are expressed consistently among tasks).
The fewer explicit connections between tasks, the more flexible and
robust the suite.

But to what extent is this possible when dependencies correspond
(usually) to files that are generated by one task and used by others?

There are several ways of handling connections like this within a suite:

 (1) Have all tasks read and write from a common directory. This may be 
 easily achievable in a small system. 

 (2) Have task B "know" to read its input from A's output directory, or
 have task A know to write its output to B's input directory. This is
 not ideal because at least one of these tasks must have explicit
 knowledge of its place in the suite.
 
 (3) Define middle-man tasks to move files from one task's output
 directory to another's input directory. This is not ideal because
 although the important tasks can be configured generically there are
 now have extra (albeit simple) tasks, and they do require knowledge of
 the wider system. However, this solution may be necessary in some cases.

 (4) THE BEST SOLUTION is probably to have tasks read the paths to
 common files and directories from common environment variables defined
 once in the suite.rc file. Tasks can thus be configured as if to run
 alone and the knowledge of how they interact within the context of the
 suite is confined to the config file. It may not be practical to do
 this throughout some systems (e.g. if tasks run under different owners
 or on different machines) but it is a good ideal to aim for.

____________________
RUNNING SINGLE TASKS

'cylc submit' runs a single suite task exactly as it would run within
the suite, both in terms of job submission method and execution
environment. This can be particularly valuable when building a new
suite or debugging single tasks.

It is a good idea to ensure that all tasks create their own output
directories if necessary, rather than assuming they will exist due to
the action of other suite tasks; this will maximize you ability to run
single tasks with setting up the filesystem environment manually.

  % mkdir -p $OUTDIR
  % mkdir -p $( dirname $OUTFILE )

  % cylcutil check-vars -c OUTDIR
  % cylcutil check-vars -p OUTFILE
