#!/usr/bin/env python

# THIS FILE IS PART OF THE CYLC SUITE ENGINE.
# Copyright (C) 2008-2015 NIWA
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import re
from cycling.loader import get_interval, get_interval_cls
from trigger import get_message_offset


class output(object):
    """
    Task outputs, used to generate message output strings.

    Unlike prerequisites generated by task triggers, which can have message
    and graph offsets, outputs only have message offsets; they are always
    evaluated at the task's own cycle point.

    TODO - this module can probably be unified with trigger.py.
    """

    def __init__(self, msg, base_interval=None):
        self.msg = msg
        self.msg_offset = get_message_offset(msg, base_interval)

    def get(self, point):
        new_point = point
        if self.msg_offset:
            new_point = point + self.msg_offset
        return re.sub('\[.*\]', str(new_point), self.msg)

    def __eq__(self, other):
        return self.msg == other.msg and self.msg_offset == other.msg_offset
