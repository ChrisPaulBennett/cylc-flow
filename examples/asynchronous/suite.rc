title = a demo suite for repeating asynchronous tasks

description = """A tree of asynchronous tasks triggered by a random
satellite pass, plus some cycling tasks. Multiple asynchronous
processing trees can run in parallel if the data happens to come in
quickly."""

[dependencies]
    [[12]]
        graph = "A => B"

[raw task definitions]
    # The asynchronous tasks have implementations in bin/.
    [[watcher]]
        description = "watch for incoming satellite data"
        # This task runs indefinitely watching for the incoming data.
        # When data arrives it sends a message matching a special
        # pattern. The task proxy extracts the arbitrary sat pass ID
        # from the message and dynamically registers an output that 
        # downstream tasks can trigger off to process this pass.
        type = daemon
        command = watcher.sh
        asyncid pattern = "SATID-\d+"
        [[[outputs]]]
            foo = "$(ASYNCID) ready for processing"

    [[upload]]
        description = "upload new satellite data"
        type = asynchronous
        asyncid pattern = "SATID-\d+"
        command = upload.sh
        [[[prerequisites]]]
            # Trigger off outputs matching this pattern:
            one = "$(ASYNCID) ready for processing"
            # Once triggered:
            # 1) the pattern is replaced with the match in my outputs, and
            # 2) the match string is exported to the task as $ASYNCID.
        [[[outputs]]]
            # This task's own outputs (pattern replaced as described).
            one = "$(ASYNCID) uploaded"

    [[archive]]
        description = "archive new satellite data"
        type = asynchronous
        asyncid pattern = "SATID-\d+"
        command = archive.sh
        [[[prerequisites]]]
            one = "$(ASYNCID) ready for processing"
        [[[outputs]]]
            one = "$(ASYNCID) archived"

    [[finishup]]
        description = "A task to mark the end of processing of one pass"
        # Used to determine when cylc can remove the spent tasks. 
        asyncid pattern = "SATID-\d+"
        type = asynchronous
        command = cylc task message $ASYNCID processing finished
        [[[prerequisites]]]
            one = "$(ASYNCID) uploaded"
            two = "$(ASYNCID) archived"
        [[[outputs]]]
            one = "$(ASYNCID) processing finished"
