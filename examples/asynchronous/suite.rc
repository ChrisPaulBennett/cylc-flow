title = asynchronous demo suite

description = """A tree of asynchronous tasks triggered by a 'random'
satellite pass, or similar, plus some cycling tasks to show that cylc
can handle both in the one suite."""

[dependencies]
    # the cycling tasks (defined by graph only)
    [[12]]
        graph = "A => B"

[raw task definitions]
    # The asynchronous tasks, which have implementations in bin/.
    # (NOTE asynchronous tasks cannot be parsed from the graph yet).
    [[watcher]]
        # This task runs indefinitely watching for the incoming data.
        # When data arrives it sends a message matching a special
        # pattern. The task proxy extracts the arbitrary sat pass ID
        # from the message and dynamically registers an output that 
        # downstream tasks can trigger off to process this pass.
        type = daemon
        output pattern = SATID-\d+ ready for processing
        command = watcher.sh
    [[upload]]
        type = asynchronous
        command = upload.sh
        [[[pattern prerequisites]]]
            # Trigger off outputs matching this pattern:
            one = "(SATID-\d+) ready for processing"
        [[[outputs]]]
            # My outputs. Once triggered this pattern is 
            # replaced with the literal match string.
            one = "(SATID-\d+) uploaded"
        [[[death prerequisites]]]
            # I can be removed when this condition is satisfied.
            # (pattern replaced as for outputs).
            one = "(SATID-\d+) processing finished"

    [[archive]]
        type = asynchronous
        command = archive.sh
        [[[pattern prerequisites]]]
            one = "(SATID-\d+) ready for processing"
        [[[outputs]]]
            one = "(SATID-\d+) archived"
        [[[death prerequisites]]]
            one = "(SATID-\d+) processing finished"

    [[finishup]]
        # A task to mark the end of processing of one pass, after which
        # the spent tasks for this pass can be removed from the suite.
        type = asynchronous
        command = cylc task message $ASYNCID processing finished
        [[[pattern prerequisites]]]
            one = "(SATID-\d+) uploaded"
            two = "(SATID-\d+) archived"
        [[[outputs]]]
            one = "(SATID-\d+) processing finished"
        [[[death prerequisites]]]
            one = "(SATID-\d+) processing finished"

