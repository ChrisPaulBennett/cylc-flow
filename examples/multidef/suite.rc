title = "explicit task generator example suite"

description = "Wherein a list of similar tasks are defined at once."

[scheduling]
    initial cycle time = 2011010106
    final cycle time = 2011010200
    [[special tasks]]
        sequential = foo    # just to slow the suite down a bit
    [[dependencies]]
        [[[0,6,12,18]]]
            graph = "foo => ObsProc => bar"

[runtime]
    [[root]]
        [[[environment]]]
            JOBS = $HOME/ObsProcessingJobs
            # a task-specific value that doesn't contain the task name:
            JOB_DIR_surface   = $JOBS/xxx

    [[ObsProc]]
    [[surface, sonde, aircraft]] # Define all tasks in the ObsProc family at once.
        inherit = ObsProc
        description = "Task $(TASK) of the ObsProc family"
        command scripting = """
cylc task message "Hello 1 from $(TASK) aka $CYLC_TASK_NAME"
sleep 5
if [[ $CYLC_TASK_NAME = sonde ]]; then # how to distinguish tasks at run time.
    cylc task message "My JOB DIRECTORY is $JOB_DIR"
else
    cylc task message "My job directory is $JOB_DIR"
fi
sleep 5
                  """
        [[[environment]]]
            JOB_DIR = ${JOB_DIR_$(TASK):-$JOBS/$(TASK)}

[visualization]
    collapsed families = ObsProc

# NOTE: $(TASK) is replaced by the actual task name in all config items,
# inside cylc, at task definition time. Running tasks, on the other
# hand, are provided with the $CYLC_TASK_NAME (and $CYLC_TASK_ID and
# $CYLC_TASK_CYCLE_TIME) environment variables. So you can use $(TASK)
# or $CYLC_TASK_NAME in the command or environment config items, but
# $(TASK) is required in 'JOB_DIR = ...' above because we are generating
# an environment variable name on the right side at task definition
# time. Generate a task job script to see the effect of all this.
