title = "explicit task generator example suite"

description = """A list of similar tasks defined all at once, in which
the task names are listed explicitly. See also the 'expression' task
generator example in which the task names are generated automatically by
a Python expression (a "list comprehension")."""

[task families]
    ObsProc = surface, sonde, aircraft

[dependencies]
    [[0,6,12,18]]
        graph = "foo => ObsProc => bar"

[environment]
    JOBS = $HOME/ObsProcessingJobs
    # how to use task-specific values that don't contain the task name:
    JOB_DIR_surface   = $JOBS/j1
    JOB_DIR_sonde     = $JOBS/j2
    JOB_DIR_aircraft  = $JOBS/j3

[tasks]
    [[ObsProc]]  # Define all tasks in the ObsProc family at once.
        description = "Task $(TASK) of the ObsProc family"
        command = """
cylc task message "Hello 1 from $(TASK) aka $TASK_NAME"
sleep 5
if [[ $TASK_NAME = sonde ]]; then # how to distinguish tasks at run time.
    cylc task message "My JOB DIRECTORY is $JOB_DIR"
else
    cylc task message "My job directory is $JOB_DIR"
fi
sleep 5"""
        [[[environment]]]
            JOB_DIR = $JOB_DIR_$(TASK)

[visualization]
    show family members = True

# NOTE: $(TASK) is replaced by the actual task name in all config items
# at the time of task definition, whereas all tasks are provided with
# $TASK_NAME (and $TASK_ID and $CYCLE_TIME) at run time. So you can use
# $(TASK) or $TASK_NAME in the command or environment items (but $(TASK)
# is required in 'JOB_DIR = ...' above because we are generating an
# environment variable name on the right side, at task definition time).
# Inspect a task job script to see all this: cylc submit --dry-run.

# NOTE: for similar tasks that are not members of a family:
# [tasks]
#   [[ surface, sonde, aircraft ]]
