title = task generator demo suite
description = "Two task ensembles defined by generic config sections"

[task families]
    # ensemble 1 - explicit task name list:
    ens_1 = one, two, three
    # ensemble 2 - python list comprehension (m1,m2,...,m5):
    ens_2 = 'list( "m" + str(i) for i in range(1,6))'

[dependencies]
    [[0,6,12,18]]
        graph = "foo => ens_1 => bar => ens_2 => baz"

[environment]
    # With reference to $JOB_DIR in the ens_2 environment below, here's
    # how to use task-specific values that don't contain the task name.
    JOB_DIR_m1 = $HOME/jobs/j1
    JOB_DIR_m2 = $HOME/jobs/j2
    JOB_DIR_m3 = $HOME/jobs/j3
    JOB_DIR_m4 = $HOME/jobs/j4
    JOB_DIR_m5 = $HOME/jobs/j5

[tasks]
    [[ ens_1 ]]
        description = "Task $(TASK) of the ens_1 family"
        command = """
sleep 5
cylc task message "$(TASK) running directory: $RUNNING_DIR"
sleep 5"""
        [[[environment]]]
            RUNNING_DIR = $HOME/running/$(TASK)

    [[ ens_2 ]]
        description = "Task $(TASK) of the ens_1 family"
        command = """
sleep 5
# we can further specify behaviour in the command scripting:
if [[ $TASK_NAME = m3 ]]; then
    cylc task message "$(TASK) job directory: $JOB_DIR"
else
    cylc task message "$(TASK) JOB DIRECTORY: $JOB_DIR"
fi
sleep 5"""
        [[[environment]]]
            JOB_DIR = $JOB_DIR_$(TASK)

[visualization]
    show family members = True
