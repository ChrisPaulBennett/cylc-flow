
################################################################
# TO BE DOCUMENTED:
# 1/ To dummy out a task, comment out its command list.
# 2/ Although cylc internals can easily handle different task 
# commands, environment, outputs etc., at different times, 
# I think this would rarely be needed (however: EXAMPLE 
# different n_restart_outputs for a model that does a short
# forecast at 0,12 and long forecast at 6,18). To change this, 
# use more 'if HOUR in ...' conditionals in taskdef.py, as for 
# prerequisites via the dependency graph cycle-time lists, and some
# interface to this in config.py (which however should be designed 
# not to further complicate suite.rc files for general use).
################################################################

title = main cylc userguide example suite

description = """This suite implements the main cylc userguide example
using scripts A.sh, B.sh, C.sh, D.sh, E.sh, F.sh, (and G.sh), and X.sh,
which are not cylc-aware, all use their own configurable input and
output directories, and depend on other's output files as in the
graph."""

[ families ]
FOO = foo, bar

[dependency graph] #----------------------------------------------------
#        > B -> E
#       /   \
# X -> A     -> D
#       \   /
#        > C -> F -(6,18)-> G

    [[ 0,6,12,18 ]]
    label1  =  X -> A -> B ->  E
    label2  =  A -> C -> F -> FOO -> postfoo
    label3  =  B -> D
    label4  =  C -> D
    ## TO DO, conditional triggers:
    ## label99 = (B or C) -> D

    label5i   = ColdABC -> A
    label5ii  = ColdABC -> B
    label5iii = ColdABC -> C

    [[ 6,18 ]]
    label6 = F(1)-> G

[environment] #--------------------------------------------------
WORKSPACE = /tmp/$USER
QUOTED_SHELL_PARAMETER_EXPANSION='${WORKSPACE##_.*}'

[ tasks ]
    [[ColdABC]] #------------------------------------------------
    type list = coldstart,
    command list = cylc-wrapper ColdABC.sh,
        [[[environment]]]
        A_OUTPUT_DIR = $WORKSPACE
        B_OUTPUT_DIR = $WORKSPACE
        C_OUTPUT_DIR = $WORKSPACE

    [[X]] #------------------------------------------------------
    type list = clock(offset = 1 hour), sequential,
    command list = cylc-wrapper X.sh,
        [[[ environment ]]]
        X_OUTPUT_DIR = $WORKSPACE
 
    [[A]] #------------------------------------------------------
    type list = model(restarts = 3),
    command list = cylc-wrapper A.sh,
        [[[environment]]]
        A_INPUT_DIR = $WORKSPACE
        A_OUTPUT_DIR = $WORKSPACE

    [[B]] #------------------------------------------------------
    type list = model(restarts = 3),
    command list = cylc-wrapper B.sh,
        [[[environment]]]
        B_INPUT_DIR = $WORKSPACE
        B_OUTPUT_DIR = $WORKSPACE

    [[C]] #------------------------------------------------------
    type list = model(restarts = 3),
    command list = cylc-wrapper C.sh,
        [[[environment]]]
        C_INPUT_DIR = $WORKSPACE
        C_OUTPUT_DIR = $WORKSPACE

    [[D]] #------------------------------------------------------
    command list = cylc-wrapper D.sh,
        [[[environment]]]
        D_INPUT_DIR = $WORKSPACE
        D_OUTPUT_DIR = $WORKSPACE
 
    [[E]] #------------------------------------------------------
    command list = cylc-wrapper E.sh,
        [[[environment]]]
        E_INPUT_DIR = $WORKSPACE
        E_OUTPUT_DIR = $WORKSPACE
 
    [[F]] #------------------------------------------------------
    # not wrapped; emits a specific output.
    command list = F.sh,
        [[[outputs]]]
        1 = "foo products ready for $(CYCLE_TIME)"
        [[[environment]]]
        F_INPUT_DIR = $WORKSPACE
        F_OUTPUT_DIR = $WORKSPACE

    [[G]] #------------------------------------------------------
    command list = cylc-wrapper G.sh,
        [[[environment]]]
        G_INPUT_DIR = $WORKSPACE
        G_OUTPUT_DIR = $WORKSPACE

    [[foo]]
    [[bar]]
    [[postfoo]]
    [[FOO]]
