
    # TO DO: LOOK UP OLAF'S EMAIL, WHICH SOLVES THIS PROBLEM.
    # VAR_ConfigureLS also depends on UM_nzlam_recon, which runs at 00
    # UTC. Both these tasks trigger off the UM f/c, are essentially the
    # same program (UM reconfiguration), and can (apparently) interfere
    # in their use of temp directories. See EcoConnect JIRA ticket 195.
    #if HOUR in 0:
    #   "NZtoNZ_recon%$(CYCLE_TIME) finished"

title = NZLAM Master Suite
description = """NZLAM Master Suite"""

job submission method = ll_basic
job submission log directory = running/logs/nzlam
use secure passphrase = False
use lockserver = False

[ dummy mode ]
task run time in seconds = 10

[task insertion groups]
 nzlam_coldstart = get_globaldump, GLtoGL_recon, GLtoNZ_recon, forecast_cold 

[task families]
    OPS = OPS_AircraftSonde, OPS_AIRS, OPS_ATOVS, OPS_GPSRO, OPS_IASI, OPS_SurfaceScatt, OPS_Satwind

[dependency graph]
    [[0,6,12,18]]
    a = get_frames ===> make_alabc ===> forecast ===> get_outputs & housekeeping
    b = get_obstore & get_bgerr ===> OPS
    c = forecast(T-6) ===> VAR_ConfigureLS & OPS
    d = OPS & VAR_ConfigureLS ===> VAR_AnalysePF ===> VAR_monitoring & forecast
    # COLDSTART:
    e = prepare_suite| =c=> get_globaldump| get_obstore & get_bgerr & get_frames
    f = get_globaldump| ===> GLtoGL_recon| ===> GLtoNZ_recon| ===> forecast_cold| =m=> forecast
    g = forecast_cold| =c=> OPS & VAR_ConfigureLS

    [[0]]
    e = forecast(T-6) ===> NZtoNZ_recon ===> forecast
    # COLDSTART:
    i = forecast_cold| =c=> NZtoNZ_recon
   
[environment]
#include environment.rc

[tasks]
[[OPS]] #---------------------------------------------------------------
[[OPS_AIRS]] #----------------------------------------------------------
    description = Extract and Process AIRS obs
    command list = OPS-wrapper.sh,
    [[[environment]]]
        OPSUI_JOB_DIR = $OPS_AIRS_JOBDIR
    [[[directives]]]
        # OPSUI <JOB>_init requires $LOGNAME within loadleveler
        environment = COPY_ALL


[[OPS_ATOVS]] #---------------------------------------------------------
    description = Extract and Process ATOVS obs
    command list = OPS-wrapper.sh,
    [[[environment]]]
        OPSUI_JOB_DIR = $OPS_ATOVS_JOBDIR
    [[[directives]]]
        # OPSUI <JOB>_init requires $LOGNAME within loadleveler
        environment = COPY_ALL

[[OPS_AircraftSonde]] #-------------------------------------------------
    description = Extract and Process Aircraft and Sonde obs
    command list = OPS-wrapper.sh,
    [[[environment]]]
        OPSUI_JOB_DIR = $OPS_AIRCRAFTSONDE_JOBDIR
    [[[directives]]]
        # OPSUI <JOB>_init requires $LOGNAME within loadleveler
        environment = COPY_ALL

[[OPS_GPSRO]] #---------------------------------------------------------
    description = Extract and Process GPSRO obs
    command list = OPS-wrapper.sh,
    [[[environment]]]
        OPSUI_JOB_DIR = $OPS_GPSRO_JOBDIR
    [[[directives]]]
        # OPSUI <JOB>_init requires $LOGNAME within loadleveler
        environment = COPY_ALL

[[OPS_IASI]] #----------------------------------------------------------
    description = Extract and Process IASI obs
    command list = OPS-wrapper.sh,
    [[[environment]]]
        OPSUI_JOB_DIR = $OPS_IASI_JOBDIR
    [[[directives]]]
        # OPSUI <JOB>_init requires $LOGNAME within loadleveler
        environment = COPY_ALL

[[OPS_Satwind]] #-------------------------------------------------------
    description = Extract and Process Satwind obs
    command list = OPS-wrapper.sh,
    [[[environment]]]
        OPSUI_JOB_DIR = $OPS_SATWIND_JOBDIR
    [[[directives]]]
        # OPSUI <JOB>_init requires $LOGNAME within loadleveler
        environment = COPY_ALL

[[OPS_SurfaceScatt]] #--------------------------------------------------
    description = Extract and Process Surface and Scatterometer obs
    command list = OPS-wrapper.sh,
        [[[environment]]]
        OPSUI_JOB_DIR = $OPS_SURFACESCATT_JOBDIR
    [[[directives]]]
        # OPSUI <JOB>_init requires $LOGNAME within loadleveler
        environment = COPY_ALL

[[get_outputs]] #-------------------------------------------------------
    description = Move and rename UM STASH output files.
    command list = cylc-wrapper get-outputs.sh $WARMSTART_RUNID pp0 pp1 pc pi,

[[housekeeping]] #------------------------------------------------------
    description = Roll the suite staging archive: T-120 hours
    scripting = """
cylcutil check-vars -d RUNNING_DIR
cylcutil rolling-archive $RUNNING_DIR 120
    """

[[get_bgerr]] #----------------------------------------------------------
    description = Retrieve bgerr file for current cycle.
    command list = cylc-wrapper get-inputs.sh --bgerr,
    type modifier list = clock( offset = 3 hour ),

[[get_frames]] #--------------------------------------------------------
    description = Retrieve frames files for the current cycle.
    command list = cylc-wrapper get-inputs.sh --frames,
    type modifier list = clock( offset = -2.25 hour ),
    # we have to use frames generated by previous global run
    # they are ready approx 2.25 hours before current cycle time.

[[get_globaldump]] #----------------------------------------------------
    description = Retrieve global start dump for current cycle coldstart.
    type modifier list = clock( offset = 3 hour ),
    command list = cylc-wrapper get-inputs.sh --globaldump,

[[get_obstore]] #-------------------------------------------------------
    description = Retrieve obstore files for current cycle.
    type modifier list = clock( offset = 3 hour ),
    command list = cylc-wrapper get-inputs.sh --obstore,

[[make_alabc]] #--------------------------------------------------------
    description = Convert NZLAM frames to an ALABC (boundary condition) file
    command list = cylc-wrapper make_alabc.sh --keep,
    scripting = . ~um_fcm/user-config/um.profile
    [[[directives]]]
        # serial job on fitzroy
        job_type     =  serial
        class        = serial
        cluster_list = AIX-LL-Cluster1

[[forecast]] #----------------------------------------------------------
    description = warm cycle forecast
    type modifier list = model(restarts = 1),
    command list = UM-wrapper.sh,
    scripting = """
export UM_PPVARFILE=$( cylcutil template TEMPLATE_PPVAR_FILE )
export UM_PP7CXFILE=$( cylcutil template TEMPLATE_PP7CX_FILE )
export UM_DATAMDIR=$(  cylcutil template TEMPLATE_DATAM_DIR  )
export UM_DATAWDIR=$(  cylcutil template TEMPLATE_DATAW_DIR  )
export UM_ALABCFILE=$( cylcutil template TEMPLATE_ALABC_FILE )
export UM_VARINCFILE=$( cylcutil template TEMPLATE_VAR_INCR_FILE )
if [[ $( cylcutil cycle-time --hour ) == 00 ]]; then
    export UM_STARTDUMP=$( cylcutil template -s 6 $TEMPLATE_RECONFIGURED_RESTART_DUMP )
else
    export UM_STARTDUMP=$( cylcutil template -s 6 $TEMPLATE_RESTART_DUMP )
fi
export UM_LOGDIR=$( cylcutil template TEMPLATE_LOGFILE_DIR )
    """
    [[[environment]]]
        UMUI_JOBDIR = $WARMSTART_JOBDIR
  
    [[NZtoNZ_recon]]
    description = Reconfigure the NZLAM model restart dump
    command list = UMrecon-wrapper.sh,
    scripting = """
export UMRECON_INPUTDUMP=$(  cylcutil template -s 6 TEMPLATE_RESTART_DUMP ) 
export UMRECON_OUTPUTDUMP=$( cylcutil template -s 6 TEMPLATE_RECONFIGURED_RESTART_DUMP ) 
export UMRECON_LOGDIR=$(     cylcutil template      TEMPLATE_LOGFILE_DIR )
    """
    [[[environment]]]
        UMUI_JOBDIR = $NZtoNZ_RECON_JOBDIR

[[GLtoNZ_recon]] #------------------------------------------------------
    description = Reconfigure the cold start dump for the NZLAM
    command list = UMrecon-wrapper.sh,
    scripting = """
export UMRECON_INPUTDUMP=$(  cylcutil template -s 6 TEMPLATE_GLOBAL_DUMP ) 
export UMRECON_OUTPUTDUMP=$( cylcutil template -s 6 TEMPLATE_RESTART_DUMP ) 
export UMRECON_LOGDIR=$(     cylcutil template      TEMPLATE_LOGFILE_DIR )
    """
    [[[environment]]]
        UMUI_JOBDIR = $GLtoNZ_RECON_JOBDIR

[[forecast_cold]] #-----------------------------------------------------
    description = NZLAM initial forecast from global model start dump.
    command list = UM-wrapper.sh,
    scripting = """
export UM_STARTDUMP=$( cylcutil template -s 6 $TEMPLATE_RESTART_DUMP )
export UM_PPVARFILE=$( cylcutil template -s 6 TEMPLATE_PPVAR_FILE   )
export UM_PP7CXFILE=$( cylcutil template -s 6 TEMPLATE_PP7CX_FILE   )
export UM_DATAMDIR=$(  cylcutil template -s 6 TEMPLATE_DATAM_DIR    )
export UM_DATAWDIR=$(  cylcutil template -s 6 TEMPLATE_DATAW_DIR    )
export UM_ALABCFILE=$( cylcutil template      TEMPLATE_ALABC_FILE   )
export UM_LOGDIR=$(    cylcutil template      TEMPLATE_LOGFILE_DIR  )
    """
    [[[environment]]]
        UMUI_JOBDIR = $COLDSTART_JOBDIR

[[GLtoGL_recon]] #------------------------------------------------------
    description = Reconstitute a reduced UM global model dump
    command list = UMrecon-wrapper.sh,
    scripting = """
export UMRECON_INPUTDUMP=$(  cylcutil template -s 6 TEMPLATE_REDUCED_GLOBAL_DUMP ) 
export UMRECON_OUTPUTDUMP=$( cylcutil template -s 6 TEMPLATE_GLOBAL_DUMP ) 
export UMRECON_LOGDIR=$(     cylcutil template      TEMPLATE_LOGFILE_DIR )
    """
    [[[environment]]]
        UMUI_JOBDIR = $GLtoGL_RECON_JOBDIR

[[VAR_monitoring]] #-----------------------------------------------------

[[VAR_AnalysePF]] #-----------------------------------------------------
    description = VAR Analysis
    command list = VAR-wrapper.sh,
    [[[environment]]]
        VARUI_JOB_DIR = $VAR_ANALYSEPF_JOBDIR
    [[[directives]]]
        # VARUI <JOB>_init requires $LOGNAME within loadleveler
        environment = COPY_ALL

[[VAR_ConfigureLS]] #---------------------------------------------------
    description = VAR Reconfiguration
    command list = VAR-wrapper.sh,
    [[[environment]]]
        VARUI_JOB_DIR = $VAR_CONFIGURELS_JOBDIR
    [[[directives]]]
        # VARUI <JOB>_init requires $LOGNAME within loadleveler
        environment = COPY_ALL

[[prepare_suite]]
