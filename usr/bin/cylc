#!/usr/bin/env bash

# THIS FILE IS PART OF THE CYLC SUITE ENGINE.
# Copyright (C) NIWA & British Crown (Met Office) & Contributors.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#------------------------------------------------------------------------------
# Wrapper script to support multiple Cylc versions installed on the same host.
# Handles Conda and Python virtual envs, and plain Cylc 7 installations.
#
# WRAPPER INSTALLATION AND CONFIGURATION
#---------------------------------------
# Copy this script as "cylc" into the default $PATH on scheduler and job hosts,
# and modify CYLC_HOME_ROOT (see "EDIT ME" below) to point to the parent
# directory of all installed versions.
#
# HOW IT WORKS
#-------------
# Intercept "cylc" commands and re-invoke them with the appropriate cylc-flow
# version selected by, in order of priority:
#  1) $CYLC_HOME if defined, or
#  2) $CYLC_HOME_ROOT/$CYLC_VERSION, or
#  3) $CYLC_HOME_ROOT_ALT/$CYLC_VERSION
#
# CYLC_HOME_ROOT should default to the central release location, in this
# wrapper (see "EDIT ME" below). This must also be done on job hosts.
#
# CYLC_HOME_ROOT_ALT can be set by users, e.g. to their own release location.
#
# CYLC_HOME can be set by users to a specific version outside of the HOME_ROOT
# locations, e.g. for a venv in a git working copy. CYLC_HOME must be set in
# .bashrc so that task jobs see the same version as the parent scheduler.
#
# In Cylc 8+ the scheduler sets CYLC_VERSION=cylc.flow.__version__ in task
# job environments so jobs get the same version as their parent scheduler.
# The__version__ string increments with releases so CYLC_VERSION cannot be
# used for fine-grained selection among (e.g.) git working copies between
# releases. Use CYLC_HOME to select a venv in your cylc-flow git clone.
#
# INSTALLING cylc 8+ RELEASES WITH CONDA
#---------------------------------------
# Create environments named cylc-$CYLC_VERSION under a root location such as /opt:
#   $ conda create -p /opt/cylc-8.2.0 cylc=8.2.0
#
# And create a default version symlink "cylc" to the latest version:
#   $ ln -s cylc-8.2.0 cylc
#
# Note you can `pip install` from a cylc-flow git clone into a Conda
# environment and then select it by CYLC_VERSION but that may be misleading
# if the code is not the true release version. Better to use Python venvs and
# CYLC_HOME for development and testing.
#
# INSTALLING cylc-flow 8+ WORKING COPIES WITH PIP FOR DEVELOPMENT AND TESTING
#----------------------------------------------------------------------------
# Create Python virtual environments in-place in your cylc-flow git
# clones and select them using CYLC_HOME in your .bashrc.
#
# Create a new venv and install cylc-flow:
#   $ cd <my-cylc-flow-clone>
#   $ python -m venv venv
#   $ . venv/bin/activate
#   $ pip install -e . 
#
# Set CYLC_HOME in .bashrc to select this venv (see explanation above):
#
# Note you can also `pip install` cylc-flow releases under a common root
# location for CYLC_VERSION based selection, like for Conda:
#   $ CYLC_HOME_ROOT=$HOME/cylc-flow/releases  # (set in this wrapper too)
#   $ python -m venv $CYLC_HOME_ROOT/cylc-8.0a2
#   $ . $CYLC_HOME_ROOT/cylc-8.0a2/bin/activate
#   $ python -m pip install cylc-flow==8.0a2
# But there is no need to do this if you also have full system releases (as
# opposed to cylc-flow only) installed by Conda.
#
# INSTALLING LEGACY cylc 7 RELEASE TARBALLS BY HAND
#--------------------------------------------------
# cylc-flow release tarballs now unpack to (e.g.) cylc-flow-7.9.1. To work with
# this wrapper the directory should be renamed to "cylc-7.9.1". Then follow
# version-specific installation instructions. Running "make" should create a
# file called VERSION that contains just the version string (e.g.) "7.9.1".
#
# INSTRUCTIONS FOR USERS
#-----------------------
# + Set CYLC_HOME_ROOT_ALT in your .bashrc to point to your local conda
#   environments location if you have releases not available centrally, e.g.:
#     $ export CYLC_HOME_ROOT_ALT=$HOME/miniconda3/envs
#   Environments must be named for the cylc version, e.g. "cylc-8.0.2"
# + Set CYLC_VERSION e.g. "8.0.0" to select a version in the root locations
#   - CYLC_VERSION is propagated to task job environments by the scheduler.
#     If you set it in .bashrc, be sure to default to an existing value to
#     to avoid overiding jobs and to allow only-the fly selection
#       $ export CYLC_VERSION=${CYLC_VERSION:-8.0.0}
#   - do not explicitly select the default "cylc" symlink as a version
# + Set CYLC_HOME in .bashrc (on scheduler and job hosts) to select a specific
#     version outside of the ROOT location
#   - CYLC_HOME should point to a Cylc 8 venv, or a Cylc 7 directory. It must
#     be set in .bashrc so that task jobs see it too
# + Any of these settings in .bashrc must be replicated on job hosts.
#
##############################!!! EDIT ME !!!##################################
# Centrally installed Cylc releases:
CYLC_HOME_ROOT="${CYLC_HOME_ROOT:-/opt}"
# Note users can set CYLC_HOME_ROOT_ALT as well (see above), e.g.:
# CYLC_HOME_ROOT_ALT=${HOME}/miniconda3/envs
###############################################################################

# If CYLC_HOME is not defined try CYLC_HOME_ROOT/cylc-CYLC_VERSION
if [[ -z "${CYLC_HOME}" && -n ${CYLC_VERSION} ]]; then
    # Look for matching version in root locations
    for ROOT in "${CYLC_HOME_ROOT}" "${CYLC_HOME_ROOT_ALT}"; do
        if [[ -d "${ROOT}/cylc-${CYLC_VERSION}" ]]; then
            CYLC_HOME="${ROOT}/cylc-${CYLC_VERSION}"
            break
        fi
    done
fi
if [[ -z "${CYLC_HOME}" ]]; then
    echo 1>&2 "ERROR: CYLC_HOME not defined or found in CYLC_HOME_ROOT[_ALT]"
    exit 1
fi

# Find and activate the virtual env, or find the Cylc 7 bin directory.
BASENAME_PREFIX=""
if [[ -f "${CYLC_HOME}/bin/activate" ]]; then
    # A Python venv or Conda pack installation
    . "${CYLC_HOME}/bin/activate" || exit 1
elif [[ -d "${CYLC_HOME}"/conda-meta && \
        -f "${CYLC_HOME%/*/*}"/etc/profile.d/conda.sh ]]; then
    # A normal Conda environment
    . "${CYLC_HOME%/*/*}"/etc/profile.d/conda.sh
    # Unset CONDA_SHLVL in case CONDA_* was inherited from the scheduler
    # environment (this has no effect in a clean job submission shell). Doing
    # this avoids an apparent bug where conda.py:reactivate() does not put the
    # target environment in front of PATH. If bashrc has since prepended the
    # wrapper location to PATH in the job environment this results in the
    # wrapper invoking itself again (repeatedly... fork bomb).
    unset CONDA_SHLVL
    conda activate "${CYLC_HOME##*/}" || exit 1
elif [[ -x "${CYLC_HOME}/bin/cylc" ]]; then
    # A Cylc 7 installation
    BASENAME_PREFIX="${CYLC_HOME}"/bin/
else
    echo 1>&2 "ERROR: cylc not found in ${CYLC_HOME}"
    exit 1
fi

# Execute the command via the selected Cylc installation.
exec "${BASENAME_PREFIX}${0##*/}" "$@"
