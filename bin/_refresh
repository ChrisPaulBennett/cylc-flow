#!/usr/bin/env python

import os, re, sys
from optparse import OptionParser
from registration import regsplit, localdb, centraldb, RegistrationError
from config import get_suite_title, SuiteConfigError

parser = OptionParser( usage = """cylc [db] refresh|check [options]

Check the private or central database for invalid registrations (this 
probably means a suite definition directory has been deleted or moved
manually) and update any suite titles that have changed since their 
initial registration (for the central database this also updates the
titles of suites owned by others).""" )

parser.add_option( "-c","--centraldb",
        help="Print suite registrations from the central database.",
        action="store_true", default=False, dest="central" )

parser.add_option( "-v", "--verbose",
        help="Turn on verbose output.",
        action="store_true", default=False, dest="verbose" )

( options, args ) = parser.parse_args()

if options.central:
    reg = centraldb()
else:
    reg = localdb()
reg.load_from_file()

invalid = {}
new_title = {}

print 'Checking suite registrations...'
for suite, dir, old_tit in reg.get_list():
    print '  +', suite
    if not os.path.isdir( dir ):
        invalid[suite] = "Suite definition directory not found"
        continue
    suiterc = os.path.join( dir, 'suite.rc' )
    if not os.path.isfile( suiterc ):
        invalid[suite] = "Suite config file not found"
        continue
    try:
        new_tit = get_suite_title( suite )
    except SuiteConfigError,x:
        invalid[suite] = "Could not read suite title"
    else:
        if new_tit != old_tit:
            # suite title changed
            new_title[suite] = new_tit

n_invalid = len(invalid.keys())
n_title_changed = len(new_title.keys())

if n_invalid == 0:
    print "No invalid registrations detected."
else:
    print >> sys.stderr, "WARNING:", n_invalid, "registrations are invalid:"
    for suite in invalid:
        print >> sys.stderr, '  ', suite, '-', invalid[suite]

if n_title_changed == 0:
    print "No suite titles have changed."
else:
    print n_title_changed, "suite titles have changed."
    try:
        reg.lock()
    except RegistrationError, x:
        raise SystemExit(x)

    changed = False
    for suite in new_title:
        tit = new_title[suite]
        try:
            reg.reregister( suite, suite, title=tit, verbose=options.verbose )
        except RegistrationError, x:
            print >> sys.stderr, x
        else:
            changed = True

    if changed:
        reg.dump_to_file()

    reg.unlock()

