#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2011 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from cylc import cylc_pyro_client
from cylc.CylcOptionParsers import PromptOptionParser
from cylc.port_scan import SuiteIdentificationError
from cylc.registration import dbgetter, RegistrationError

parser = PromptOptionParser( """cylc [control] unblock [options] SUITE 

A blocked suite refuses to comply with intervention commands until
deliberately unblocked. This is a crude security measure to guard
against accidental intervention in your own suites. It may be a 
useful aid when running multiple suites at once.""")

(options, args) = parser.parse_args()

reg = parser.get_suite_name()
dbg = dbgetter()
try:
    suite, junk = dbg.get_suite(reg)
except RegistrationError, x:
    raise SystemExit(x)

try:
    proxy = cylc_pyro_client.client( suite ).get_proxy( 'remote' )
except SuiteIdentificationError, x:
    raise SystemExit(x)

if not parser.prompt( 'Unblock' ):
    sys.exit(0)

result = proxy.unblock()

if result.success:
    print result.reason
else:
    print 'ERROR:', result.reason
    sys.exit(1)
