#!/bin/bash

# Cylc task wrapper script.

# Allows cylc to control existing tasks that have not been modified to
# do their own cylc messaging. It can only be used for tasks that:
# (a) see their processing through till the end (as opposed to
#    submitting or spawning subprocesses and then exiting), and 
# (b) return non-zero exit status for failure. 

# The task wrapper does the following:
# (1) sends special 'started' message
# (2) executes the wrapped task, with any commandline arguments
# (3) if success: reports all outputs completed, and reports succeeded
#     if failure: reports failure.

# Wrapped tasks can also send their own cylc messages, which will be
# logged by cylc, but must not send their own start/succeeded/failed or
# registered output messages.

usage() {
    echo ""
    echo "USAGE: 1/ cylc [task] wrap COMMAND ARGS"
    echo '       2/ cylc [task] wrap -m,--multi "COM1 ARGS1; COM2 ARGS; ..."'
}

usage2() {
    echo 
    echo "The cylc task wrapper allows you to use existing non-cylc-aware"
    echo "scripts or programs as cylc tasks without any modification (see"
    echo "below for applicability). The majority, if not all, of the tasks"
    echo "in a typical cylc suite will be wrapped."
    echo 
    echo "The wrapper reports the task started to the parent cylc instance,"
    echo "then executes the wrapped script or program, and finally reports"
    echo "success (and completion of all outputs) or failure, according to"
    echo "the job exit status."
    echo
    echo "APPLICABILITY: Any task that:"
    echo " (a) consists of, or is followed through to completion by, a"
    echo "single process, and:"
    echo " (b) returns standard exit codes on success (0) or failure (not 0)."
    echo "can be wrapped."
    echo 
    echo "A task whose initial process detaches and returns immediately"
    echo "after spawning other processes to complete the job cannot be"
    echo "wrapped - such tasks must be modified to add a few cylc"
    echo "messaging calls (see the cylc userguide for details)."
    echo
    echo "Note that addition of messaging calls is also required if you"
    echo "want something to trigger off an internal output before the"
    echo "task is finished." 
}

if [[ $1 == '--help' ]]; then
    usage
    usage2
    exit 0
fi

# SEND THE STARTUP MESSAGE
cylc task started || exit 1

if (( $# == 0 )); then
    usage
    cylc task failed "cylc task wrap: no task to wrap"
    exit 1
fi

multiple=false
if [[ $1 == '-m' || $1 == '--multi' ]]; then
    multiple=true
    shift
fi 

# EXECUTE THE WRAPPED TASK AND CHECK FOR SUCCESS OR FAILURE

success=false
if $multiple; then
    if eval $@; then
        success=true
    fi
else
    if $@; then 
        success=true
    fi
fi

if $success; then
    # SUCCEEDED
    cylc task message --all-outputs-completed
    cylc task succeeded
else
    # FAILED
    cylc task failed 
fi
