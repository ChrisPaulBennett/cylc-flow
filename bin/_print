#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2011 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import re
from optparse import OptionParser
from cylc.registration import dbgetter, RegistrationError, delimiter

a_hbar = '-'
a_vbar = '|'
a_tee = a_vbar + a_hbar
a_trm = '`' + a_hbar
a_exptee = '\|' + a_hbar

u_hbar = u'\u2500'
u_vbar = u'\u2502'
u_tee = u'\u251C' + u_hbar
u_trm = u'\u2514' + u_hbar

def get_padding( reglist ):
    maxlen = 0
    for reg in reglist:
        items = reg[0].split( delimiter )
        for i in range(0,len(items)):
            tmp = 2*i + 1 + len(items[i])
            if i == 0:
                tmp -= 1
            if tmp > maxlen:
                maxlen = tmp
    return (maxlen+1) * ' '

def print_tree( tree, padding, unicode=False, prefix=''):
    if unicode:
        vbar = u_vbar
        trm = u_trm
        tee = u_tee
        exptee= tee
    else:
        vbar = a_vbar
        trm = a_trm
        tee = a_tee
        exptee = a_exptee

    keys = tree.keys()
    keys.sort()
    for item in keys:
        if item == keys[-1]:
            pprefix = prefix + ' ' + trm
        else:
            pprefix = prefix + ' ' + tee

        pp = pprefix
        pp = re.sub( '^ (' + trm + '|' + tee + ')', '', pp )
        pp = re.sub( trm + ' ', '  ', pp )
        pp = re.sub( exptee + ' ', vbar + ' ', pp )

        result = pp + item 
        line = result + padding[ len(result): ]
        if isinstance( tree[item], dict ):
            print line
            print_tree( tree[item], padding, unicode, pprefix )
        else:
            print line + tree[item]

parser = OptionParser( usage = """cylc [db] print [--central] [FILTER]

Print private or central suite registrations.

FILTERING: 
  (a) The filter patterns are Regular Expressions, not shell globs, so
the general wildcard is '.*' (match zero or more of anything), NOT '*'.
  (b) For our purposes there is an implicit wildcard at the end of each
pattern ('foo' is the same as 'foo.*'); use the string end marker to
stop this ('foo$' matches only literal 'foo').""" )

parser.add_option( "-c","--central",
        help="Target the the central database.",
        action="store_true", default=False, dest="central" )

parser.add_option( "-t","--tree",
        help="Print registrations in nested tree form.",
        action="store_true", default=False, dest="tree" )

parser.add_option( "-p","--pretty",
        help="Use unicode box drawing characters in tree views.",
        action="store_true", default=False, dest="unicode" )

( options, args ) = parser.parse_args()

if len(args) == 0:
    regfilter = None
elif len(args) == 1:
    regfilter = args[0]
else:
    parser.error( "Wrong number of arguments.")

db = dbgetter(options.central).db
try:
    db.load_from_file()
    allsuites = db.get_list(regfilter)
    if not options.tree:
        for suite, dir, title in allsuites:
            print suite, '|', title, '|', dir
    else:
        tree = {}
        for suite, dir, title in allsuites:
            regpath = suite.split( delimiter ) 
            sub = tree
            for key in regpath[:-1]:
                if key not in sub:
                    sub[key] = {}
                sub = sub[key]
            sub[regpath[-1]] = title + ' | ' + dir
        pad = get_padding( allsuites )
        print_tree(tree, pad, options.unicode )

except RegistrationError,x:
    raise SystemExit(x)
