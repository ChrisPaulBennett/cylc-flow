#!/usr/bin/env python

import os, re, sys
from optparse import OptionParser
from registration import localdb, centraldb, RegistrationError
from config import config, SuiteConfigError

parser = OptionParser( usage = """cylc [register] print [options]
     $ cylc reg pr                      # print all
     $ cylc reg pr [FILTER options]     # print some

Print local or central suite registrations, which associate a suite name
with a suite definition directory (stored in $HOME/.cylc/registrations).
Cylc commands target a particular suite using its registered name.

FILTERING: 
  (a) The filter patterns are Regular Expressions, not shell globs, so
the general wildcard is '.*' (match zero or more of anything), NOT '*'.
  (b) For our purposes there is an implicit wildcard at the end of each
pattern ('foo' is the same as 'foo.*'); use the string end marker to
stop this ('foo$' matches only literal 'foo').
  (c) Omission of an item filter is taken to mean "match any of item".
  (d) to single out entries in the default group you have to specify
  the group name explicitly (-g default).""" )

parser.add_option( "-o", "--owner",
        help="Owner filter Regular Expression.",
        metavar="RE", action="store", default=None, dest="ownerfilt" )

parser.add_option( "-g", "--group",
        help="Group filter Regular Expression.",
        metavar="RE", action="store", default=None, dest="groupfilt" )

parser.add_option( "-n", "--name",
        help="Name filter Regular Expression.",
        metavar="RE", action="store", default=None, dest="namefilt" )

parser.add_option( "-c","--centraldb",
        help="Print suite registrations from the central database.",
        action="store_true", default=False, dest="central" )

parser.add_option( "-v", "--verbose",
        help="Turn on verbose output.",
        action="store_true", default=False, dest="verbose" )

( options, args ) = parser.parse_args()

# check for valid regular expressions:
for filt in options.groupfilt, options.namefilt:
    if filt:
        try:
            re.compile( filt )
        except:
            raise SystemExit( 'Bad expression: ' + filt )

if options.central:
    reg = centraldb()
else:
    reg = localdb()
reg.load_from_file()
reg.print_multi( ownerfilt=options.ownerfilt,
        groupfilt=options.groupfilt, namefilt=options.namefilt,
        verbose=options.verbose )
