#!/bin/bash

set -e; trap "echo 'TEST FAILED (see output log)'" ERR

#          ________________________  
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|


dummy_mode=false
if [[ $# != 0 ]]; then
    if [[ $1 == '-d' || $1 == '--dummy' ]]; then
        dummy_mode=true

    elif [[ $1 == '-h' || $1 == '--help' ]]; then
        echo "Usage: cylc test [options]"
        echo 
        echo "Run an automated test of core cylc functionality using a new copy of"
        echo "the userguide example suite. This should be used to check that new"
        echo "developments in the cylc codebase have not introduced serious bugs."
        echo "The test runs a suite registered as 'test'; to watch its progress"
        echo "use 'cylc view'. Aside from timing differences results should be the"
        echo "same in real or dummy mode."
        echo
        echo "Currently the test does the following:"
        echo "  - Copies the userguide example suite definition directory;"
        echo "  - Registers the new suite as 'test';"
        echo "  - Starts the suite at T0=06Z, with task X set to fail at 12Z;"
        echo "  - Unlocks the running suite;"
        echo "  - Sets a stop time at 12Z (i.e. T0+30 hours);"
        echo "  - Waits for the suite to stall as result of X failing;"
        echo "  - Inserts a new coldstart task at 06Z (T0+24 hours);"
        echo "  - Purges the failed X and dependants through to 00Z (T0+18 hours)"
        echo "    inclusive, which allows the suite to get going again at 06Z;"
        echo "  - Waits for the suite to shut itself down at the 12Z stop time."
        echo "  - Run a single task (startup) from the suite with submit." 
        echo
        echo "Options:"
        echo "  -h, --help   Print this help message and exit."
        echo "  -d, --dummy  Run the test in dummy mode."
        exit 0
    else
        echo "ERROR, no arguments required."
        exit 1
    fi
fi

if [[ ! -x bin/cylc ]]; then
    echo  "ERROR: run this test from the top level of a cylc installation."
    exit 1
fi

# TEST SUITE DIRECTORY
SUITE_DIR=suites/TEST
# log file for stdout and stderr
OUT=test.out; OUT_SCHED=test-sched.out
# cylc suite log
LOGRC=$( cylc preferences -p | grep 'logging directory' )
LOGDIR=${LOGRC#*= }
LOG=$LOGDIR/test/main

# START FROM A CLEAN SLATE
echo ">> CLEANING OUT any remnants of previous tests ... "
  # remove any existing test suite
[[ -d $SUITE_DIR ]] && rm -rf $SUITE_DIR
  # unregister any existing registration for test
  # 'register -d' fails if no Pyro nameserver!
cylc register -g test && cylc register -d test >> $OUT 2>&1
  # remove output files
rm -f $OUT $OUT_SCHED
echo done

# COPY THE USERGUIDE EXAMPLE SUITE
echo
echo -n ">> COPYING userguide example suite to $SUITE_DIR ... "
cp -r suites/userguide $SUITE_DIR > $OUT 2>&1 
echo done

# REGISTER THE TEST SUITE
echo
echo -n ">> REGISTERING the test suite as 'test' ... "
cylc register $SUITE_DIR test >> $OUT 2>&1
echo done

# START UP THE TEST SUITE
echo
if ! $dummy_mode; then
    echo ">> STARTING at 2010010106, with FAIL_TASK=X%2010010112"
    perl -pi -e 's/(\[global environment\])/\1\nFAIL_TASK=X%%2010010112/' $SUITE_DIR/suite.rc
else
    # use 36 hour clock offset, otherwise the suite will catch up to
    # the clock before it finishes (=> longer time to wait for finish).
    echo ">> STARTING at 2010010106, with --clock-offset=36 --fail=X%2010010112"
fi

# startup errors (e.g. due to lockserver denying access to the suite)
# won't be trapped here because we run cylc in the background!
if $dummy_mode; then
    cylc start -d --clock-offset=36 --fail=X%2010010112 test 2010010106 >> $OUT_SCHED 2>&1 &
else
    cylc start test 2010010106 >> $OUT_SCHED 2>&1 &
fi
echo -n "   Will wait 5 seconds for startup ... "
sleep 5
echo done

# now check for startup errors, as just described.
if grep '_cylc-start failed:  1' $OUT_SCHED  > /dev/null; then
    cat $OUT_SCHED
    munge 2> /dev/null # activate trap with a non-existent command
fi

# WAIT FOR ALL TASKS AT 2010010112 TO FINISH 
# at which point the suite is stalled because X failed.
echo
echo ">> WAITING for suite to stall at 2010010112 due to failed X"
echo -n "   ."
READY=false
while ! $READY; do
    READY=true
    for TASK in A B C D E F; do
        ! grep "${TASK}%2010010106 finished" $LOG > /dev/null 2>&1 && READY=false
    done
    ! grep "X%2010010112 failed" $LOG > /dev/null 2>&1 && READY=false
    echo -n .
    sleep 1
done
echo done

# UNLOCK THE SUITE
echo
echo -n ">> UNLOCKING the suite to allow intervention ..."
cylc unlock -f test >> $OUT 2>&1
echo done

# SET A STOP TIME OF
echo
echo -n ">> SETTING STOP TIME 2010010212 ..."
cylc stop -f test 2010010212 >> $OUT 2>&1
echo done

# INSERT A COLDSTART TASK AT 2010010206
echo
echo -n ">> INSERTING a coldstart task at 2010010206 ..."
cylc insert -f test coldstart%2010010206 >> $OUT 2>&1
echo done

# PURGE THE FAILED TASK AND ITS DEPENDANTS THROUGH TO 2010010200
echo
echo ">> PURGING X%2010010112 and all dependants, through to 2010010200"
echo -n "   ... "
cylc purge -f test X%2010010112 2010010200 >> $OUT 2>&1
echo done

# WAIT FOR THE SUITE TO FINISH AT 2010010212
echo
echo ">> WAITING for the suite to shut down at 2010010112"
echo -n "   ."
READY=false
while ! $READY; do
    READY=true
    ! grep "ALL TASKS FINISHED" $LOG > /dev/null 2>&1 && READY=false
    echo -n .
    sleep 1
done
echo done

# RUN A SINGLE TASK
# can be one that completes successfully or fails, it doesn't matter.
echo
# EXAMPLE OUTPUT FROM submit:
# % cylc submit -t startup%2010010106 test
# Loading Cylc Preferences file: /home/oliverh/.cylcrc
#
# Cylc messages will be directed to stdout (=> the task log file).
# Logging directory is /home/oliverh/.cylc/log-files/test-submit
#
#  > SUBMITTING TASK: /tmp/cylc-2H4HPc </dev/null 1> /home/oliverh/startup%2010010106-haDDeS.out 2> /home/oliverh/startup%2010010106-haDDeS.err &
echo ">> RUN A SINGLE TASK (startup%2010010106) from the suite"
FOO=$(cylc submit test startup%2010010106 )
STDOUT=$( echo $FOO | sed -e 's/.*1> //' | sed -e 's/ 2>.*//' )
STDERR=$( echo $FOO | sed -e 's/.*2> //' | sed -e 's/ &.*$//' )
echo "TASK OUTPUT LOGS:"
echo "  $STDOUT"
echo "  $STDERR"
echo -n "   ."
READY=false
while ! $READY; do
    grep 'cylc (submit): startup%2010010106 finished' $STDOUT 2> /dev/null && READY=true
    echo -n .
    sleep 1
done
echo done

# DELETE THE SUITE DEFINITION DIRECTORY
echo
echo -n ">> DELETING suite definition directory ..."
rm -rf $SUITE_DIR
echo done

# UNREGISTER THE test SUITE
echo
echo -n ">> UNREGISTERING suite test ..."
cylc register -d test >> $OUT 2>&1
echo done

# FINISHED
echo 
echo ">> TEST OUTPUT LOGS:"
ls -l $OUT $OUT_SCHED
echo ">> CYLC MAIN LOG FOR THE TEST:"
ls -l $LOG
echo
echo ">> DONE"
