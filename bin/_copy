#!/usr/bin/env python

from mkdir_p import mkdir_p
import os, re, sys
from shutil import copytree
from optparse import OptionParser
from registration import localdb, regsplit, RegistrationError
from regprompt import prompt

parser = OptionParser( usage = """cylc [db] copy [OPTIONS] FROM TO DIR

TO DO: CLARIFY OR CHANGE DESTINATION DIR HANDLING (SHOULD WE IMPOSE A 
GROUP/NAME DIRECTORY STRUCTURE?)

copy local suites or groups.
    One suite: GROUP:NAME into DIR
    A whole group: GROUP: into DIR/GROUP

Arguments:
    DIR  - destination for the copied suite definition (must not exist).
             or top level directory for copied suite definitions.""" )

( options, args ) = parser.parse_args()

if len(args) != 3:
    parser.error('Wrong number of arguments')

arg_from, arg_to, arg_dir = args

local = localdb()

m = re.match( '^(.*):$', arg_from )
n = re.match( '^(.*):$', arg_to )
if m:
    # copy a whole group
    fromgroup = m.groups()[0]
    if n:
        togroup = n.groups()[0]
    else:
        raise SystemExit( 'Inconsistent command arguments' )

    topdir = arg_dir

    # retrieve registrations
    local.load_from_file()
    try:
        csuites = local.get_list( groupfilt='^' + fromgroup + '$' )
    except RegistrationError, x:
        raise SystemExit(x)

    print 'Matched:'
    for csuite, cdir, cdescr in csuites:
        cowner, cgroup, cname = regsplit( csuite ).get()
        print '  ', cgroup + ':' + cname

    # import to local
    try:
        local.lock()
    except RegistrationError, x:
        raise SystemExit(x)
    local.load_from_file()
    changed = False
 
    for csuite, cdir, cdescr in csuites:
        cowner, cgroup, cname = regsplit( csuite ).get()
        lgroup = togroup
        lname = cname

        #ldir = os.path.join( topdir, lgroup, lname )
        ldir = os.path.join( topdir, lname )
        if os.path.exists( ldir ):
            print >> sys.stderr, 'WARNING: skipping copy, directory already exists: ' + ldir
            continue
        lreg = lgroup + ':' + lname
        try:
            local.register( lreg, ldir, cdescr )
        except RegistrationError, x:
            print >> sys.stderr, x
            local.unregister( lreg )
        else:
            try:
                mkdir_p( os.path.dirname(ldir))
            except Exception,x:
                print >> sys.stderr, x
                local.unregister(lreg)
            else:
                try:
                    copytree( cdir, ldir )
                except OSError, x:
                    print >> sys.stderr,x
                    local.unregister( lreg )
                else:
                    changed = True
    if changed:
        local.dump_to_file()
    local.unlock()

else:
    # single suite
    freg, lreg, ldir = args

    # retrieve registration
    local.load_from_file()
    try:
        cdir, cdescr = local.get( freg )
    except RegistrationError, x:
        raise SystemExit(x)

    if os.path.exists( ldir ):
        raise SystemExit( 'ERROR, destination directory already exists: ' + ldir )

    # import to local
    try:
        local.lock()
    except RegistrationError, x:
        raise SystemExit(x)
    local.load_from_file()
 
    try:
        local.register( lreg, ldir, cdescr )
    except RegistrationError, x:
        local.unlock()
        raise SystemExit(x)
    else:
        print 'Copying suite definition'
        try:
            mkdir_p( os.path.dirname(ldir))
        except Exception,x:
            print >> sys.stderr, x
            local.unregister( lreg )
            local.unlock()
        else: 
            try:
                copytree( cdir, ldir )
            except OSError, x:
                print >> sys.stderr,x
                local.unregister( lreg )
                local.unlock()
            else:
                local.dump_to_file()
                local.unlock()

