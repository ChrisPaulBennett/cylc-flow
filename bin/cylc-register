#!/usr/bin/env python2

# THIS FILE IS PART OF THE CYLC SUITE ENGINE.
# Copyright (C) 2008-2018 NIWA & British Crown (Met Office) & Contributors.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""cylc [prep] register [OPTIONS] ARGS

Register the name REG for the suite definition in PATH. The suite server
program can subsequently be started, stopped, and otherwise targetted by name.
(Note however that "cylc run" can register the target suite on the fly, too).

Registration creates a suite run directory "~/cylc-run/REG/" with a ".service/"
sub-directory containing authentication files and source symlink to PATH. Suite
names can be a '/'-delimited hierarchy, which becomes a path under ~/cylc-run/.

REG defaults to "$(basename $PWD)" and PATH defaults to "$PWD", but if you give
only a single argument it must be the name, not the path.

% cylc reg foo PATH
register suite in PATH as foo

% cylc reg foo
register suite in $PWD as foo

% cylc reg
register suite in $PWD as $(basename $PWD)

The same suite can be registered under multiple names (with corresponding
different run directories) but the same name cannot be used for different
suites; the command will abort if REG is already used by a different suite."""

import sys
from cylc.remote import remrun
if remrun():
    sys.exit(0)

from cylc.option_parsers import CylcOptionParser as COP
from cylc.suite_srv_files_mgr import SuiteSrvFilesManager
import cylc.flags


def main():
    parser = COP(
        __doc__,
        argdoc=[("[REG]", "Suite name"),
                ("[PATH]", "Suite definition directory (defaults to $PWD)")])
    args = parser.parse_args()[1]
    if len(args) == 2:
        reg, src = args
    elif len(args) == 1:
        reg = args[0]
        src = None
    else:
        reg = src = None
    SuiteSrvFilesManager().register(reg, src)

if __name__ == "__main__":
    try:
        main()
    except Exception as exc:
        if cylc.flags.debug:
            raise
        sys.exit(str(exc))
