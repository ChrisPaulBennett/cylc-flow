#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2012 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os, sys
from optparse import OptionParser
from cylc.registration import localdb, RegistrationError, DatabaseLockedError
from cylc.passphrase import passphrase
from cylc.hostname import hostname

parser = OptionParser( usage = """cylc [db] register [options] SUITE PATH

Register a suite in your private suite database.

Cylc commands target suites via names registered in a suite database so
that you don't need to continually re-type the actual location of the
suite definition directory on disk. Suite names are hierarchical like
directory paths but delimited by '.' (foo.bar.baz), allowing suites to
be grouped and organised into tree-like structures. Groups are virtual
and do not need to be explicitly created before use.

Legal name characters are letters, digits, underscore, and hyphen. The
period '.' is the registration hierarchy delimiter. Colon cannot be used
because of the potential for trouble with PATH variables if the suite
name is used in certain directory paths.

EXAMPLES, for suite definition dirs /home/bob/(one,two,three,four):

% cylc db reg bob         /home/bob/one
% cylc db reg foo.bag     /home/bob/two
% cylc db reg foo.bar.baz /home/bob/three
% cylc db reg foo.bar.waz /home/bob/four

% cylc db pr '^foo'             # print in flat form
  bob         | "Test Suite One"   | /home/bob/one
  foo.bag     | "Test Suite Two"   | /home/bob/two
  foo.bar.baz | "Test Suite Four"  | /home/bob/three
  foo.bar.waz | "Test Suite Three" | /home/bob/four

% cylc db pr -t '^foo'          # print in tree form
  bob        "Test Suite One"   | /home/bob/one
  foo
   |-bag     "Test Suite Two"   | /home/bob/two
   `-bar
     |-baz   "Test Suite Three" | /home/bob/three
     `-waz   "Test Suite Four"  | /home/bob/four

Arguments:
     SUITE  -  The new hierarchical suite registration name.
     PATH   -  A cylc suite definition directory.""" )

parser.add_option( "-v","--verbose",
        help="Print extra information.",
        action="store_true", default=False, dest="verbose" )

( options, args ) = parser.parse_args()

if len(args) != 2:
    parser.error( "Wrong number of arguments" )

# NEW REGISTRATION: cylc register SUITE PATH
suite = args[0]
rdir = args[1]
if rdir.endswith('suite.rc'):
    # just want the directory
    rdir = os.path.dirname(rdir)
if not os.path.isdir( rdir ):
    raise SystemExit( "Directory not found: " + rdir )

db = localdb( verbose=options.verbose )
try:
    db.lock()
    db.load_from_file()
    db.register( suite, rdir )
    db.dump_to_file()
    db.unlock()
except DatabaseLockedError, x:
    raise SystemExit(x)
except RegistrationError, x:
    print >> sys.stderr, x
    db.unlock()
    sys.exit(1)
except Exception, x:
    print >> sys.stderr, 'ERROR:', x
    db.unlock()
    sys.exit(1)

# create a new passphrase for the suite if necessary
passphrase( suite, os.environ['USER'], hostname ).generate(rdir)

