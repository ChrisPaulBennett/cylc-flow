#!/usr/bin/env python

import os, re, sys
from optparse import OptionParser
from registration import localdb, centraldb, RegistrationError
from config import config, SuiteConfigError

parser = OptionParser( usage = """cylc [db] unregister [OPTIONS] [ARGUMENTS]

Delete local or central cylc suite registrations.

     $ cylc db unreg [-c] SUITE             # unregister one suite
     $ cylc db unreg [-c] [FILTER options]  # unregister matching suites
     $ cylc db --invalid [-c]               # unregister invalid suites
 
NOTE: deleting a suite registration does not delete the suite itself!

FILTERING: 
  (a) The filter patterns are Regular Expressions, not shell globs, so
the general wildcard is '.*' (match zero or more of anything), NOT '*'.
  (b) For our purposes there is an implicit wildcard at the end of each
pattern ('foo' is the same as 'foo.*'); use the string end marker to
stop this ('foo$' matches only literal 'foo').
  (c) Omission of an item filter is taken to mean "match any of item".
  (d) to single out entries in the default group you have to specify
  the group name explicitly (-g default).

If you accidentally delete the registration of a running suite, just
reregister it under the same name to regain access to the suite.""" )

parser.add_option( "-o", "--owner",
        help="Owner filter Regular Expression.",
        metavar="RE", action="store", default=os.environ['USER'],
        dest="ownerfilt" )

parser.add_option( "-g", "--group",
        help="Group filter Regular Expression.",
        metavar="RE", action="store", default=None, dest="groupfilt" )

parser.add_option( "-n", "--name",
        help="Name filter Regular Expression.",
        metavar="RE", action="store", default=None, dest="namefilt" )

parser.add_option( "-c","--centraldb",
        help="Delete registrations from the central database.",
        action="store_true", default=False, dest="central" )

# TO DO?
#parser.add_option( "-d", "--delete-def-dir",
#        help="Delete the suite definition directory too (!DANGEROUS!).",
#        action="store_true", default=False, dest="deldefdir" )

parser.add_option( "--invalid",
        help="Delete any registrations that are not valid.",
        action="store_true", default=False, dest="clean" )

parser.add_option( "-v", "--verbose",
        help="Turn on verbose output.",
        action="store_true", default=False, dest="verbose" )

( options, args ) = parser.parse_args()

if len(args) > 1:
    parser.error( "Too many arguments" )

if options.central:
    reg = centraldb()
else:
    reg = localdb()

try:
    reg.lock()
except RegistrationError, x:
    raise SystemExit(x)
reg.load_from_file()

if len(args) == 1:
    # single suite
    suite = args[0]

    try:
        reg.unregister( suite, verbose=options.verbose )
    except RegistrationError, x:
        reg.unlock()
        raise SystemExit(x)
    else:
        reg.dump_to_file()
        reg.unlock()

elif options.clean:
    if reg.unregister_multi( verbose=options.verbose, invalid=True ):
        reg.dump_to_file()
    reg.unlock()

else:
    # filtered
    changed = False
    # check for valid regular expressions:
    for filt in options.groupfilt, options.namefilt:
        if filt:
            try:
                re.compile( filt )
            except:
                raise SystemExit( 'Bad expression: ' + filt )

    if reg.unregister_multi( ownerfilt=None,
            groupfilt=options.groupfilt, namefilt=options.namefilt,
            verbose=options.verbose ):
        changed = True

    if changed:
        reg.dump_to_file()
    reg.unlock()
