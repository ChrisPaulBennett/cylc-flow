#!/usr/bin/env python

from shutil import rmtree
import os, re, sys
from optparse import OptionParser
from registration import getdb, RegistrationError
from config import config, SuiteConfigError

parser = OptionParser( usage = """cylc [db] unregister|delete [OPTIONS] SUITE

Delete local or central suite or group registrations (this does not
delete suite definition directories!).

     $ cylc db unreg SUITE
 
If you accidentally delete the registration of a running suite, just
reregister it under the same name to regain access to the suite.

Arguments:
    SUITE - suite registrations:
              OWNER:GROUP:NAME, GROUP:NAME
            or registration groups (note trailing colon!):
              OWNER:GROUP: or GROUP:""" )

parser.add_option( "--obliterate",
        help="Delete the suite definition directory too (!DANGEROUS!).",
        action="store_true", default=False, dest="obliterate" )

parser.add_option( "--gcylc",
        help="(DO NOT USE THIS OPTION).",
        action="store_true", default=False, dest="gcylc" )

parser.add_option( "-v", "--verbose",
        help="Turn on verbose output.",
        action="store_true", default=False, dest="verbose" )

( options, args ) = parser.parse_args()

if len(args) != 1:
    parser.error( "Wrong number of arguments" )

suite = args[0]

db = getdb( suite )
try:
    db.lock()
except RegistrationError, x:
    raise SystemExit(x)
db.load_from_file()

dirs = []

group_unreg = False
m = re.match( '^(\w+):(\w+):$', suite)
if m:
    owner, group = m.groups()
    group_unreg = True
else:
    n = re.match( '^(\w+):$', suite)
    if n:
        group_unreg = True
        group = n.groups()[0]

if group_unreg:
    if options.obliterate:
        try:
            regs = db.get_list( groupfilt='^' + group + '$' )
        except RegistrationError, x:
            raise SystemExit(x)
        else:
            for suite, dir, descr in regs:
                dirs.append(dir)
    try:
        db.unregister_group_fast( group )
    except RegistrationError, x:
        print >> sys.stderr, x
        db.unlock()
        sys.exit(1)
    else:
        db.dump_to_file()
        db.unlock()
else:
    if options.obliterate:
        try:
            dir, descr = db.get( suite )
        except RegistrationError, x:
            db.unlock()
            raise SystemExit(x)
        else:
            dirs.append(dir)
 
    try:
        db.unregister( suite, verbose=options.verbose )
    except RegistrationError, x:
        print >> sys.stderr, x
        db.unlock()
        sys.exit(1)
    else:
        db.dump_to_file()
        db.unlock()

# TO DO: should this be inside the db lock in the case of
# central copied registrations (probably not).
if options.obliterate:
    really_obliterate = False
    print "Suite(s) successfully unregistered."
    if options.gcylc:
        # confirmed by dialog
        really_obliterate = True
    else:
        response = raw_input( "DO YOU REALLY WANT TO DELETE THE SUITE DEFINITION DIRECTORIES (y/n)?" )
        if response == 'y':
            really_obliterate = True
    if really_obliterate and len(dirs)>0:
        print "DELETING SUITE DEFINITIONS:"
        for dir in dirs:
            print '  - ', dir
            try:
                rmtree(dir)
            except OSError, x:
                print >> sys.stderr, "Failed to delete " + dir
                print >> sys.stderr, x
