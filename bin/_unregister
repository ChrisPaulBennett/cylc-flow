#!/usr/bin/env python

import os, re, sys
from optparse import OptionParser
from registration import getdb, RegistrationError
from config import config, SuiteConfigError

parser = OptionParser( usage = """cylc [db] unregister|delete [OPTIONS] SUITE

Delete local or central suite or group registrations (this does not
delete suite definition directories!).

     $ cylc db unreg SUITE
 
If you accidentally delete the registration of a running suite, just
reregister it under the same name to regain access to the suite.

Arguments:
    SUITE - suite registrations:
              OWNER:GROUP:NAME, GROUP:NAME
            or registration groups (note trailing colon!):
              OWNER:GROUP: or GROUP:""" )

# TO DO?
#parser.add_option( "-d", "--delete-def-dir",
#        help="Delete the suite definition directory too (!DANGEROUS!).",
#        action="store_true", default=False, dest="deldefdir" )

parser.add_option( "-v", "--verbose",
        help="Turn on verbose output.",
        action="store_true", default=False, dest="verbose" )

( options, args ) = parser.parse_args()

if len(args) != 1:
    parser.error( "Wrong number of arguments" )

suite = args[0]

reg = getdb( suite )
try:
    reg.lock()
except RegistrationError, x:
    raise SystemExit(x)
reg.load_from_file()

group_unreg = False
m = re.match( '^(\w+):(\w+):$', suite)
if m:
    owner, group = m.groups()
    group_unreg = True
else:
    n = re.match( '^(\w+):$', suite)
    if n:
        group_unreg = True
        group = n.groups()[0]

if group_unreg:
    try:
        reg.unregister_group_fast( group )
    except RegistrationError, x:
        reg.unlock()
        raise SystemExit(x)
    else:
        reg.dump_to_file()
        reg.unlock()
else:
    try:
        reg.unregister( suite, verbose=options.verbose )
    except RegistrationError, x:
        reg.unlock()
        raise SystemExit(x)
    else:
        reg.dump_to_file()
        reg.unlock()
