#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2011 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

from shutil import rmtree
import os, re, sys
from optparse import OptionParser
from cylc.registration import localdb, centraldb, RegistrationError

parser = OptionParser( usage = """cylc [db] unregister [OPTIONS] SUITE

Remove a suite, a group of suites, or a list of matching suites, from
private or central suite database. This does not delete suite definition
directories unless you specify the '--delete' option.

If you accidentally unregister a running suite, just reregister it under
the same registration path to regain access to it.

Arguments:
    SUITE - suite or group registration, or expression (--filter).""" )

parser.add_option( "--delete",
        help="Delete the suite definition directory too (!DANGEROUS!).",
        action="store_true", default=False, dest="obliterate" )

parser.add_option( "--filter",
        help="SUITE is a Python regular expression for matching suites.",
        action="store_true", default=False, dest="regfilter" )

parser.add_option( "-f", "--force",
        help="Don't ask for confirmation before obliterating suite definitions",
        action="store_true", default=False, dest="force" )

parser.add_option( "-c", "--central",
        help="Target the central suite database.",
        action="store_true", default=False, dest="central" )

parser.add_option( "--gcylc",
        help="(DO NOT USE THIS OPTION).",
        action="store_true", default=False, dest="gcylc" )

( options, args ) = parser.parse_args()

if len(args) != 1:
    parser.error( "Wrong number of arguments" )

arg = args[0]

if options.central:
    db = centraldb()
else:
    db = localdb()

try:
    db.lock()
    db.load_from_file()
    dirs = db.unregister( arg )
    db.dump_to_file()
    db.unlock()
except RegistrationError, x:
    print >> sys.stderr, x
    db.unlock()
    sys.exit(1)

# TO DO: should this be inside the db lock in the case of
# central copied registrations (probably not).
if options.obliterate:
    really_obliterate = False
    print "Suite(s) successfully unregistered."
    if options.gcylc or options.force:
        # confirmed by dialog
        really_obliterate = True
    else:
        print "Suite definition directories to delete:"
        for dir in dirs:
            print ' -', dir
        response = raw_input( "DO YOU REALLY WANT TO DELETE THESE SUITE DEFINITION DIRECTORY(S) (y/n)?" )
        if response == 'y':
            really_obliterate = True
    if really_obliterate and len(dirs)>0:
        print "DELETING SUITE DEFINITIONS:"
        for dir in dirs:
            try:
                rmtree(dir)
            except OSError, x:
                print >> sys.stderr, "Failed to delete " + dir
                print >> sys.stderr, x
