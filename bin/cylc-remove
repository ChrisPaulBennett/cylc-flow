#!/usr/bin/env python

# THIS FILE IS PART OF THE CYLC SUITE ENGINE.
# Copyright (C) 2008-2015 NIWA
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
if '--use-ssh' in sys.argv[1:]:
    sys.argv.remove( '--use-ssh' )
    from cylc.remote import remrun
    if remrun().execute( force_required=True ):
        sys.exit(0)

from cylc.prompt import prompt
from cylc.network.suite_command import SuiteCommandClient
from cylc.CylcOptionParsers import cop, multitask_usage
from cylc.command_prep import prep_pyro
import cylc.flags

parser = cop( """cylc [control] remove [OPTIONS] ARGS

Remove one or more tasks, or all tasks with a common cycle point from a
running suite.

Tasks will spawn successors first if they have not done so already.
""" + multitask_usage, pyro=True, multitask=True,
    argdoc=[("REG", "Suite name"),
        ('[MATCH]', 'Task or family name matching regular expression'),
        ('[POINT]', 'Task cycle point (e.g. date-time or integer)') ])

parser.add_option( "--no-spawn",
        help="Do not spawn successors before removal.",
        action="store_true", default=False, dest="no_spawn" )

(options, args) = parser.parse_args()

suite, pphrase = prep_pyro( args[0], options ).execute()

if len(args) == 3:
    name = args[1]
    point_string = args[2]
    remove_point = False
else:
    point_string = args[1]
    remove_point = True

spawn = not options.no_spawn

pclient = SuiteCommandClient(suite, pphrase, options.owner, options.host,
                             options.pyro_timeout, options.port)
if options.print_uuid:
    print >> sys.stderr, 'Client UUID: %s' % pclient.get_client_uuid()
if remove_point:
    prompt('remove ALL tasks at %s in %s' % (point_string, suite),
           options.force)
    pclient.put_command('remove cycle', point_string, spawn)
else:
    prompt('remove task(s) %s at %s in %s' % (name, point_string, suite),
           options.force)
    pclient.put_command('remove task', name, point_string, options.is_family, spawn)
