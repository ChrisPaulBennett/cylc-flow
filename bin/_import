#!/usr/bin/env python

from mkdir_p import mkdir_p
import os, re, sys
from shutil import copytree
from optparse import OptionParser
from registration import localdb, centraldb, regsplit, RegistrationError
from regprompt import prompt

parser = OptionParser( usage = """cylc [register] import [OPTIONS] [ARGUMENTS]

Import suites from the central registration database.

1/ cylc [register] import SOURCE DIR
Import one suite under its own group and name

2/ cylc [register] import SOURCE TARGET DIR
Import one suite SOURCE (central) to TARGET (local)

3/ cylc [register] import [FILTER OPTIONS] TOPDIR
Interactively import suites selected by filtering on owner, group, and name.

Arguments:

Arguments:
    SOURCE, TARGET   - registrations, GROUP:NAME or NAME (default group).
    DIR    - destination for the imported suite definition (must not exist).
    TOPDIR - top level directory for imported suite definitions.""" )

parser.add_option( "-o", "--owner",
        help="Owner filter Regular Expression.",
        metavar="RE", action="store", default=None, dest="ownerfilt" )

parser.add_option( "-g", "--group",
        help="Group filter Regular Expression.",
        metavar="RE", action="store", default=None, dest="groupfilt" )

parser.add_option( "-n", "--name",
        help="Name filter Regular Expression.",
        metavar="RE", action="store", default=None, dest="namefilt" )

( options, args ) = parser.parse_args()

if len(args) == 0 or len(args) > 3:
    parser.error('Illegal number of arguments')

local = localdb()
central = centraldb() 

if len(args) == 1:
    # interactive, filtered
    if not options.ownerfilt and not options.groupfilt and not options.namefilt:
        parser.error( "filtering options are required for single argument" )

    topdir = args[0]
    try:
        mkdir_p( topdir )
    except Exception,x:
        raise SystemExit(x)

    # check for valid regular expressions:
    for filt in options.ownerfilt, options.groupfilt, options.namefilt:
        if filt:
            try:
                re.compile( filt )
            except:
                raise SystemExit( 'Bad expression: ' + filt )

    # retrieve central registrations
    central.load_from_file()
    try:
        csuites = central.get_list( ownerfilt=options.ownerfilt,
                groupfilt=options.groupfilt, namefilt=options.namefilt )
    except RegistrationError, x:
        raise SystemExit(x)

    # organise into owner_group groups
    cgroups = {}
    print 'Matched:'
    for csuite, cdir, cdescr in csuites:
        print '  ', csuite
        cowner, cgroup, cname = re.split( ':', csuite )
        cowner_group = cowner + ':' + cgroup
        if cowner_group not in cgroups:
            cgroups[cowner_group] = [ ( cname, cdir, cdescr ) ]
        else:
            cgroups[cowner_group].append( (cname, cdir, cdescr))

    # import to local
    try:
        local.lock()
    except RegistrationError, x:
        raise SystemExit(x)
    local.load_from_file()
    changed = False
 
    for cowner_group in cgroups:
        cowner, cgroup = re.split(':', cowner_group )
        lgroup = prompt( "Import " + cowner + ':' + cgroup + " as what group?", cgroup )
        if lgroup == 'q':
            local.unlock()
            sys.exit(0)
        if lgroup == 's':
            continue
        for cname, cdir, cdescr in cgroups[cowner_group]:
            lname = prompt( "  Import " + cowner + ':' + cgroup + ':' + cname  + " as " + lgroup + ":WHAT?", cname ) 
            if lname == 'q':
                local.unlock()
                sys.exit(0)
            if lname == 's':
                continue
            defldir = os.path.join( topdir, lgroup, lname )
            ldir = prompt( "  Copy Suite Definition to what directory?", defldir ) 
            if os.path.exists( ldir ):
                print >> sys.stderr, 'WARNING: skipping import, directory already exists: ' + ldir
                continue
            try:
                local.register( lgroup + ':' + lname, ldir, cdescr )
            except RegistrationError, x:
                print >> sys.stderr, x
            else:
                changed = True

            #print 'Copying suite definition'
            copytree( cdir, ldir )

    if changed:
        local.dump_to_file()
    local.unlock()

else:
    # single suite
    source = args[0]
    if len(args) == 2:
        target = source
        dir = args[1]
    else:
        target = args[1]
        dir = args[2]

    # retrieve central registration
    central.load_from_file()
    try:
        cdir, cdescr = central.get( source )
    except RegistrationError, x:
        raise SystemExit(x)

    if os.path.exists( ldir ):
        raise SystemExit( 'not importing, directory already exists: ' + ldir )

    # import to local
    try:
        local.lock()
    except RegistrationError, x:
        raise SystemExit(x)
    local.load_from_file()
 
    try:
        local.register( target, ldir, cdescr )
    except RegistrationError, x:
        print >> sys.stderr, x
    else:
        local.dump_to_file()
        print 'Copying suite definition'
        copytree( cdir, ldir )

    local.unlock()
