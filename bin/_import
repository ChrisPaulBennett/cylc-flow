#!/usr/bin/env python

import os, re, sys
from shutil import copytree
from optparse import OptionParser
from registration import localdb, centraldb, regsplit, RegistrationError

parser = OptionParser( usage = """cylc [register] import [FILTER options] [DEST]

Import suites from the central suite database to your local suite 
registration database, and optionally copy their suite definitions.

Arguments:
    DEST  -  local destination directory; imported suites will be
copied to sub-directories of DEST which must not exist yet. If DEST is
not specified the remote location will be registered as the suite
definition directory. This is allowed because some suites, such as the
cylc example suites, do all I/O under $HOME and $TMPDIR and so can be
run directly by others (but you won't be able to modify the suite
definitions without making a copy, of course).""" )

parser.add_option( "-o", "--owner",
        help="Owner filter Regular Expression.",
        metavar="RE", action="store", default=None, dest="ownerfilt" )

parser.add_option( "-g", "--group",
        help="Group filter Regular Expression.",
        metavar="RE", action="store", default=None, dest="groupfilt" )

parser.add_option( "-n", "--name",
        help="Name filter Regular Expression.",
        metavar="RE", action="store", default=None, dest="namefilt" )

( options, args ) = parser.parse_args()

if len(args) > 1:
    parser.error('Wrong number of arguments')

# check for valid regular expressions:
for filt in options.ownerfilt, options.groupfilt, options.namefilt:
    if filt:
        try:
            re.compile( filt )
        except:
            raise SystemExit( 'Bad expression: ' + filt )

gotdest = False
if len(args) == 1:
    dest = args[0]
    gotdest = True
    # make registered path absolute # see NOTE:ABSPATH above
    if not re.match( '^/', dest ):
        dest = os.path.join( os.environ['PWD'], dest )
    if not os.path.exists( dest ):
        os.makedirs( dest )

local = localdb()
central = centraldb() 
central.load_from_file()

# retrieve central registrations
try:
    csuites = central.get_list( ownerfilt=options.ownerfilt,
            groupfilt=options.groupfilt, namefilt=options.namefilt )
except RegistrationError, x:
    raise SystemExit(x)

# organise into owner_group groups
cgroups = {}
for csuite, cdir, cdescr in csuites:
    cowner, cgroup, cname = re.split( ':', csuite )
    cowner_group = cowner + ':' + cgroup
    if cowner_group not in cgroups:
        cgroups[cowner_group] = [ ( cname, cdir, cdescr ) ]
    else:
        cgroups[cowner_group].append( (cname, cdir, cdescr))

# import to local
changed = False
try:
    local.lock()
except RegistrationError, x:
    raise SystemExit(x)
local.load_from_file()
 
for cowner_group in cgroups:
    cowner, cgroup = re.split(':', cowner_group )
    lgroup = raw_input( "Import GROUP " + cgroup + " as (default: same)? " )
    if lgroup == '':
        lgroup = cgroup
    for cname, cdir, cdescr in cgroups[cowner_group]:
        lname = raw_input( "  Import NAME " + cname  + " as (default: same)? " ) 
        if lname == '':
            lname = cname

        if gotdest:
            newdir = os.path.join( dest, lname )
            if os.path.exists( newdir ):
                raise SystemExit( 'ERROR, directory already exists: ' + newdir )
        else:
            newdir = cdir

        try:
            local.register( lgroup + ':' + lname, newdir, cdescr )
        except RegistrationError, x:
            print x
        else:
            changed = True

if changed:
    local.dump_to_file()
local.unlock()

if gotdest:
    # do this only if registration succeeds
    print 'Copying suite definition'
    copytree( cdir, newdir )
