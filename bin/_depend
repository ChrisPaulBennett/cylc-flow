#!/usr/bin/env python

import os, sys, re
import cycle_time
import cylc_pyro_client
from CylcOptionParsers import PromptOptionParser
from port_scan import SuiteIdentificationError
from CylcError import CylcError

parser = PromptOptionParser( """cylc [control] depend [options] SUITE TASK DEP

Add new dependencies on the fly to tasks in a running suite.  If you
give a task ID (NAME%YYYYMMDDHH) for DEP the target TASK will depend on
DEP finishing, otherwise you can specify an explicit QUOTED message such
as "Data files uploaded for 2011080806" (presumably there will be another
task in the suite, or you will insert one, that reports that message as
an output).

Prerequisites added on the fly will not be propagated to the successors
of TASK, and they will not persist in TASK across a suite restart.""",
[ 'TASK              The task (NAME%YYYYMMDDHH) getting a new prerequisite.',
  'DEP               The task (NAME%YYYYMMDDHH) that TASK should depend on.' ] )

(options, args) = parser.parse_args()

if len(args) != 3:
    parser.error( "Wrong number of arguments." )

suite = parser.get_suite_name()
task_id = args[1]
dep = args[2]

m = re.match( '^(\w+)%(\w+)$', dep )
if m:
    #name, ctime = m.groups()
    msg = dep + ' succeeded'
else:
    msg = dep
    print >> sys.stderr, 'WARNING: final arg not a task ID, assuming prerequisite message:'
    print >> sys.stderr, msg

try:
    (name, cycle ) = task_id.split('%')
except ValueError:
    parser.error( "Task or Group ID must be NAME%YYYYMMDDHH")

if not cycle_time.is_valid( cycle ):
    parser.error( "invalid cycle time: " + cycle )

try:
    proxy = cylc_pyro_client.client( suite ).get_proxy( 'remote' )
except SuiteIdentificationError, x:
    raise SystemExit(x)

if not parser.prompt( 'Add prerequisite to task ' + task_id + ' in'):
    sys.exit(0)

result = proxy.add_prerequisite( task_id, msg )

if result.success:
    print result.reason
else:
    print 'ERROR:', result.reason
    sys.exit(1)
