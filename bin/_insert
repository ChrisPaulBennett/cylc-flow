#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2011 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os, sys, re
from cylc.cycle_time import ct, CycleTimeError
from cylc.taskid import id, TaskIDError
from cylc import cylc_pyro_client
from cylc.CylcOptionParsers import PromptOptionParser
from cylc.port_scan import SuiteIdentificationError
from cylc.registration import dbgetter, RegistrationError

parser = PromptOptionParser( """cylc [control] insert [options] SUITE TASK[%STOP]

Insert a single task or a task group into a running suite. Task groups must be
defined in the suite config (suite.rc) file. 

Inserted tasks will spawn successors as normal, unless they are 'one off' tasks.
See also 'cylc task submit', for running single tasks without a scheduler.""",
[ 'TASK                 Target task or insertion group.',
  'STOP                 Optional stop tag (e.g. final cycle time).' ]
)

(options, args) = parser.parse_args()

if len(args) != 2:
    parser.error( "suite name and one Task or Group ID required" )

target = args[1]

reg = parser.get_suite_name()
dbg = dbgetter()
try:
    suite, junk = dbg.get_suite(reg)
except RegistrationError, x:
    raise SystemExit(x)

try:
    # name%tag%stoptag
    ( name, tag, stoptag ) = target.split('%')
except ValueError:
    try:
        ( name, tag ) = target.split('%')
    except ValueError:
        raise SystemExit( "ERROR: final argument must be NAME%TAG[%STOP]" )
    else:
        stoptag = None

# check TASK is a valid task ID
try:
    tid = id( name + '%' + tag )
except TaskIDError, x:
    raise SystemExit(x)
else:
    name = tid.name
    tag = tid.tag  # (may have 'a:' removed)

# check if stoptag is cycling or asynchronous
if stoptag:
    if re.match( '^a:', stoptag ):
        stop = stoptag[2:]
    else:
        try:
            stop = ct(stoptag).get()
        except CycleTimeError,x:
            raise SystemExit(x)
else:
    stop = None

try:
    proxy = cylc_pyro_client.client( suite ).get_proxy( 'remote' )
except SuiteIdentificationError, x:
    raise SystemExit(x)

if not parser.prompt( 'Insert ' + target + ' in'):
    sys.exit(0)

result = proxy.insert( name + '%' + tag, stop )

if result.success:
    print result.reason
else:
    print 'ERROR:', result.reason
    sys.exit(1)
