#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2011 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os,sys
import cycle_time
import cylc_pyro_client
from CylcOptionParsers import PromptOptionParser
from port_scan import SuiteIdentificationError

parser = PromptOptionParser( """cylc [control] insert [options] SUITE TASK[%STOP]

Insert a single task or a task group into a running suite. Task groups must be
defined in the suite config (suite.rc) file. 

Inserted tasks will spawn successors as normal, unless they are 'one off' tasks.
See also 'cylc task submit', for running single tasks without a scheduler.""",
[ 'TASK                 Task or group to insert (NAME%YYYYMMDDHH)',
  'STOP                 Optional stop cycle (YYYYMMDDHH)' ]
)

(options, args) = parser.parse_args()

if len(args) != 2:
    parser.error( "suite name and one Task or Group ID required" )

target = args[1]

suite = parser.get_suite_name()

try:
    ( name, cycle, stop ) = target.split('%')
except ValueError:
    try:
        ( name, cycle ) = target.split('%')
    except ValueError:
        parser.error( "Task or Group must be NAME%YYYYMMDDHH[%YYYYMMDDHH]")
    else:
        stop = None

if not cycle_time.is_valid( cycle ):
    parser.error( "invalid cycle time: " + cycle )
if stop:
    if not cycle_time.is_valid( stop ):
        parser.error( "invalid cycle time: " + stop )

try:
    proxy = cylc_pyro_client.client( suite ).get_proxy( 'remote' )
except SuiteIdentificationError, x:
    raise SystemExit(x)

if not parser.prompt( 'Insert ' + target + ' in'):
    sys.exit(0)

result = proxy.insert( name + '%' + cycle, stop )

if result.success:
    print result.reason
else:
    print 'ERROR:', result.reason
    sys.exit(1)
