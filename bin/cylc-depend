#!/usr/bin/env python

# THIS FILE IS PART OF THE CYLC SUITE ENGINE.
# Copyright (C) 2008-2015 NIWA
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
if '--use-ssh' in sys.argv[1:]:
    sys.argv.remove( '--use-ssh' )
    from cylc.remote import remrun
    if remrun().execute( force_required=True ):
        sys.exit(0)

import os
from cylc.prompt import prompt
from cylc.task_id import TaskID
from cylc.network.suite_command import SuiteCommandClient
from cylc.CylcOptionParsers import cop
from cylc.command_prep import prep_pyro
import cylc.flags

parser = cop( """cylc [control] depend [OPTIONS] ARGS

Add new dependencies on the fly to tasks in running suite REG. If DEP
is a task ID the target TASK will depend on that task finishing,
otherwise DEP can be an explicit quoted message such as
  "Data files uploaded for 2011080806"
(presumably there will be another task in the suite, or you will insert
one, that reports that message as an output).

Prerequisites added on the fly are not propagated to the successors
of TASK, and they will not persist in TASK across a suite restart.""",
    pyro=True, argdoc = [ ( 'REG', 'Suite name' ),
                          ( 'TASK', 'Target task' ),
                          ( 'DEP', 'New dependency' )] )

(options, args) = parser.parse_args()

suite, pphrase = prep_pyro( args[0], options ).execute()

task_id = args[1]
dep = args[2]

if TaskID.is_valid_id(dep):
    msg = dep + ' succeeded'
else:
    msg = dep

if not TaskID.is_valid_id(task_id):
    sys.exit("Invalid task ID: " + task_id)

prompt('Add new prerequisite to %s in %s' % (task_id, suite), options.force)
pclient = SuiteCommandClient(
    suite, pphrase, options.owner, options.host, options.pyro_timeout,
    options.port)
pclient.put_command('add prerequisite', task_id, msg)
if options.print_uuid:
    print >> sys.stderr, 'Client UUID: %s' % pclient.get_client_uuid()
