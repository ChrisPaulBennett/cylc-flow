#!/usr/bin/env python

# THIS FILE IS PART OF THE CYLC SUITE ENGINE.
# Copyright (C) 2008-2015 NIWA
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from cylc.remote import remrun
if remrun().execute():
    sys.exit(0)

import os
import cylc.flags
from subprocess import Popen, PIPE
from cylc.CylcOptionParsers import cop
from cylc.command_prep import prep_file
from cylc.owner import is_remote_user
from cylc.rundb import CylcSuiteDAO
from cylc.suite_host import is_remote_host
from cylc.suite_logging import suite_log
from cylc.suite_output import suite_output
from cylc.cfgspec.globalcfg import GLOBAL_CFG
from cylc.task_id import TaskID

parser = cop(
    """cylc [info] cat-log|log [OPTIONS] ARGS
Print the location or content of any suite or task log file, or a listing of a
task log directory on the suite or task host.  By default the suite event log
or task job script is printed.""",
    argdoc=[("REG", "Suite name"), ("[TASK-ID]", """Task ID""")])

parser.add_option(
    "-l", "--location",
    help="Print the location of the file, and set exit status according"
    "to whether or not the file exists (0 means it exists).",
    action="store_true", default=False, dest="location")

parser.add_option(
    "-o", "--stdout",
    help="Suite or task stdout log.",
    action="store_true", default=False, dest="stdout")

parser.add_option(
    "-e", "--stderr",
    help="Suite or task stderr log.",
    action="store_true", default=False, dest="stderr")

parser.add_option(
    "-r", "--rotation",
    help="Suite logs log rotation number (default 0)",
    metavar="INT", action="store", default="0", dest="rotation")

parser.add_option(
    "-a", "--activity",
    help="Task job activity log.",
    action="store_true", default=False, dest="job_activity")

parser.add_option(
    "-d", "--diff",
    help="Task job script diff (present after an edit-run).",
    action="store_true", default=False, dest="job_diff")

parser.add_option(
    "-u", "--status",
    help="Task job status file.",
    action="store_true", default=False, dest="job_status")

parser.add_option(
    "-c", "--custom",
    help="Custom task log name, for tasks that write non-standard files to "
    "their cylc log directory (e.g. 'job.stats').",
    metavar="FILENAME", action="store", default=None, dest="job_custom")

parser.add_option(
    "-s", "--submit-number",
    help="Task logs only: job submit number (default latest).",
    metavar="INT", action="store", default="NN", dest="subnum")

parser.add_option(
    "-t", "--try-number",
    help="(deprecated - use -s/--submit-number).",
    metavar="INT", action="store", default="NN", dest="subnum")

parser.add_option(
    "-x", "--list-local",
    help="List a task log directory on the suite host.",
    action="store_true", default=False, dest="list_local")

parser.add_option(
    "-y", "--list-remote",
    help="List a task log directory on the task host.",
    action="store_true", default=False, dest="list_remote")

(options, args) = parser.parse_args()
suite, suiterc = prep_file(args[0], options).execute()
owner = options.db_owner

# If --host is used, the command re-invokes itself on the remote suite host.
# For task logs we have to find retrieve task host from the suite run db
# located on the suite host.

user_at_host = None
suite_run_dir = GLOBAL_CFG.get_derived_host_item(
    suite, "suite run directory")

if len(args) == 1:
    # Suite logs.
    if any([options.job_activity, options.job_diff, options.job_status,
            options.list_local or options.list_remote]) or (
            options.job_custom is not None or
            options.subnum != "NN"):
        parser.error("Task log option(s) are not legal for suite logs.")

    log_dir = os.path.join(suite_run_dir, "log", "suite")
    if options.stdout:
        fpath = os.path.join(log_dir, "out")
    elif options.stderr:
        fpath = os.path.join(log_dir, "err")
    else:
        fpath = os.path.join(log_dir, "log")
        if options.rotation != "0":
            fpath += "." + options.rotation
else:
    # Task logs.
    if [options.job_activity, options.job_diff, options.job_status,
            options.stdout, options.stderr, options.list_local,
            options.list_remote,
            options.job_custom is not None].count(True) > 1:
        parser.error("Choose only one log file type.")
    taskid = args[1]

    try:
        task, point = TaskID.split(taskid)
    except:
        sys.exit("ERROR, illegal task ID: %s" % taskid)

    if options.subnum == "NN":
        # The latest submit.
        log_sub_dir = os.path.join(point, task, "NN")
    else:
        # A specific submit.
        try:
            log_sub_dir = os.path.join(
                point, task, "%02d" % int(options.subnum))
        except ValueError:
            parser.error("Illegal submit number: %s" % options.subnum)

    # Get the task host from the suite run db.
    if not (options.list_local or options.job_diff or options.job_activity):
        # Job diff and activity logs file are always located on the suite host;
        # other logs are generated by the task at run time, on the task host.
        suite_dao = CylcSuiteDAO(
            os.path.join(suite_run_dir, CylcSuiteDAO.DB_FILE_BASE_NAME),
            is_public=True)
        task_states_data = suite_dao.select_task_states_by_task_ids(
            ["host"], [[task, point]])
        if (task, point) in task_states_data:
            host = task_states_data[(task, point)].get("host")
        suite_dao.close()
        owner = None
        if host and "@" in host:
            owner, host = host.split("@", 1)
        if is_remote_host(host) or is_remote_user(owner):
            if host and owner:
                user_at_host = owner + "@" + host
            elif host:
                user_at_host = host
            elif owner:
                user_at_host = owner + "@localhost"
        job_log_dir = GLOBAL_CFG.get_derived_host_item(
            suite, "suite job log directory", host=host, owner=owner)
    else:
        user_at_host = None
        job_log_dir = GLOBAL_CFG.get_derived_host_item(
            suite, "suite job log directory")

    log_dir = fpath = os.path.join(job_log_dir, log_sub_dir)
    if options.stdout:
        fpath = os.path.join(log_dir, "job.out")
    elif options.stderr:
        fpath = os.path.join(log_dir, "job.err")
    elif options.job_diff:
        fpath = os.path.join(log_dir, "job-edit.diff")
    elif options.job_status:
        fpath = os.path.join(log_dir, "job.status")
    elif options.job_activity:
        fpath = os.path.join(log_dir, "job-activity.log")
    elif options.job_custom:
        fpath = os.path.join(log_dir, options.job_custom)
    elif options.list_remote or options.list_local:
        fpath = log_dir
    else:
        fpath = os.path.join(log_dir, "job")

# Having got the file path, construct a command to print its path or content.
if options.location:
    if user_at_host is not None:
        sys.stdout.write("%s:" % user_at_host)
    sys.stdout.write("%s\n" % fpath)
    cmd = "test -e %s" % fpath
elif options.list_remote or options.list_local:
    cmd = "ls %s" % fpath
else:
    cmd = "cat %s" % fpath

if user_at_host is not None:
    command = ["ssh", "-oBatchMode=yes", user_at_host, cmd]
else:
    command = cmd.split()

# Execute the command.
try:
    p = Popen(command, stdout=PIPE, stderr=PIPE)
except OSError as exc:
    if cylc.flags.debug:
        raise
    sys.exit(exc)
out, err, = p.communicate()
res = p.wait()
if out:
    sys.stdout.write(out)
if err:
    sys.stderr.write(err)
sys.exit(res)
