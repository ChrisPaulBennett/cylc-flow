#!/usr/bin/env python

from tailer import tailer
import gtk
import gobject
import tempfile
from time import sleep
import os, re, sys
from optparse import OptionParser
from warning_dialog import warning_dialog, info_dialog
import subprocess
import threading
import helpwindow

class info(object):
    """Run a command as a subprocess and capture its stdout and stderr
streams in real time to display in a GUI window. Examples:
    $ capture "echo foo"
    $ capture "echo hello && sleep 5 && echo bye"
Stderr is displayed in red.
    $ capture "echo foo && echox bar"
"""
    def __init__( self, command_list, stdout, stderr, width=400, height=400 ):
        window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        window.set_border_width( 5 )
        window.set_title( 'subprocess output capture' )
        window.connect("delete_event", self.quit)
        window.set_size_request(width, height)

        sw = gtk.ScrolledWindow()
        sw.set_policy( gtk.POLICY_NEVER, gtk.POLICY_AUTOMATIC )

        self.textview = gtk.TextView()
        self.textview.set_editable(False)
        self.textview.set_wrap_mode( gtk.WRAP_WORD )

        tb = self.textview.get_buffer()
        blue = tb.create_tag( None, foreground = "darkblue" )
        red = tb.create_tag( None, foreground = "red" )
       
        command = ' '.join( command_list )
        tb.insert_with_tags( tb.get_end_iter(), command + '\n\n', blue )

        vbox = gtk.VBox()
        hbox = gtk.HBox()
        sw.add(self.textview)
        vbox.add(sw)

        #save_entry = gtk.Entry()
        #save_entry.set_text( "$HOME/foo.txt" )
        #save_entry.connect( "activate", self.save, save_entry.get_text() )
 
        save_button = gtk.Button( "_Save To File" )
        #save_button.connect("clicked", self.save, save_entry.get_text() )
        save_button.connect("clicked", self.save )

        close_button = gtk.Button( "_Close" )
        close_button.connect("clicked", self.quit, None, None )

        help_button = gtk.Button( "_Help" )
        help_button.connect("clicked", helpwindow.capture )

        hbox.pack_end(close_button, False)
        hbox.pack_end(help_button, False)

        #hbox.pack_start( save_entry, False )
        hbox.pack_start( save_button, False )

        vbox.pack_start( hbox, False )
        window.add(vbox)
        close_button.grab_focus()
        window.show_all()

        proc = subprocess.Popen( command_list,
            stdout=stdout, stderr=stderr, shell=True )

        self.stdout_updater = tailer( self.textview, stdout.name, proc=proc, format=True )
        self.stdout_updater.start()

        self.stderr_updater = tailer( self.textview, stderr.name, proc=proc, tag=red )
        self.stderr_updater.start()

    def save( self, w ):
        tb = self.textview.get_buffer()
        start = tb.get_start_iter()
        end = tb.get_end_iter()
        txt = tb.get_text( start, end )

        dialog = gtk.FileChooserDialog(title='Save As',
                action=gtk.FILE_CHOOSER_ACTION_SAVE,
                buttons=(gtk.STOCK_CANCEL,gtk.RESPONSE_CANCEL,
                    gtk.STOCK_SAVE,gtk.RESPONSE_OK))
        filter = gtk.FileFilter()
        filter.set_name("any")
        filter.add_pattern("*")
        dialog.add_filter( filter )

        response = dialog.run()

        if response != gtk.RESPONSE_OK:
            dialog.destroy()
            return False

        fname = dialog.get_filename()
        dialog.destroy()

        try:
            f = open( fname, 'wb' )
        except IOError, x:
            warning_dialog( str(x) ).warn()
        else:
            f.write( txt )
            f.close()
            info_dialog( "Buffer saved to " + fname ).inform()

    def quit( self, w, e, data=None ):
        self.stdout_updater.quit = True
        self.stderr_updater.quit = True
        gtk.main_quit()

if __name__ == '__main__':

    parser = OptionParser( """capture [options] COMMAND

Run a command as a subprocess and capture the resulting stdout and
stderr to display in a dialog. Examples:
    $ capture "echo foo" &

Arguments:
   COMMAND    - the command line to run""")

    parser.add_option( "--width", 
        help="dialog window width in pixels (default 400)", 
        metavar='INT', action="store", 
        default=400, dest="width" )

    parser.add_option( "--height", 
        help="dialog window height in pixels (default 200)", 
        metavar='INT', action="store", 
        default=200, dest="height" )

    (options, args) = parser.parse_args()

    command_list = args

    if 'TMPDIR' in os.environ:
        tmpdir = os.environ['TMPDIR']
    elif 'SCRATCH' in os.environ:
        tmpdir = os.environ['SCRATCH']
    else:
        raise SystemExit( 'You must export $TMPDIR or $SCRATCH before running this command' )

    gobject.threads_init()
    tmp_stdout = tempfile.NamedTemporaryFile( dir = tmpdir )
    tmp_stderr = tempfile.NamedTemporaryFile( dir = tmpdir )
    info( command_list, tmp_stdout, tmp_stderr, 
            width=int(options.width), height=int(options.height) )
    gtk.main()
