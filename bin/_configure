#!/bin/bash

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|

# Generate task proxy classes.

# TO DO: rewrite this in Python to allow long options '--help' etc., for
# consistency with other cylc commands.

set -e  # ABORT on error

function print_usage() 
{
	echo "Usage: cylc configure [options] [PATH or SUITE]"
    echo
    echo "Configure a cylc suite. This generates suite-specific Python"
    echo "modules in the 'configured' sub-directory of the suite "
    echo "definition directory. A customizable suite.rc config file"
    echo "is also generated on the first run."
    echo
    echo "Arguments:"
    echo "  PATH         Location of the cylc suite definition directory."
    echo " or"
    echo "  SUITE        Registered name of the cylc suite."
    echo
    echo "Options:"
    echo "  -h, --help   Print this usage message and exit."
    echo "  -c           Clean up (remove) all autogenerated backups."
}

# long options '--foo=bar' aren't supported by bash getopts
# but we need '--help' option to comply with 'cylc help'.
for OPT in $@; do
    if [[ $OPT == '--help' ]]; then
        print_usage
        exit 0
    fi
done

CLEAN=false

while getopts "hc" opt; do
    case $opt in
        h)
        print_usage
        exit 0
        ;;
        c)
        CLEAN=true
        ;;
        *)
        exit 1
        ;;
    esac
done

shift $(( OPTIND -1 ))

if [[ $# == 1 ]]; then 
    # all args supplied
    ARG=$1
else
    echo "ERROR: wrong number of arguments"
    print_usage
	exit 1
fi

# is $ARG a registered suite name, or suite def?
if SUITE_DIR=$( cylc register --get $ARG 2> /dev/null ); then
    cylc register --print $ARG
else
    SUITE_DIR=$ARG
fi

if [[ ! -d $SUITE_DIR ]]; then
    echo "Suite definition directory not found: $SUITE_DIR"
    exit 1
fi

if [[ $SUITE_DIR != /* ]]; then
    # make path absolute 
    SUITE_DIR=$PWD/$SUITE_DIR
    # remove trailing '/'
    SUITE_DIR=${SUITE_DIR%/}
fi

CONFIGURED=$SUITE_DIR/configured

if $CLEAN; then
    echo "Removing autogenerated suite file backups"
    #rm -rf $CONFIGURED
    rm -rf ${CONFIGURED}.[0-9]*
    exit 0
fi

# check that the cylc bin directory is accessible
CYLC=$(which cylc)
CYLC_DIR=${CYLC%/bin/cylc}

if [[ -d $CONFIGURED ]]; then
    # back up the configured dir
    BKP=${CONFIGURED}.$$
    echo "Suite configuration backup: $BKP"
    cp -r $CONFIGURED $BKP
else
    mkdir -p $CONFIGURED
fi

echo "Generating task proxy classes under configured/"

python -c """import config
rc = config.config(\"${SUITE_DIR}/suite.rc\")
rc.generate_task_classes( \"$CONFIGURED\" )
"""

echo "Generating configured/task_classes.py"

cat > $CONFIGURED/task_classes.py <<eof
#/usr/bin/env python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|

eof

python -c """import config
rc = config.config(\"${SUITE_DIR}/suite.rc\")
for name in rc.get_task_name_list():
    print 'from __' + name + ' import ' + name
"""  >> $CONFIGURED/task_classes.py

echo "Generating configured/task_list.py"

cat > $CONFIGURED/task_list.py <<eof
#/usr/bin/env python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|

# LIST OF TASK NAMES (order irrelevant)
task_list = \\
    [
eof

python -c "import config
rc = config.config(\"${SUITE_DIR}/suite.rc\")
for name in rc.get_task_name_list():
    print '\"' + name + '\",'
"  >> $CONFIGURED/task_list.py

cat >> $CONFIGURED/task_list.py <<eof
    ]

task_list_shortnames = \\
    [
eof

python -c "import config
rc = config.config(\"${SUITE_DIR}/suite.rc\")
for name in rc.get_task_name_list():
    print '\"' + name + '\",'
"  >> $CONFIGURED/task_list.py

cat >> $CONFIGURED/task_list.py <<eof
    ]
# END OF FILE
eof

echo "Copying documents"

# copy suite config README file
#mkdir -p $SUITE_DIR/doc
#cp $CYLC_DIR/doc/suite.rc.README $SUITE_DIR/doc

# copy suite design document
cp $CYLC_DIR/doc/SuiteDesign.txt $SUITE_DIR/doc

touch $CONFIGURED/AUTOGENERATED.BY.CYLC
# DONE
