#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2011 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

from mkdir_p import mkdir_p
import os, re, sys
from shutil import copytree
from optparse import OptionParser
from registration import localdb, centraldb, regsplit, RegistrationError
from regprompt import prompt

parser = OptionParser( usage = """cylc [db] export [OPTIONS] SOURCE [TARGET]

Export private suite or group registrations to the central database. The central
database can be a reference to the owner's suite definition, or we can copy
the suite definition to [CentralDB]/owner/group/name/.

Arguments:
    SOURCE  - Private database suite registration GROUP:NAME
    TARGET  - Central database suite registration OWNER:GROUP:NAME""" )  

parser.add_option( "-c", "--copy",
        help="Copy the suite definition directory to the central database.",
        action="store_true", default=False, dest="copydir" )

( options, args ) = parser.parse_args()

if len(args) < 1 or len(args) > 2:
    parser.error('Wrong number of arguments')

local = localdb()
central = centraldb() 
owner = os.environ['USER']

source = args[0]
if len( args ) == 2:
    target = args[1]
else:
    target = source

m = re.match( '^(.*):$', source )
n = re.match( '^(.*):$', target )
if m:
    # export a whole group
    fromgroup = m.groups()[0]
    if n:
        togroup = n.groups()[0]
    else:
        raise SystemExit( 'Inconsistent command arguments' )

    # retrieve registrations
    local.load_from_file()
    try:
        lsuites = local.get_list( groupfilt='^' + fromgroup + '$' )
    except RegistrationError, x:
        raise SystemExit(x)

    print 'Matched:'
    for lsuite, ldir, ldescr in lsuites:
        lowner, lgroup, lname = regsplit( lsuite ).get()
        print '  ' + lgroup + ':' + lname

    # export to central
    try:
        central.lock()
    except RegistrationError, x:
        raise SystemExit(x)
    central.load_from_file()
    changed = False
 
    for lsuite, ldir, ldescr in lsuites:
        lowner, lgroup, lname = regsplit( lsuite ).get()
        cgroup = togroup
        cname = lname
        creg = lowner + ':' + cgroup + ':' + cname
        if options.copydir:
            cdir = os.path.join( central.dir, lowner, cgroup, cname )
        else:
            cdir = ldir
        try:
            central.register( creg, cdir, ldescr )
        except RegistrationError, x:
            print >> sys.stderr, x
        else:
            if not options.copydir:
                changed = True
            else:
                if os.path.exists( cdir ):
                    print >> sys.stderr, "Error, directory exists: " + cdir
                    central.unregister( creg )
                else:
                    try:
                        mkdir_p( os.path.dirname(cdir) )
                    except Exception,x:
                        print >> sys.stderr, x
                        central.unregister(creg)
                    else:
                        print 'Copying suite definition for', creg 
                        try:
                            copytree( ldir, cdir )
                        except OSError, x:
                            print >> sys.stderr,x
                            central.unregister( creg )
                        else:
                            changed = True
else:
    # single suite
    changed = False
    try:
        local.load_from_file()
        ldir, descr = local.get( source )
    except RegistrationError, x:
        print >> sys.stderr, x
    else:
        lowner, lgroup, lname = regsplit( source ).get()
        cowner, cgroup, cname = regsplit( target ).get()
        if options.copydir:
            cdir = os.path.join( central.dir, lowner, cgroup, cname )
        else:
            cdir = ldir
        try:
            central.lock()
            central.load_from_file()
            central.register( target, cdir, descr )
        except RegistrationError, x:
            print >> sys.stderr, x
            central.unlock()
        else:
            if not options.copydir:
                changed = True
            else:
                if os.path.exists( cdir ):
                    print >> sys.stderr, "Error, directory exists: " + cdir
                    central.unregister( target )
                else:
                    try:
                        mkdir_p( os.path.dirname(cdir) )
                    except Exception,x:
                        print >> sys.stderr, x
                        central.unregister(target)
                    else:
                        print 'Copying suite definition for', target 
                        try:
                            copytree( ldir, cdir )
                        except OSError, x:
                            print >> sys.stderr,x
                            central.unregister( target )
                        else:
                            changed = True
 
if changed:
    central.dump_to_file()
central.unlock()
