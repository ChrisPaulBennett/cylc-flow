#!/usr/bin/env python

import os, re, sys
from optparse import OptionParser
from registration import localdb, centraldb, unqualify, RegistrationError

parser = OptionParser( usage = """cylc [register] export [OPTIONS] [ARGUMENTS]

Export local suite registrations to the central database.

1/ cylc [register] export SOURCE
Export one suite under its own group and name.

2/ cylc [register] export SOURCE TARGET
Export one suite SOURCE (local) to TARGET (central).

3/ cylc [register] export [FILTER-OPTIONS]
Interactively export suites selected by filtering on group and name.

Arguments:
    SOURCE, TARGET   - registrations, GROUP:NAME or NAME (default group).""" )  

parser.add_option( "-g", "--group",
        help="Group filter Regular Expression.",
        metavar="RE", action="store", default=None, dest="groupfilt" )

parser.add_option( "-n", "--name",
        help="Name filter Regular Expression.",
        metavar="RE", action="store", default=None, dest="namefilt" )

( options, args ) = parser.parse_args()

if len(args) > 2:
    parser.error('Too many arguments')

local = localdb()
central = centraldb() 
owner = os.environ['USER']

if len(args) == 0:
    # interactive, filtered.

    # check for valid regular expressions:
    for filt in options.groupfilt, options.namefilt:
        if filt:
            try:
                re.compile( filt )
            except:
                raise SystemExit( 'Bad expression: ' + filt )

    local.load_from_file()
    suites = local.get_list( groupfilt=options.groupfilt, namefilt=options.namefilt )
    if len( suites ) == 0:
        raise SystemExit( "ERROR, No matching suites to export" )

    # organise into groups
    groups = {}
    for suite, dir, descr in suites:
        group, name = re.split( ':', suite )
        if group not in groups:
            groups[group] = [ ( name, dir, descr ) ]
        else:
            groups[group].append( (name, dir, descr))

    try:
        central.lock()
    except RegistrationError, x:
        raise SystemExit(x)
    central.load_from_file()
    changed = False
 
    # export to central
    changed = False
    for group in groups:
        cgroup = raw_input( "Export GROUP " + group + " as (default: same)? " )
        if cgroup == '':
            cgroup = group
        for name, dir, descr in groups[group]:
            cname = raw_input( "  Export NAME" + name  + " as (default: same)? " ) 
            if cname == '':
                cname = name
            try:
                central.register( cgroup + ':' + cname, dir, descr )
            except RegistrationError, x:
                print x
            else:
                changed = True

else:
    # single suite
    if options.groupfilt or options.namefilt:
        parser.error("Filtering does not apply to single suite export")

    source = args[0]
    if len( args ) == 2:
        target = args[1]
    else:
        target = source

    try:
        local.load_from_file()
        dir, descr = local.get( source )
    except RegistrationError, x:
        print x
    else:
        try:
            central.lock()
            central.load_from_file()
            central.register( target, dir, descr )
        except RegistrationError, x:
            changed = False
            print x
        else:
            changed = True

if changed:
    central.dump_to_file()
central.unlock()
