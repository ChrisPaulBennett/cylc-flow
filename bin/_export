#!/usr/bin/env python

import os, re, sys
from optparse import OptionParser
from registration import localdb, centraldb, regsplit, RegistrationError
from regprompt import prompt

parser = OptionParser( usage = """cylc [db] export [OPTIONS] LOCAL [CENTRAL]

Export local suite or group registrations to the central database.

Arguments:
    LOCAL, CENTRAL   - registrations, GROUP:NAME or NAME (default group).""" )  

( options, args ) = parser.parse_args()

if len(args) < 1 or len(args) > 2:
    parser.error('Wrong number of arguments')

local = localdb()
central = centraldb() 
owner = os.environ['USER']

source = args[0]
if len( args ) == 2:
    target = args[1]
else:
    target = source

m = re.match( '^(.*):$', source )
n = re.match( '^(.*):$', target )
if m:
    # group export a whole group
    fromgroup = m.groups()[0]
    if n:
        togroup = n.groups()[0]
    else:
        raise SystemExit( 'Inconsistent command arguments' )

    # retrieve registrations
    local.load_from_file()
    try:
        csuites = local.get_list( groupfilt='^' + fromgroup + '$' )
    except RegistrationError, x:
        raise SystemExit(x)

    print 'Matched:'
    for csuite, cdir, cdescr in csuites:
        cowner, cgroup, cname = regsplit( csuite ).get()
        print '  ' + cgroup + ':' + cname

    # export to central
    try:
        central.lock()
    except RegistrationError, x:
        raise SystemExit(x)
    central.load_from_file()
    changed = False
 
    for csuite, cdir, cdescr in csuites:
        cowner, cgroup, cname = regsplit( csuite ).get()
        lgroup = togroup
        lname = cname
        try:
            central.register( owner + ':' + lgroup + ':' + lname, cdir, cdescr )
        except RegistrationError, x:
            print >> sys.stderr, x
        else:
            changed = True
    if changed:
        central.dump_to_file()
    central.unlock()

else:
    # single suite
    try:
        local.load_from_file()
        dir, descr = local.get( source )
    except RegistrationError, x:
        print x
    else:
        try:
            central.lock()
            central.load_from_file()
            central.register( target, dir, descr )
        except RegistrationError, x:
            print x
            central.unlock()
        else:
            central.dump_to_file()
            central.unlock()
