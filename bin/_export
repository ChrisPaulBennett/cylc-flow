#!/usr/bin/env python

import os, re, sys
from optparse import OptionParser
from registration import localdb, centraldb, unqualify, RegistrationError

parser = OptionParser( usage = """cylc [register] export [FILTER options]

Export local suite registrations to the central database.""" )  

parser.add_option( "-g", "--group",
        help="Group filter Regular Expression.",
        metavar="RE", action="store", default=None, dest="groupfilt" )

parser.add_option( "-n", "--name",
        help="Name filter Regular Expression.",
        metavar="RE", action="store", default=None, dest="namefilt" )

( options, args ) = parser.parse_args()

if len(args) != 0:
    parser.error('Commandline error')

local = localdb()
central = centraldb() 

# check for valid regular expressions:
for filt in options.groupfilt, options.namefilt:
    if filt:
        try:
            re.compile( filt )
        except:
            raise SystemExit( 'Bad expression: ' + filt )

local.load_from_file()
suites = local.get_list( groupfilt=options.groupfilt, namefilt=options.namefilt )
if len( suites ) == 0:
    raise SystemExit( "ERROR, No matching suites to export" )

owner = os.environ['USER']
# organise into groups
groups = {}
for suite, dir, descr in suites:
    group, name = re.split( ':', suite )
    if group not in groups:
        groups[group] = [ ( name, dir, descr ) ]
    else:
        groups[group].append( (name, dir, descr))

try:
    central.lock()
except RegistrationError, x:
    raise SystemExit(x)
central.load_from_file()
 
# export to central
changed = False
for group in groups:
    cgroup = raw_input( "Export GROUP " + group + " as (default: same)? " )
    if cgroup == '':
        cgroup = group
    for name, dir, descr in groups[group]:
        cname = raw_input( "  Export NAME" + name  + " as (default: same)? " ) 
        if cname == '':
            cname = name
        try:
            central.register( cgroup + ':' + cname, dir, descr )
        except RegistrationError, x:
            print x
        else:
            changed = True

if changed:
    central.dump_to_file()
central.unlock()
