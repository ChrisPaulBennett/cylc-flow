#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2011 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os, sys
from cycle_time import ct, CycleTimeError
import cylc_pyro_client
from CylcOptionParsers import PromptOptionParser
from port_scan import SuiteIdentificationError

parser = PromptOptionParser( """cylc [control] stop|shutdown [options] SUITE [STOP]

1/ Shut down a suite when all currently running tasks have finished. 
   No other tasks will be submitted to run in the meantime.

2/ With [STOP], shut down a suite AFTER on of the following events:
    a/ all tasks have passed the cycle time STOP (YYYYMMDDHH)
    b/ the clock time has reached STOP (YYYY/MM/DD-HH:mm)
    c/ the task STOP (TASK%YYYYMMDDHH) has finished

3/ With [--now], shut down immediately, regardless of tasks still running.
   WARNING: beware of orphaning tasks that are still running at shutdown;
   these may need to be killed manually, and they will (by default) be
   resubmitted if the suite is restarted.

See also:
    cylc [control] start|run
    cylc [control] restart""", 
   [ """STOP                 YYYYMMDDHH (cycle time), or
                         YYYY/MM/DD-HH:mm (clock time), or
                          TASK%YYYYMMDDHH (task ID).""" ] )

parser.add_option( "--now", 
        help="Shut down immediately; see WARNING above.",
        action="store_true", default=False, dest="shutdownnow" )

(options, args) = parser.parse_args()

shutdown_at = False
if len( args ) == 2:
    shutdown_at = True
    shutdown_arg = args[1] 

suite = parser.get_suite_name()

try:
    proxy = cylc_pyro_client.client( suite ).get_proxy( 'remote' )
except SuiteIdentificationError, x:
    raise SystemExit(x)

method = None
if shutdown_at:
    # STOP argument detected
    try:
        ct(shutdown_arg)
    except CycleTimeError,x:
        try:
            # YYYY/MM/DD-HH:mm
            date, time = shutdown_arg.split('-')
            yyyy, mm, dd = date.split('/')
            HH,MM = time.split(':')
        except:
            try:
                name, ctime = shutdown_arg.split('%')
            except:
                parser.error( "invalid STOP argument: " + shutdown_arg )
            else:
                # STOP is a task ID
                # check valid ctime
                try:
                    ct(ctime)
                except CycleTimeError,x:
                    raise SystemExit(str(x))
                method = 'stop after task finishes'
        else:
            # STOP is a clock time
            method = 'stop after clock time'
    else:
        # STOP is a valid cycle time
        method = 'stop after cycle time'

    if not parser.prompt( 'Set shutdown ' + shutdown_arg + ' for'):
        sys.exit(0)

    result = proxy.set_stop( shutdown_arg, method )

elif options.shutdownnow:
    if not parser.prompt( 'Shut down NOW' ):
        sys.exit(0)
    result = proxy.shutdown_now()

else:
    if not parser.prompt( 'Shut down' ):
        sys.exit(0)
    result = proxy.shutdown()

if result.success:
    print result.reason
else:
    print 'ERROR:', result.reason
    sys.exit(1)
