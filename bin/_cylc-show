#!/usr/bin/env python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|

import re, sys
import cycle_time
from connector import connector
from CylcOptionParsers import NoPromptOptionParser_u
from Pyro.errors import NamingError

def print_heading( strng ):
        underline = re.sub( '.', '_', strng )
        print underline
        print strng

parser = NoPromptOptionParser_u( usage = """cylc show [options] SYSTEM 

Show task or system information.
 * If no task is specified, print the system description. 
 * If a task name is specified, print its description. 
 * If a task name and cycle time are specified, print the current state
of the task's prerequisites and outputs, and, for a contact task,
whether or not its delayed start time has been reached yet.""" )

parser.add_option( "-t", "--task",
        help="Task to describe; where TASK is NAME or NAME%YYYYMMHHDD.",
        metavar="TASK", action="store", dest="task" )

(options, args) = parser.parse_args()
 
sysname = parser.get_system_name()

try:
    god = connector( parser.get_pns_host(), parser.get_groupname(), 'remote' ).get()
except NamingError:
    print 'ERROR: system ' + args[0] + ' not running?'
    sys.exit(1)
except Exception, x:
    print 'ERROR: ', x
    sys.exit(1)

if not options.task:
    # print system information and exit
    ( title, sysdef_dir, username, info ) = god.get_sys_info()

    print title
    print ' * ' + username + ': ' + sysname + ' --> ' + sysdef_dir
    for item in info.keys():
        print ' + ' + item + ': ' +  info[item]

    print
    sys.exit(0)

name_only = False
try:
    name, cycle = options.task.split( '%' )
except:
    name = options.task
    name_only = True

# print task description
info = god.get_task_info( [ name ] )

print_heading( 'Task ' + name + ' in ' + sysname + ':' )
for name in info.keys():
    for line in info[name]:
        print '  ' + line

if name_only:
    sys.exit(0)

if not cycle_time.is_valid( cycle ):
    parser.error( "invalid cycle time: " + cycle )

id = options.task
result = god.get_task_requisites( [ id ] )

if id not in result:
    print "Task " + id + " not found in " + sysname
    sys.exit(1)

# PREREQUISTIES AND OUTPUTS

for id in result.keys():
    [ pre, out, extra_info ] = result[ id ]

    print_heading( id + ' prerequisites (- => not satisfied):')
    if len( pre ) == 0:
        print '  (None)'
    for item in pre:
        [ msg, state ] = item
        if state:
            descr = '  + '
        else:
            descr = '  - '
        print descr + msg

    print_heading( id + ' outputs (- => not completed):' )
    if len( out ) == 0:
        print '  (None)'
    for item in out:
        [ msg, state ] = item
        if state:
            descr = '  + '
        else:
            descr = '  - '
        print descr + msg

    if len( extra_info.keys() ) > 0:
        print_heading( 'Other:' )
        for item in extra_info:
            print '  o ', item, '...', extra_info[ item ]
