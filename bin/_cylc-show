#!/usr/bin/env python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|

import os, re, sys
import cycle_time
import cylc_pyro_client
from registration import registrations
from CylcOptionParsers import NoPromptOptionParser_u

def print_heading( strng ):
        underline = re.sub( '.', '_', strng )
        print underline
        print strng

parser = NoPromptOptionParser_u( """cylc show [options] SUITE [TASK NAME] [TASK ID]

Print suite information: title and task list, task descriptions, current
state of task prerequisites and outputs and, for contact tasks, whether
or not the delayed start time has been reached. For a suite that is not
running just the task list is printed.""",
["""TASK NAME            Name of a suite task class - print description.
   TASK ID              ID (NAME%YYYYMMDDHH) - also print prerequisites etc."""] )

(options, args) = parser.parse_args()

prnt_suite = False
prnt_name = False
prnt_id = False

if len(args) == 2:
    target = args[1]
    try:
        name, cycle = target.split( '%' )
    except ValueError:
        prnt_name = True
        name = target
    else:
        prnt_id = True
else:
    prnt_suite = True
 
suitename = parser.get_suite_name()

host = parser.get_pns_host()
group = parser.get_groupname()

try:
    god = cylc_pyro_client.client( host, group ).get_proxy( 'remote' )
except:
    suite_is_running = False
else:
    suite_is_running = True

if prnt_suite:
    # print suite information and exit

    if suite_is_running:
        ( title, suitedef_dir, username ) = god.get_suite_info()

        print title
        print ' * ' + username + ': ' + suitename + ' --> ' + suitedef_dir
        print

    # find location of the suite task and config modules
    reg = registrations()
    if reg.is_registered( suitename ):
        suite_dir = reg.get( suitename )
    else:
        reg.print_all()
        raise SystemExit( "suite " + suitename + " is not registered!" )
    
    # provide access to the suite source modules for THIS program---------
    sys.path.append( os.path.join( suite_dir, 'configured' ))
    from task_list import task_list

    print 'Suite tasks:'
    for task in task_list:
        print ' + ', task
    sys.exit(0)

# print task description
info = god.get_task_info( [ name ] )

print_heading( 'Task ' + name + ' in ' + suitename + ':' )
for name in info.keys():
    for line in info[name]:
        print '  ' + line

if prnt_name:
    sys.exit(0)

if not cycle_time.is_valid( cycle ):
    parser.error( "invalid cycle time: " + cycle )

id = target
result = god.get_task_requisites( [ id ] )

if id not in result:
    print "Task " + id + " not found in " + suitename
    sys.exit(1)

# PREREQUISTIES AND OUTPUTS

for id in result.keys():
    [ pre, out, extra_info ] = result[ id ]

    print_heading( id + ' prerequisites (- => not satisfied):')
    if len( pre ) == 0:
        print '  (None)'
    for item in pre:
        [ msg, state ] = item
        if state:
            descr = '  + '
        else:
            descr = '  - '
        print descr + msg

    print_heading( id + ' outputs (- => not completed):' )
    if len( out ) == 0:
        print '  (None)'
    for item in out:
        [ msg, state ] = item
        if state:
            descr = '  + '
        else:
            descr = '  - '
        print descr + msg

    if len( extra_info.keys() ) > 0:
        print_heading( 'Other:' )
        for item in extra_info:
            print '  o ', item, '...', extra_info[ item ]
