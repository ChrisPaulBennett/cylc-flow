#!/usr/bin/env python

# THIS FILE IS PART OF THE CYLC SUITE ENGINE.
# Copyright (C) 2008-2015 NIWA
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
from cylc.CylcOptionParsers import cop
import cylc.flags
from cylc.external_trigger import PyroClient
from cylc.command_prep import prep_pyro


parser = cop("""cylc [control] external-trigger [OPTIONS] ARGS

Report an external trigger event to a suite daemon.""",
    pyro=True,
    argdoc=[
        ("REG", "Suite name"),
        ("MSG", "external trigger message"),
        ("[ID]", "Optional arbitrary unique event ID")
    ]
)

parser.add_option( "--max-tries", 
        help="Max number of attempts to contact the suite "
        "(default %s)." % PyroClient.MAX_TRIES,
        metavar="INT", action="store", default=None, dest="max_tries")

parser.add_option( "--retry-delay", 
        help="Delay in seconds before attempting reconnection "
        "(default %s)." % PyroClient.RETRY_SECONDS,
        metavar="SEC", action="store", default=None, dest="retry_seconds")

parser.add_option( "--timeout", 
        help="Suite connection timeout in seconds "
        "(default %s)." % PyroClient.PYRO_TIMEOUT,
        metavar="SEC", action="store", default=None, dest="pyro_timeout")

(options, args) = parser.parse_args(remove_opts=["--pyro-timeout"])
cylc.flags.verbose = options.verbose

suite, pphrase = prep_pyro(args[0], options).execute()

event_id = None

if len(args) == 0 or len(args) > 3:
    parser.error("Wrong number of args")

event_id = None
if len(args) >= 2:
    event_msg = args[1]
if len(args) == 3:
    event_id = args[2]

PyroClient(
    suite, event_msg, options.host, options.owner, options.port,
    event_id, options.max_tries, options.pyro_timeout,
    options.retry_seconds).send()
