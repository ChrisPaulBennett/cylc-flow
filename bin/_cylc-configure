#!/bin/bash

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|


# Generate task class and config module for a particular cylc system

# TO DO: rewrite this in Python to allow long options '--help' etc., for
# consistency with other cylc commands.

set -e  # ABORT on error

function print_usage() 
{
	echo "usage: cylc configure [options] PATH"
    echo ""
    echo "Parse task definition files and generate system-specific Python modules"
    echo "in a cylc system definition directory (write permissions are required):"
    echo " - task_classes.py .................................. task class module"
    echo " - task_list.py ............... list of tasks to instantiate at startup"
    echo " - system_config.py ............... CUSTOMIZABLE configuration settings"
    echo " - system_info.py ......... CUSTOMIZABLE descriptive system information"
    echo " - job_submit_methods.py ....... CUSTOMIZABLE system job submit methods"
    echo ""
    echo "A system should be reconfigured if its taskdef files have been changed."
    echo "The customizable modules will NOT be overwritten on reconfiguration."
    echo ""
    echo "arguments:"
    echo "  PATH         Location of a cylc system definition directory."
    echo ""
    echo "options:"
    echo "  -h, --help   Print this usage message and exit."
    #echo "  -f           (force) overwrite any existing customizable modules."
}

# long options '--foo=bar' aren't supported by bash getopts
# but we need '--help' option to comply with 'cylc help'.
for OPT in $@; do
    if [[ $OPT == '--help' ]]; then
        print_usage
        exit 0
    fi
done

# DISABLED FORCE OPTION
# this default value will be retained
FORCE=false

#while getopts "hf" opt; do
while getopts "h" opt; do
    case $opt in
        h)
        print_usage
        exit 0
        ;;
        #f)
        #FORCE=true
        #;;
        *)
        exit 1
        ;;
    esac
done

shift $(( OPTIND -1 ))

if [[ $# == 1 ]]; then 
    # all args supplied
    SYS_DIR=$1
    if [[ $SYS_DIR != /* ]]; then
        # make absolute path
        SYS_DIR=$PWD/$SYS_DIR
        # remove trailing '/'
        SYS_DIR=${SYS_DIR%/}
    fi

else
    echo "WRONG NUMBER OF ARGS"
    print_usage
	exit 1
fi

# is SYS_DIR a cylc system definition directory?
_cylc-is-systemdir $SYS_DIR || exit 1

# move to the output location
cd $SYS_DIR

# bin/cylc checks that the cylc bin directory is accessible
CYLC=$(which cylc)
CYLC_DIR=${CYLC%/bin/cylc}

echo
echo "CONFIGURING CYLC SYSTEM $SYS_DIR"

echo
echo "Processing task definition files"

# if the command line gets too big we'll have to use xargs:
#    find taskdef -name '*.def' -o -name '*.py' | xargs _cylc-task-generator
# and modify task-generator.py so that it appends to the output
# task_classes.py file rather than overwriting it each time.

TASKDEFS=$( find $SYS_DIR/taskdef -name '*.def' -o -name '*.py' ) 

# generate task class module
_cylc-task-generator $TASKDEFS
echo "$SYS_DIR/task_classes.py"

# generate task list module
echo
echo "Generating the task list module"

cat > task_list.py <<eof
#/usr/bin/python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|

# LIST OF TASK NAMES (order irrelevant)
task_list = \\
    [
eof

for FILE in $TASKDEFS; do
    TASKNAME=$( _cylc-taskname < $FILE )
    echo "       '${TASKNAME}'," >> task_list.py
done

cat >> task_list.py <<eof
    ]
# END OF FILE
eof

echo "task_list.py"


echo
WRITE_CONFIG=true
if [[ -f system_config.py ]]; then
    echo "system config module already exists, "
    if ! $FORCE; then
        echo "NOT OVERWRITING in case of customization"
        WRITE_CONFIG=false
    else
        BACKUP=system_config.py.OLD.$$
        echo "OVERWRITING (backup: $BACKUP)"
        cp system_config.py $BACKUP
    fi
else
    echo "Generating the system config module"
fi

if $WRITE_CONFIG; then
cat > system_config.py <<eof
#!/usr/bin/python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|

# o SYSTEM CONFIG MODULE FOR THE CYLC SYSTEM DEFINITION DIRECTORY:
#  $PWD
# o REFER TO THE CYLC USER GUIDE FOR DOCUMENTATION OF CONFIG ITEMS. 
# o THIS FILE WAS AUTOGENERATED BY 'cylc configure' BUT WILL NOT
# BE OVERWRITTEN ON RECONFIGURATION UNLESS YOU FORCE IT. 

# Configured items are held in a dict (Python associative array): 
#   items[ 'item' ] = value.
# Note that some "values" are themselves lists or dicts.

from config import config
from task_list import task_list
from system_info import info
import logging  # for logging level
import os       # os.environ['HOME']

class system_config( config ):

    def __init__( self, sysname ):
        config.__init__( self, sysname )

        # system title
        # self.items[ 'system_title' ] = 'DEFAULT TITLE'

        # system task list
        self.items['task_list'] = task_list   # SEE task_list.py

        # list of legal startup hours, if this system is so restricted
        # e.g.: self.items['legal_startup_hours'] = [ 6 ]
        # or:   self.items['legal_startup_hours'] = [ 6, 18 ]

        # system info
        self.items['system_info']['info'] = info   # SEE system_info.py

        # add more descriptive information as you like, e.g.:
        # self.items[ 'system_info' ]['colours'] = 'red, blue, green'

        # task insertion groups, e.g:
        # self.items['task_groups']['foo'] = ['bar', 'baz']

        # default job submit method, e.g.:
        # self.items['job_submit_method'] = 'background2'

        # to override the default job submit method for specific tasks, e.g.:
        # self.items['job_submit_overrides']['background2'] = [ 'task1', 'task2' ]

        # environment variables available to all tasks, can include
        # the registered system name, e.g.:
        # user = os.environ['USER'] 
        # self.items['environment']['CYLC_TMPDIR'] = '/tmp/' + user + '/' + sysname

# END OF FILE
eof
fi
echo "system_config.py"

echo
WRITE_JOBSUB=true
if [[ -f job_submit_methods.py ]]; then
    echo "job_submit_methods module already exists, "
    if ! $FORCE; then
        echo "NOT OVERWRITING in case of customization"
        WRITE_JOBSUB=false
    else
        BACKUP=job_submit_methods.py.OLD.$$
        echo "OVERWRITING (backup: $BACKUP)"
        cp job_submit_methods.py $BACKUP
    fi
else
    echo "Writing the job submit methods module"
fi

if $WRITE_JOBSUB; then
cat > job_submit_methods.py <<eof
#!/usr/bin/python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|


from background import background
from background2 import background2
from background_remote import background_remote
eof
fi
echo "$SYS_DIR/job_submit_methods.py"

echo
WRITE_INFO=true
if [[ -f system_info.py ]]; then
    echo "system_info module already exists, "
    if ! $FORCE; then
        echo "NOT OVERWRITING in case of customization"
        WRITE_INFO=false
    else
        BACKUP=system_info.py.OLD.$$
        echo "OVERWRITING (backup: $BACKUP)"
        cp system_info.py $BACKUP
    fi
else
    echo "Writing the system info module"
fi

if $WRITE_INFO; then
cat > system_info.py <<eof
#!/usr/bin/python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|

info="""
REPLACE THIS WITH A DESCRIPTION OF YOUR SYSTEM, AND ANY ASPECTS OF IT
THAT ARE CONFIGURABLE VIA CYLC.
"""
eof
fi
echo "$SYS_DIR/system_info.py"
echo
