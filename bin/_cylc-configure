#!/bin/bash

# Generate task class and config module for a particular cylc system

# TO DO: rewrite this in Python to allow long options '--help' etc., for
# consistency with other cylc commands.

set -e  # ABORT on error

function print_usage() 
{
	echo "usage: cylc configure [options] PATH"
    echo ""
    echo "Generate the system-specific Python source modules required by cylc."
    echo "This only needs to be done after changing the task definition files." 
    echo ""
    echo "YOU MUST HAVE WRITE PERMISSION IN THE SYSTEM DEFINITION DIRECTORY"
    echo "because the configure process writes some Python modules into it:"
    echo " * system_tasks.py: task classes based on task definition files"
    echo " * config_defaults.py: default system configuration settings"
    echo " * config_override.py: a customizable config override module."
    echo " * job_submit.py: TO DO - EXPLAIN"
    echo ""
    echo "CUSTOMIZE system configuration settings in the config override"
    echo "module, NOT in the config defaults module - which gets overwritten"
    echo "when the system is reconfigured. An initial config override module"
    echo "will be created for you. The defaults module is written into the"
    echo "system definition directory, rather than hidden, in order to"
    echo "clearly expose all default settings that users can override."
    echo ""
    echo "arguments:"
    echo "  PATH            Location of a cylc system definition directory."
    echo ""
    echo "options:"
    echo "  -h, --help      Print this usage message and exit."
}

# cheap hack to get '--help', which isn't allowed by getopts
if [[ $1 == '--help' ]]; then
    print_usage
    exit 0
fi

while getopts "h" opt; do
    case $opt in
        h)
        print_usage
        exit 0
        ;;
    esac
done

shift $(( OPTIND -1 ))

if [[ $# == 1 ]]; then 
    # all args supplied
    SYS_DIR=$1
    if [[ $SYS_DIR != /* ]]; then
        # make absolute path
        SYS_DIR=$PWD/$SYS_DIR
        # remove trailing '/'
        SYS_DIR=${SYS_DIR%/}
    fi

else
    echo "WRONG NUMBER OF ARGS"
    print_usage
	exit 1
fi

# bin/cylc checks that the cylc bin directory is accessible
CYLC=$(which cylc)
CYLC_DIR=${CYLC%/bin/cylc}

cd $SYS_DIR

echo
echo "CONFIGURING CYLC SYSTEM $SYS_NAME"

echo
echo "Processing task definition files"

# if the command line gets too big we'll have to use xargs:
#    find taskdef -name '*.def' -o -name '*.py' | xargs _cylc-task-generator
# and modify task-generator.py so that it appends to the output
# system_tasks.py file rather than overwriting it each time.

TASKDEFS=$( find taskdef -name '*.def' -o -name '*.py' ) 

# generate task class code
_cylc-task-generator $TASKDEFS
echo " o $SYS_DIR/system_tasks.py"

echo
echo "Generating a default config module for the system"

cat > config_defaults.py <<eof
#!/usr/bin/python

# DEFAULT SYSTEM CONFIG MODULE FOR THE CYLC SYSTEM DEFINITION DIRECTORY:
#  $PWD

# REFER TO THE CYLC USER GUIDE FOR FULL DOCUMENTATION OF CONFIG ITEMS. 

# THIS FILE WAS AUTOGENERATED BY 'cylc configure'. You may want to
# comment tasks out of the task list in this file, to turn them off
# during incremental system testing, but BE AWARE THAT THIS FILE WILL BE
# OVERWRITTEN WHEN THE SYSTEM IS RECONFIGURED. Use the customizable
# module config_override.py to override default settings and set some
# additional config items ('task_groups', 'job_submit_overrides', and
# 'environment').

# Configured items are held in a dict (Python associative array): 
#   config[ 'item' ] = value.
# Note that some "values" are themselves lists or dicts.

import logging  # for logging level
import os       # os.environ['HOME']

# declare the main config container
config = {}

# LIST OF TASK NAMES (order irrelevant)
config['task_list'] = \\
    [
eof

for FILE in $TASKDEFS; do
    TASKNAME=$( _cylc-taskname < $FILE )
    echo "       '${TASKNAME}'," >> config_defaults.py
done

cat >> config_defaults.py <<eof
    ]

# DEFAULT JOB SUBMIT METHOD FOR THIS SYSTEM
# value is a string that is the name of a class imported into the
# job_submit_methods module in the system definition directory.
# You can override this for the whole system, and for individual tasks,
# in the system config override module.
config['job_submit_method'] = 'background'

# LOGGING AND STATE DUMP DIRECTORIES
# the registered system name will automatically be appended to these 
# so that multiple instances of this system can run without interference.
config['logging_dir'] = 'CYLC/logfiles'
config['state_dump_dir'] = 'CYLC/statedumps'

# MAXIMUM INTERVAL (IN CYCLE TIME) BETWEEN FASTEST AND SLOWEST TASKS
config['max_runahead_hours'] = 24

# LOG VERBOSITY
config['logging_level'] = logging.INFO
#config['logging_level'] = logging.DEBUG

# END OF FILE
eof

echo " o $SYS_DIR/config_defaults.py"

echo
if [[ ! -f config_override.py ]]; then
    echo "Writing an initial customizable config override module"
cat >> config_override.py <<eof
#!/usr/bin/python

import logging                           # DO NOT DELETE
import os                                # DO NOT DELETE

# THIS CUSTOMIZABLE MODULE CAN BE USED TO OVERRIDE THE CONFIGURATION
# SETTINGS IN config_defaults.py FOR THE SYSTEM DEFINITION DIRECTORY:
# $PWD
# IT CAN ALSO BE USED TO SET ADDITIONAL CONFIGURATION ITEMS THAT ARE
# NOT SET IN THE DEFAULTS MODULE: 
# 'task_groups', 'job_submit_overrides', and 'environment'.

# REFER TO THE CYLC USER GUIDE FOR FULL DOCUMENTATION OF CONFIG ITEMS. 

# You may want to consider adding this file to your system definition
# source repository, so that settings here are retained permanently.

# ITEMS THAT ARE SET IN THE DEFAULTS MODULE (add to these as you wish)
config = {}                              # DO NOT DELETE

# DEFAULT JOB SUBMIT METHOD FOR THIS SYSTEM
# value is a string that is the name of a class imported into the
# job_submit_methods module in the system definition directory, e.g.:
#config['job_submit_method'] = 'background2'

# ADDITIONAL ITEMS NOT SET IN THE DEFAULTS MODULE
config['task_groups'] = {}               # DO NOT DELETE
config['job_submit_overrides'] = {}      # DO NOT DELETE
config['environment'] = {}               # DO NOT DELETE

# TASK GROUPS
# Use to insert multiple tasks at once, via 'cylc control', into the
# running system. One use for this item is to group together all tasks
# needed to cold start the system's driving models after a failure that
# prevents continued warm cycling. E.g.:
#config['task_groups']['coldstart'] = [ 'task1', 'task2', 'task3' ]

# ENVIRONMENT VARIABLES FOR USE BY ALL TASKS IN THIS SYSTEM, e.g.:
#user_name = os.environ['USER'] 
#config['environment']['TMPDIR'] = '/tmp/' + user_name

# OVERRIDE THE DEFAULT JOB SUBMIT METHOD FOR SPECIFIC TASKS, e.g.:
# method names are strings that are the name of a class imported into
# the job_submit_methods module in the system definition directory,
# e.g.:
#config['job_submit_overrides']['background2'] = [ 'task1', 'task2' ]

# END OF FILE 
eof
else
    echo "A customiz(able|ed) config module already exists for this system:"
fi
echo " o $SYS_DIR/config_defaults.py"

echo
WRITE_JOBSUB=true
if [[ -f job_submit_methods.py ]]; then
    echo "job_submit_methods module already exists, "
    if ! $FORCE; then
        echo "NOT OVERWRITING in case of customization"
        WRITE_JOBSUB=false
    else
        BACKUP=job_submit_methods.py.OLD.$$
        echo "OVERWRITING (backup: $BACKUP)"
        cp job_submit_methods.py $BACKUP
    fi
else
    echo "Writing the job submit methods module"
fi

cat > job_submit_methods.py <<eof
#!/usr/bin/python

from background import background
from background2 import background2
from background_remote import background_remote
eof

echo " o $SYS_DIR/job_submit_methods.py"
echo
