#!/bin/bash

# given a cylc system definition directory:
#    system/user_config.py
#    system/taskdef/(task definition files)

# 1/ generate task class code for cylc
# 2/ generate system environment script 
#    + this exports PATH and PYTHONPATH, and 
#      CYLC_ENV (its own path) for system scripts
#      and CYLC_BIN for utility scripts
# 3/ copy cylc-task-wrapper from cylc/bin to system/scripts

set -e  # ABORT on error

function print_usage() 
{
	echo "Usage: cylc configure [options] [CYLC_PATH] SYS_PATH"
    echo ""
    echo "Configure a new system for scheduling, or reconfigure"
    echo "a system after changing its task definition files."
    echo "  SYS_PATH  ... top level system defintion directory"
    echo "  CYLC_PATH ... top level of your cylc installation"
    echo "              (can be omitted if you cd to CYLC_PATH)"
    echo ""
    echo "This generates a Python task module for your system and"
    echo "creates an environment script that provides access to it."
    echo ""
    echo "Options:"
    echo "  -h, --help    ... print this message and exit"
}

if [[ $1 == '-h' ]] || [[ $1 == "--help" ]]; then
    print_usage
    exit 0
fi

if [[ $# == 2 ]]; then 
    CYLC_TOP_DIR=$1
    CYLC_SYS_DIR=$2
elif [[ $# == 1 ]]; then
    CYLC_TOP_DIR=$PWD
    CYLC_SYS_DIR=$1
else
    print_usage
	exit 1
fi

CYLC=$CYLC_TOP_DIR/bin/cylc 
if [[ ! -f $CYLC ]]; then
	echo "ERROR: $CYLC not found!"
    print_usage
	exit 1
fi

CONFIG=$CYLC_SYS_DIR/user_config.py
if [[ ! -f $CONFIG ]]; then
    echo "File not found: $CONFIG"
    exit 1
fi

ENV_SCRIPT='cylc-env.sh'

TOPDIR=$CYLC_TOP_DIR
SYSDIR=$CYLC_SYS_DIR

# remove any trailing '/'
SYSDIR=${SYSDIR%/}
TOPDIR=$PWD

# access to cylc utilities and sub-commands for this script
PATH=$PWD/bin:$PATH

cd $SYSDIR

# extract system name from user_config.py
SYSNAME=$( egrep "^ *config\[ *'system_name" user_config.py  | sed -e "s/.*= *'//" | sed -e "s/'.*$//" )
echo
echo "Detected system name: $SYSNAME"

echo
echo "Processing task definition files ..."

# if the command line gets too big we'll have to use xargs:
#    find taskdef -name '*.def' -o -name '*.py' | xargs _cylc-task-generator
# and modify task-generator.py so that it appends to the output
# task_classes.py file rather than overwriting it each time.

_cylc-task-generator $( find taskdef -name '*.def' -o -name '*.py' ) 
echo "  => $SYSDIR/task_classes.py"
echo "done"


echo
echo -n "Installing $SYSDIR/scripts/cylc-task-wrapper ... "
mkdir -p $TOPDIR/$SYSDIR/scripts
cp $TOPDIR/bin/_cylc-task-wrapper $TOPDIR/$SYSDIR/scripts/cylc-task-wrapper
echo "done"

echo
echo -n "Generating environment script ... "

cat > $ENV_SCRIPT <<EOF
#!/bin/bash

# AUTO-GENERATED BY $0

# source this to set PATH and PYTHONPATH 
# for running cylc on system $SYSDIR

# clean existing cylc paths
      PATH=\$( $TOPDIR/bin/_cylc-clean-path \$PATH )
PYTHONPATH=\$( $TOPDIR/bin/_cylc-clean-path \$PYTHONPATH )

# not using \$HOME or relative path; may be sourced by other users
PATH=$TOPDIR/bin:$TOPDIR/$SYSDIR/scripts:\$PATH
PATH=\${PATH%:}  # in case variable was empty before
PYTHONPATH=$TOPDIR/src:$TOPDIR/src/task-classes:$TOPDIR/src/requisites:$TOPDIR/$SYSDIR:\$PYTHONPATH
PYTHONPATH=\${PYTHONPATH%:}  # in case was empty before
export PATH PYTHONPATH

# export my location as \$CYLC_ENV
export CYLC_ENV=$TOPDIR/$SYSDIR/$ENV_SCRIPT

# export cylc bin path for utility scripts
export CYLC_BIN=$TOPDIR/bin

echo "YOUR CYLC ENVIRONMENT IS NOW CONFIGURED FOR SYSTEM $SYSDIR"
EOF

echo "done"

echo
echo "SOURCE THE $SYSNAME ENVIRONMENT SCRIPT BEFORE RUNNING CYLC:"
echo ". $TOPDIR/$SYSDIR/cylc-env.sh"
echo
