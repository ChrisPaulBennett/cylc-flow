#!/bin/bash

# Generate task class and config module for a particular cylc system

# TO DO: rewrite this in Python to allow long options '--help' etc., for
# consistency with other cylc commands.

set -e  # ABORT on error

function print_usage() 
{
	echo "usage: cylc configure [options] PATH"
    echo ""
    echo "Generate task class and default config modules for a cylc system"
    echo "definition directory. This needs to be done once, initially, and"
    echo "then only after changing the system's task definition files." 
    echo ""
    echo "YOU MUST HAVE WRITE PERMISSION IN THE SYSTEM DEFINITION DIRECTORY"
    echo "because the configure process writes some Python modules into it:"
    echo " * A task class module based on the system task definition files"
    echo " * A default config module that can be customized if you like."
    echo ""
    echo "If you RE-configure a system, the existing config module will not"
    echo "be overwritten in case it has been customized, unless the '-f'"
    echo "option is used, in which case a backup will be made of the"
    echo "existing config file."
    echo ""
    echo "arguments:"
    echo "  PATH            A cylc system definition directory containing"
    echo "                  'taskdef' and 'scripts' sub-directories." 
    echo ""
    echo "options:"
    echo "  -h, --help      Print this usage message and exit"
    echo "  -f              Force: overwrite an existing system config file"
}

# cheap hack to get '--help', which isn't allowed by getopts
if [[ $1 == '--help' ]]; then
    print_usage
    exit 0
fi

FORCE=false
while getopts "hf" opt; do
    case $opt in
        h)
        print_usage
        exit 0
        ;;
        f)
        FORCE=true
        ;;
    esac
done

shift $(( OPTIND -1 ))

if [[ $# == 1 ]]; then 
    # all args supplied
    SYS_DIR=$1
    if [[ $SYS_DIR != /* ]]; then
        # make absolute path
        SYS_DIR=$PWD/$SYS_DIR
        # remove trailing '/'
        SYS_DIR=${SYS_DIR%/}
    fi

else
    echo "WRONG NUMBER OF ARGS"
    print_usage
	exit 1
fi

# bin/cylc checks that the cylc bin directory is accessible
CYLC=$(which cylc)
CYLC_DIR=${CYLC%/bin/cylc}

cd $SYS_DIR

echo
echo "CONFIGURING CYLC SYSTEM $SYS_NAME"

echo
echo "Processing task definition files"

# if the command line gets too big we'll have to use xargs:
#    find taskdef -name '*.def' -o -name '*.py' | xargs _cylc-task-generator
# and modify task-generator.py so that it appends to the output
# system_tasks.py file rather than overwriting it each time.

TASKDEFS=$( find taskdef -name '*.def' -o -name '*.py' ) 

# generate task class code
_cylc-task-generator $TASKDEFS
echo "=> $SYS_DIR/system_tasks.py"

echo
WRITE_CONFIG=true
if [[ -f system_config.py ]]; then
    echo "System config file already exists, "
    if ! $FORCE; then
        echo "NOT OVERWRITING in case of customization"
        WRITE_CONFIG=false
    else
        BACKUP=system_config.py.OLD.$$
        echo "OVERWRITING (backup: $BACKUP)"
        cp system_config.py $BACKUP
    fi
else
    echo "Writing the system config module"
fi

if $WRITE_CONFIG; then
    cat > system_config.py <<eof
#!/usr/bin/python

# THIS CYLC SYSTEM CONFIG MODULE WAS GENERATED BY 'cylc configure' FOR:
# $PWD

# Configured items are held in a single dict: config[ 'item' ] = value.
# REFER TO THE CYLC USER GUIDE FOR DOCUMENTATION OF CONFIGURABLE ITEMS. 
# Reconfiguring the system will not overwrite this unless you force it.

import logging  # for logging level
import os       # os.environ['HOME']

# declare associative arrays
config = {}
config['task_groups'] = {}
config['job_submit_overrides'] = {}
config['environment'] = {}

# LIST OF TASK NAMES (order irrelevant)
config['task_list'] = \\
    [
eof

    for FILE in $TASKDEFS; do
        TASKNAME=$( _cylc-taskname < $FILE )
        echo "       '${TASKNAME}'," >> system_config.py
    done

    cat >> system_config.py <<eof
    ]

# TASK GROUPS
# config['task_groups']['example'] = [ 'foo', 'bar', 'baz' ]

# JOB SUBMIT METHODS
config['job_submit_method'] = 'background'
# config['job_submit_overrides']['background2'] = [ 'foo', 'bar' ]

# LOGGING AND STATE DUMP DIRECTORIES
# the registered system name will automatically be appended to these 
# so that multiple instances of this system can run without interference.
config['logging_dir'] = 'CYLC/logfiles'
config['state_dump_dir'] = 'CYLC/statedumps'

# ENVIRONMENT VARIABLES THAT MAY BE USED BY TASKS IN THIS SYSTEM
user_name = os.environ['USER'] 
config['environment']['TMPDIR'] = '/tmp/' + user_name + '/junk'
config['environment']['FOO'] = 'foo'

# MAXIMUM INTERVAL (IN CYCLE TIME) BETWEEN FASTEST AND SLOWEST TASKS
config['max_runahead_hours'] = 24

# LOG VERBOSITY
config['logging_level'] = logging.INFO
#config['logging_level'] = logging.DEBUG

# END-OF-FILE
eof
fi
echo "=> $SYS_DIR/system_config.py"

echo
WRITE_JOBSUB=true
if [[ -f job_submit_methods.py ]]; then
    echo "job_submit_methods module already exists, "
    if ! $FORCE; then
        echo "NOT OVERWRITING in case of customization"
        WRITE_JOBSUB=false
    else
        BACKUP=job_submit_methods.py.OLD.$$
        echo "OVERWRITING (backup: $BACKUP)"
        cp job_submit_methods.py $BACKUP
    fi
else
    echo "Writing the job submit methods module"
fi

if $WRITE_CONFIG; then
    cat > job_submit_methods.py <<eof
#!/usr/bin/python

from background import background
from background2 import background2
from background_remote import background_remote
eof
fi
echo "=> $SYS_DIR/job_submit_methods.py"
echo
