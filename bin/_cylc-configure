#!/bin/bash

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|


# Generate task class and config module for a particular cylc suite

# TO DO: rewrite this in Python to allow long options '--help' etc., for
# consistency with other cylc commands.

set -e  # ABORT on error

function print_usage() 
{
	echo "Usage: cylc configure [options] PATH"
    echo ""
    echo "Create a ready-to-schedule suite from parsed task definition files."
    echo "A suite should be reconfigured if its taskdef files have changed."
    echo ""
    echo "This process generate suite-specific Python modules in the suite"
    echo "definition directory, so write permissions are required."
    echo " - tasks/TaskFoo.py,TaskBar.py ........................... task classes"
    echo " - task_classes.py ........................... imports all task classes"
    echo " - task_list.py ............... list of tasks to instantiate at startup"
    echo " - suite_config.py ............... CUSTOMIZABLE configuration settings"
    echo " - suite_info.py ......... CUSTOMIZABLE descriptive suite information"
    echo "The customizable files are generated for you the first time a suite is"
    echo "configured, subsequently, on reconfiguration, they are not overwritten."
    echo "To revert to default versions, delete the files before reconfiguring."
    echo ""
    echo "Arguments:"
    echo "  PATH         Location of a cylc suite definition directory."
    echo ""
    echo "Options:"
    echo "  -h, --help   Print this usage message and exit."
    echo "  -c           Clean: remove all autogenerated files and backups from"
    echo "               the specified cylc suite definition directory (but NOT"
    echo "               the customizable files)."
    #echo "  -f           (force) overwrite any existing customizable modules."
}

# long options '--foo=bar' aren't supported by bash getopts
# but we need '--help' option to comply with 'cylc help'.
for OPT in $@; do
    if [[ $OPT == '--help' ]]; then
        print_usage
        exit 0
    fi
done

# DISABLED FORCE OPTION
# this default value will be retained
FORCE=false

CLEAN=false

#while getopts "hf" opt; do
while getopts "hc" opt; do
    case $opt in
        h)
        print_usage
        exit 0
        ;;
        c)
        CLEAN=true
        ;;
        *)
        exit 1
        ;;
    esac
done

shift $(( OPTIND -1 ))

if [[ $# == 1 ]]; then 
    # all args supplied
    SUITE_DIR=$1
else
    echo "WRONG NUMBER OF ARGS"
    print_usage
	exit 1
fi

if [[ ! -d $SUITE_DIR ]]; then
    echo "Directory not found: $SUITE_DIR"
    exit 1
fi

if [[ $SUITE_DIR != /* ]]; then
    # make path absolute 
    SUITE_DIR=$PWD/$SUITE_DIR
    # remove trailing '/'
    SUITE_DIR=${SUITE_DIR%/}
fi

# is SUITE_DIR a cylc suite definition directory?
_cylc-is-suitedir $SUITE_DIR || exit 1

# move to the output location
cd $SUITE_DIR

# check that the cylc bin directory is accessible
CYLC=$(which cylc)
CYLC_DIR=${CYLC%/bin/cylc}

if $CLEAN; then
    echo
    echo "CLEANING CYLC SUITE $SUITE_DIR"

    # remove compiled python
    rm *.pyc
    # remove auto-generated files
    rm task_classes.py
    rm task_list.py
    rm -r tasks
    # remove task directory backups
    rm -r tasks.[0-9]*
    echo "Done"
    exit 0
fi

echo
echo "CONFIGURING CYLC SUITE $SUITE_DIR"

echo
echo "Processing task definition files"

# if the command line gets too big we'll have to use xargs:
#    find taskdef -name '*.def' -o -name '*.py' | xargs _cylc-taskdef
# and modify _cylc-taskdef so that it appends output to
# task_classes.py file rather than overwriting.

TASKDEFS=$( find $SUITE_DIR/taskdef -name '*.def' -o -name '*.py' ) 

# create task class output sub-dir if necessary
TASKDIR=$SUITE_DIR/tasks
if [[ -d $TASKDIR ]]; then
    BKP=${TASKDIR}.$$
    echo "Backing up existing task class directory to $BKP"
    cp -r $TASKDIR $BKP
    rm -rf $TASKDIR
fi

mkdir -p $TASKDIR

# generate task class module
_cylc-taskdef $TASKDIR $TASKDEFS
echo "$SUITE_DIR/task_classes.py"

# generate task list module
echo
echo "Generating the task list module"

cat > task_list.py <<eof
#/usr/bin/python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|

# LIST OF TASK NAMES (order irrelevant)
task_list = \\
    [
eof
OIFS=$IFS
IFS=$'\n'
for MOD in tasks/*.py; do
    echo -n "  $MOD"
    NAME=$( egrep '^ *name = ' $MOD )
    NAME=${NAME# *= }
    echo " ... $NAME"
    echo "       ${NAME}," >> task_list.py
done
IFS=$OIFS
cat >> task_list.py <<eof
    ]

task_list_shortnames = \\
    [
eof
OIFS=$IFS
IFS=$'\n'
for MOD in tasks/*.py; do
    SHORTNAME=$( egrep '^ *short_name = ' $MOD )
    SHORTNAME=${SHORTNAME# *= }
    echo "       ${SHORTNAME}," >> task_list.py
done
IFS=$OIFS
cat >> task_list.py <<eof
    ]
# END OF FILE
eof


echo "task_list.py"


echo
WRITE_CONFIG=true
if [[ -f suite_config.py ]]; then
    echo "suite config module already exists, "
    if ! $FORCE; then
        echo "NOT OVERWRITING in case of customization"
        WRITE_CONFIG=false
    else
        BACKUP=suite_config.py.OLD.$$
        echo "OVERWRITING (backup: $BACKUP)"
        cp suite_config.py $BACKUP
    fi
else
    echo "Generating the suite config module"
fi

if $WRITE_CONFIG; then
cat > suite_config.py <<eof
#!/usr/bin/env python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|

# REFER TO THE CYLC USER GUIDE FOR DOCUMENTATION OF CONFIG ITEMS. 
# THIS FILE WAS AUTOGENERATED BY 'cylc configure' BUT WILL NOT
# BE OVERWRITTEN ON RECONFIGURATION UNLESS YOU FORCE IT. 

# Configured items are held in a dict (Python associative array): 
#   items[ 'item' ] = value.
# Note that some "values" are themselves lists or dicts.

from config import config
from task_list import task_list, task_list_shortnames
from suite_info import info
import logging  # for logging level

class suite_config( config ):

    def __init__( self, suitename ):
        config.__init__( self, suitename )

        # suite title
        # self.items[ 'suite_title' ] = 'DEFAULT TITLE'

        # can multiple instances of this suite run at once?
        self.items[ 'allow_simultaneous_suite_instances' ] = False
 
        # suite task list
        self.items['task_list'] = task_list   # SEE task_list.py
        self.items['task_list_shortnames'] = task_list_shortnames   # SEE task_list.py

        # list of legal startup hours, if this suite is so restricted
        # e.g.: self.items['legal_startup_hours'] = [ 6 ]
        # or:   self.items['legal_startup_hours'] = [ 6, 18 ]

        # suite info
        self.items['suite_info']['info'] = info   # SEE suite_info.py

        # add more descriptive information as you like, e.g.:
        # self.items[ 'suite_info' ]['colours'] = 'red, blue, green'

        # task insertion groups, e.g:
        # self.items['task_groups']['foo'] = ['bar', 'baz']

        # Default job submit method for the suite. Available methods
        # are imported in src/job-submission/job_submit_methods.py.
        self.items['job_submit_method'] = 'background'
        #self.items['job_submit_method'] = 'at_now'

        # to override the default job submit method for specific tasks, e.g.:
        # self.items['job_submit_overrides']['at_now'] = [ 'task1', 'task2' ]

        # Environment variables available to all tasks. Values should be
        # strings and can include local environment variables, other
        # environment variables defined here, 'delayed evaluation'
        # environment variables (e.g. \$[HOME] => \${HOME} in the job
        # script, to be evaluated when the task executes) and the
        # registered suite name via the Python variable 'suitename':

        self.items['environment']['CYLC_TMPDIR'] = '/tmp/\$USER/' + suitename

# END OF FILE
eof
fi
echo "suite_config.py"

echo
WRITE_INFO=true
if [[ -f suite_info.py ]]; then
    echo "suite_info module already exists, "
    if ! $FORCE; then
        echo "NOT OVERWRITING in case of customization"
        WRITE_INFO=false
    else
        BACKUP=suite_info.py.OLD.$$
        echo "OVERWRITING (backup: $BACKUP)"
        cp suite_info.py $BACKUP
    fi
else
    echo "Writing the suite info module"
fi

if $WRITE_INFO; then
cat > suite_info.py <<eof
#!/usr/bin/env python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|

info="""
REPLACE THIS WITH A DESCRIPTION OF YOUR SUITE, AND ANY ASPECTS OF IT
THAT ARE CONFIGURABLE VIA CYLC.
"""
eof
fi
echo "$SUITE_DIR/suite_info.py"
echo
