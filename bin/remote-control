#!/usr/bin/python

import os
import sys
import pyrex
import Pyro.core
from optparse import OptionParser
from time import sleep

# construct a command line parser
parser = OptionParser( "%prog [options]" )

parser.add_option( "-p", "--pause", help="hold/pause system",
        action="store_true", default=False, dest="pause" )

parser.add_option( "-r", "--resume", help="unhold/resume system",
        action="store_true", default=False, dest="resume" )

parser.add_option( "-s", "--shutdown", help="shutdown system",
        action="store_true", default=False, dest="shutdown" )

parser.add_option( "-c", "--configured", help="use configured system",
        action="store_true", default=False, dest="use_configured" )

parser.add_option( "-n", "--name", help="system name",
        metavar="SYSTEM-NAME", action="store", dest="system_name" )

parser.add_option( "-k", "--kill", help="abdicate and kill a stuck task",
        metavar="TASK-ID", action="store", dest="kill_task_id" )

verbosity_choices = ['debug','info', 'warning', 'error', 'critical'] 

parser.add_option( "-v", "--verbosity",
        help="set verbosity: " + ', '.join(verbosity_choices),
        action="store", 
        choices=verbosity_choices,
        dest="verbosity" )

# NOTE: BUMP WON'T AFFECT DUMMY TASKS THAT ARE ALREADY RUNNING
parser.add_option( "-b", "--bump", help= "bump dummy clock forward (hours)",
        type="int", action="store", dest="bump_hours" )

#if len( sys.argv ) == 1:
#    # no options or args supplied
#    parser.print_help()
#    sys.exit(1)

# get command line options and positional args
( options, args ) = parser.parse_args()

#if len( args ) > 1:
#    parser.error( "incorrect number of arguments" )

# get systems currently registered in the Pyro nameserver
ns_groups = pyrex.discover()

if options.use_configured:
    # use the configured system
    import config
    config = config.config()
    config.load()
    system_name = config.get( 'system_name' )

elif options.system_name:
    # use the given system name
    system_name = options.system_name
    if ns_groups.registered( system_name ):
        print "system: " + system_name
    else:
        print "WARNING: no " + system_name + " registered yet ..." 
        ns_groups.print_info()
        sys.exit(1)

else:
    # print available systems and exit
    parser.print_help()
    print
    ns_groups.print_info()
    sys.exit(0)


try:
    # connect to the remote switch object in cycon
    control = Pyro.core.getProxyForURI('PYRONAME://' + system_name + '.' + 'remote_control' )
except:
    print "ERROR: failed to connect to control"
    raise

if options.pause:
    control.hold()

if options.resume:
    control.resume()

if options.shutdown:
    if control.get_config( 'dummy_mode' ):
        # pause to prevent new dummy tasks being launched after the pkill 
        control.hold()
        print 'pausing system ...'
        sleep(5)
        print 'killing any dummy tasks ...'
        # kill any running 'dummy_task's
        os.system( 'pkill -9 -u $USER dummy-task.py' )
        sleep(5)

    control.shutdown()

if options.verbosity:
    print "requesting verbosity " + options.verbosity
    control.set_verbosity( options.verbosity )

if options.kill_task_id:
    print "requesting abdicate and kill for " + options.kill_task_id
    print "WARNING: you may also need to manually kill the REAL stuck task"
    control.abdicate_and_kill( options.kill_task_id )

if options.bump_hours:
    try:
        dummy_clock = Pyro.core.getProxyForURI('PYRONAME://' + system_name + '.' + 'dummy_clock' )
    except:
        print "ERROR: failed to connect to the dummy clock"
        sys.exit(1)
    print "current time: " + str( dummy_clock.get_datetime() )
    print "bumped on to: " + str( dummy_clock.bump( options.bump_hours ))
