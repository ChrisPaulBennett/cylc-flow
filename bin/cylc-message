#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2012 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from optparse import OptionParser
from cylc.task_message import message
from Pyro.errors import NamingError

usage = """cylc [task] message [options]

This command is part of the cylc task messaging interface, by which
means running tasks communicate with their parent suite; it is used to
report registered outputs completed, and any general progress messages
(which will be logged by the suite).

Suite and task identity are determined from the task execution
environment supplied by the suite or by 'cylc [task] submit'. In the
latter case no communication occurs, but a message is printed to stdout.

See also:
    cylc [task] started
    cylc [task] succeeded
    cylc [task] failed"""

parser = OptionParser( usage )

parser.add_option( "-p",
        metavar="PRIORITY", type="choice", 
        choices=[ 'NORMAL', 'WARNING', 'CRITICAL' ],
        help="message priority: NORMAL, WARNING, or CRITICAL; default NORMAL.",
        action="store", dest="priority", default="NORMAL" )

parser.add_option( "--next-restart-completed",
        help="Report next restart file(s) completed",
        action="store_true", dest="next_restart_completed" )

parser.add_option( "--all-restart-outputs-completed", 
        help="Report all restart outputs completed at once.",
        action="store_true", dest="all_restarts_completed" )

parser.add_option( "--all-outputs-completed", 
        help="Report all internal outputs completed at once.",
        action="store_true", dest="all_outputs_completed" )

( options, args ) = parser.parse_args()

if options.next_restart_completed:
    message().shortcut_next_restart()
    sys.exit(0)

elif options.all_restarts_completed:
    message().shortcut_all_restarts()
    sys.exit(0)

elif options.all_outputs_completed:
    message().shortcut_all_outputs()
    sys.exit(0)

elif len( args ) == 0:
    parser.error( "No task message supplied" )

else:
    msg = ' '.join( args )
    try:
        message( msg, priority=options.priority ).send()
    except NamingError, x:
        print >> sys.stderr, 'ERROR: Failed to connect to task proxy.'
        raise SystemExit(x)
    except Exception, x:
        raise SystemExit(x)
