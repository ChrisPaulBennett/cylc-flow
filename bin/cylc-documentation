#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2012 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys, os, re
import subprocess
from optparse import OptionParser
from cylc.global_config import globalcfg

parser = OptionParser( """cylc [info] documentation|browse [OPTIONS]

This command provides easy access to cylc documentation. By default 
it just lists documentation file locations and URLs; use the command 
options to actually launch configured document viewers.""" )

globals = globalcfg()

# translate simplifed command option to globals.cfg['urls'] key:
doc_urls = {
        'www-homepage' : 'internet homepage',
        'www-index' : 'internet documentation index',
        'local-index' : 'local documentation index' }

# translate simplifed command option to globals.cfg['files'] key:
doc_files =  {
        'html-index' : 'html documentation index',
        'pdf' : 'pdf user guide',
        'html-multi' : 'multi-page html user guide',
        'html-single' : 'single-page html user guide' }

parser.add_option( "--file",
        help="Open the Cylc User Guide with a configured document viewer. "
        "DOC can be: " + ', '.join(doc_files.keys()) + ".", metavar='DOC',
        action="store", default=None, dest="viewfile" )

parser.add_option( "--url",
        help="Open a cylc documentation URL in the configured html viewer. "
        "DOC can be: " + ', '.join(doc_urls.keys()) + ".", metavar='DOC',
        action="store", default=None, dest="viewurl" )

( options, args ) = parser.parse_args()

if not options.viewfile and not options.viewurl:
    print 'Files:'
    for key, val, in doc_files.items():
        print '  ', val, '=', globals.cfg['files'][val]
    print 'URLs:'
    for key, val in doc_urls.items():
        print '  ', val, '=', globals.cfg['urls'][val]
    print "Use --file=DOC or --url=DOC to launch a document viewer"
    sys.exit(0)

if options.viewfile:
    if options.viewfile not in doc_files:
        parser.error( "ERROR, illegal --file value: " + options.viewfile )
    if options.viewfile.startswith('html'):
        viewer = globals.cfg['document viewers']['html']
    else:
        viewer = globals.cfg['document viewers']['pdf']
    target = globals.cfg['files'][ doc_files[options.viewfile] ]

elif options.viewurl:
    if options.viewurl not in doc_urls:
        parser.error( "ERROR, illegal --url value: " + options.viewurl )
    viewer = globals.cfg['document viewers']['html']
    target = globals.cfg['urls'][ doc_urls[options.viewurl] ]

if not target:
    print 'Sorry, this item has not been configured'
    sys.exit(0)

# viewer may have spaces (e.g. 'firefox --no-remote'):
command_list = re.split( ' ', viewer )
command_list.append( target )
command = ' '.join( command_list )
try:
    # THIS BLOCKS UNTIL THE COMMAND COMPLETES
    retcode = subprocess.call( command_list )
    if retcode != 0:
        # the command returned non-zero exist status
        raise SystemExit( command + ' failed: ' + str( retcode ))
except OSError:
    # the command was not invoked
    raise SystemExit( 'ERROR: unable to execute: ' + command )

