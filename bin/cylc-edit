#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2012 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os, re, sys
import datetime
from shutil import copy
import subprocess
from optparse import OptionParser
from collections import deque
from cylc.registration import dbgetter, RegistrationError
from cylc.mkdir_p import mkdir_p

included = []
modtimes = {}
backups = {}
newfiles = []

def cleanup( suitedir ):
    print 'CLEANUP REQUESTED, deleting:'
    for root, dirs, files in os.walk( suitedir ):
        for file in files:
            if re.search( '\.EDIT\..*$', file ):
                print ' + ' + re.sub( suitedir + '/', '', file )
                os.unlink( os.path.join( root, file ))

def include_files( inf, level=None ):
    # using globals here for commonality across recursive calls:
    global suitedir
    global included
    global modtimes
    outf = []
    if level == None:
        # suite.rc itself
        level = ''
        outf.append("""# !WARNING! CYLC EDIT INLINED (DO NOT MODIFY THIS LINE).
# !WARNING! This is an inlined suite.rc file; include-files are split
# !WARNING! out again on exiting the edit session.  If you are editing
# !WARNING! this file manually then a previous inlined session may have
# !WARNING! crashed; exit now and use 'cylc edit -i' to recover (this 
# !WARNING! will split the file up again on exiting).\n""")
    else:
        level += ' > '
    for line in inf:
        m = re.match( '\s*%include\s+(.*)\s*$', line )
        if m:
            match = m.groups()[0]
            # include statement found
            # strip off possible quotes: %include "foo.inc"
            match = match.replace('"','')
            match = match.replace("'",'')
            inc = os.path.join( suitedir, match )
            if inc not in included:
                # new include file detected
                # back up the original
                included.append(inc)
                backup( inc )
                # store original modtime
                modtimes[inc] = os.stat( inc ).st_mtime
                if os.path.isfile(inc):
                    #print " + inlining", inc
                    outf.append('#++++ START INLINED INCLUDE FILE ' + match  + ' (DO NOT MODIFY THIS LINE!)\n')
                    h = open(inc, 'rb')
                    inc = h.readlines()
                    h.close()
                    # recursive inclusion
                    outf.extend( include_files( inc, level ))
                    outf.append('#---- END INLINED INCLUDE FILE ' + match  + ' (DO NOT MODIFY THIS LINE!)\n')
                else:
                    raise SystemExit( "ERROR, Include-file not found: " + inc )
            else:
                outf.append(line)
        else:
            # no match
            outf.append(line)
    return outf

def split_file( lines, file, level=None ):
    global suitedir
    global modtimes
    global newfiles

    if level == None:
        # suite.rc itself
        level = ''
    else:
        level += ' > '
        # check mod time on the target file
        if not recovery:
            mtime = os.stat( file ).st_mtime
            if mtime != modtimes[file]:
                # oops - original file has changed on disk since we started editing
                f = re.sub( suitedir + '/', '', file )
                file = file + '.EDIT.NEW.' + datetime.datetime.now().isoformat()
        newfiles.append(file)

    inclines = []
    fnew = open( file, 'wb' )
    match_on = False
    for line in lines:
        if re.match( '^# !WARNING!', line ):
            continue
        if not match_on:
            m = re.match('^#\+\+\+\+ START INLINED INCLUDE FILE ([\w\/\.\-]+)', line )
            if m:
                match_on = True
                inc_filename = m.groups()[0]
                inc_file = os.path.join( suitedir, m.groups()[0] )
                fnew.write( '%include ' + inc_filename + '\n')
            else:
                fnew.write(line)
        elif match_on:
            # match on, go to end of the 'on' include-file
            m = re.match('^#\-\-\-\- END INLINED INCLUDE FILE ' + inc_filename, line )
            if m:
                match_on = False
                # now split this lot, in case of nested inclusions
                split_file( inclines, inc_file, level )
                # now empty the inclines list ready for the next inclusion in this file
                inclines = []
            else:
                inclines.append(line)
    if match_on:
        for line in inclines:
            fnew.write( line )
        print >> sys.stderr 
        print >> sys.stderr, "ERROR: end-of-file reached while matching include-file", inc_filename + "."
        print >> sys.stderr, """This probably means you have corrupted the inlined file by
modifying one of the include-file boundary markers. Fix the backed-
up inlined suite.rc file, copy it to 'suite.rc' and invoke another
inlined edit session split the file up again."""
        print >> sys.stderr 

def backup(src, tag='' ):
    if not os.path.exists(src):
        raise SystemExit( "File not found: " + src )
    bkp = src + tag + '.EDIT.' + datetime.datetime.now().isoformat()
    global backups
    copy( src, bkp )
    backups[ src ] = bkp

parser = OptionParser( """1/ cylc [prep] edit SUITE 
       2/ cylc [prep] edit -i,--inline SUITE
       3/ cylc [prep] edit --cleanup SUITE

This command facilitates editing of suite definitions (suite.rc files),
with optional reversible inlining of include-files. Note that suites 
requiring processing with a template engine such as Jinja2 can only 
be edited in unprocessed form, but the processed suite definition can be 
viewed using 'cylc [prep] view'.

1/ Change to the suite definition directory and load the suite.rc file
in your $EDITOR. This is a convenience so that you can edit the suite
without having to remember the suite definition location.

2/ Edit suite.rc files WITH INCLUDE-FILES INLINED between special
markers.  The real suite.rc file is temporarily replaced so that 
THE INLINED SUITE.RC FILE IS THE "LIVE" FILE DURING EDITING. The 
inlined suite.rc file gets split up again when you exit the
editor. Include-files can be nested or multiply-included; in the
latter case only the first inclusion is inlined (this serves to 
prevent conflicting changes being made to the same file).

3/ Remove backup files left by previous INLINED edit sessions.

INLINED EDITING SAFETY: The suite.rc file and its include-files are
automatically backed up prior to an inlined editing session. If the
editor dies mid-session just invoke 'cylc edit -i' again to recover from
the last saved inlined file. On exiting the editor, if any of the
original include-files are found to have changed due to external
intervention during editing you will be warned and the affected files
will be written to new backups instead of overwriting the originals.
Finally, the inlined suite.rc file is also backed up on exiting 
the editor, to allow recovery in case of accidental corruption of the
inlined include-file boundary marker lines.

The edit process is spawned in the foreground as follows:
  $(G)EDITOR suite.rc
$GEDITOR or $EDITOR, and $TMDPIR, must be in your environment. 

Examples:
   export EDITOR=vim
   export GEDITOR='gvim -f'      # -f: do not detach from parent shell!!
   export EDITOR='xterm -e vim'  # for gcylc, if gvim is not available
   export GEDITOR=emacs
   export EDITOR='emacs -nw'
You can set both $GEDITOR and $EDITOR to a GUI editor if you like, but
$GEDITOR at least *must* be a GUI editor, or an in-terminal invocation 
of a non-GUI editor, if you want to spawn editing sessions via gcylc.

Arguments:
  SUITE         Target suite.""")

parser.add_option( "--inline", "-i", 
        help="Edit with include-files inlined as described above.",
        action="store_true", default=False, dest="inline" )

parser.add_option( "--central",
        help="Target the central suite database.",
        action="store_true", default=False, dest="central" )

parser.add_option( "--cleanup",
        help="Remove backup files left by previous inlined edit sessions.",
        action="store_true", default=False, dest="cleanup" )

parser.add_option( "--gui", "-g", 
        help="Use GUI editor $GEDITOR instead of $EDITOR. This option is "
        "automatically used when an editing session is spawned by gcylc.",
        action="store_true", default=False, dest="geditor" )

( options, args ) = parser.parse_args()

if len(args) != 1:
    parser.error( "wrong number of arguments" )

reg = args[0]

if options.geditor:
    edvar = 'GEDITOR'
else:
    edvar = 'EDITOR'

try:
    editor = os.environ[edvar]
except KeyError:
    raise SystemExit( 'export $' + edvar + ' before using this command' )

# find location of the suite definition directory
global suitedir

dbg = dbgetter( options.central )
try:
    suite, suiterc = dbg.get_suite(reg)
except RegistrationError, x:
    raise SystemExit(x)

suitedir = os.path.dirname(suiterc)

if options.cleanup:
    # remove backup files left by inlined editing sessions
    cleanup( suitedir )
    sys.exit(0)

if not options.inline:
    # plain old editing.
    # move to suite def dir
    try:
        os.chdir( suitedir )
    except OSError, x:
        print >> sys.stderr, x
        sys.exit(1)

    # edit the suite.rc file
    if not os.path.isfile( suiterc ):
        print  >> sys.stderr, 'ERROR, file not found: ', suiterc
        sys.exit(1)
 
    # in case $EDITOR has options, e.g. 'emacs -nw':
    command_list = re.split( ' ', editor )
    command_list.append( suiterc )
    command = ' '.join( command_list )
    try:
        # THIS BLOCKS UNTIL THE COMMAND COMPLETES
        retcode = subprocess.call( command_list )
        if retcode != 0:
            # the command returned non-zero exist status
            print >> sys.stderr, command, 'failed:', retcode
            sys.exit(1)
    except OSError:
        # the command was not invoked
        print >> sys.stderr, 'ERROR: unable to execute:', command
        sys.exit(1)
 
    # !!!EDITING FINISHED!!!
    sys.exit(0)

# INLINED EDITING
try:
    tmpdir = os.environ['CYLC_TMPDIR']
except KeyError:
    print >> sys.stderr, "ERROR, undefined environment variable: $CYLC_TMPDIR"
    raise SystemExit

# create tmpdir if necessary
try:
    mkdir_p( tmpdir )
except Exception,x:
    print >> sys.stderr, x
    print >> sys.stderr, 'ERROR, illegal tmpdir?', tmpdir
    sys.exit(1)

# read the suite.rc file
if os.path.isfile( suiterc ):
    # back up the original
    backup( suiterc )
    # record original modtime
    modtimes[suiterc] = os.stat( suiterc ).st_mtime
    # read the file
    h = open( suiterc, 'rb' )
    lines0 = h.readlines()
    h.close()
    if lines0[0].startswith( '# !WARNING! CYLC EDIT INLINED' ):
        print 'WARNING: RECOVERING A PREVIOUSLY INLINED FILE'
        recovery = True
        lines = lines0
    else:
        recovery = False
        # inline any include files
        lines = include_files( lines0 )
else:
    parser.error("File not found: " + suiterc )

# overwrite the (now backed up) original with the inlined file:
h = open( suiterc, 'wb' )
h.writelines( lines )
h.close()

print 'PRE-EDIT BACKUPS:'
for file in backups:
    src = re.sub( suitedir + '/', '', file )
    dst = re.sub( suitedir + '/', '', backups[file] )
    print ' + ' + src + ' ---> ' + dst

# in case $EDITOR has options, e.g. 'emacs -nw':
command_list = re.split( ' ', editor )
command_list.append( suiterc )
command = ' '.join( command_list )
try:
    # THIS BLOCKS UNTIL THE COMMAND COMPLETES
    retcode = subprocess.call( command_list )
    if retcode != 0:
        # the command returned non-zero exist status
        print >> sys.stderr, command, 'failed:', retcode
        sys.exit(1)
except OSError:
    # the command was not invoked
    print >> sys.stderr, 'ERROR: unable to execute:', command
    sys.exit(1)
 
print 'EDITING DONE'

# Now back up the inlined file in case of absolute disaster, so as the
# user or his editor corrupting the inlined-include-file marker lines.
inlined_suiterc_backup = suitedir + '/suite.rc.INLINED.EDIT.' + datetime.datetime.now().isoformat()
copy( suiterc, inlined_suiterc_backup )

# read in the edited inlined file
h = open( suiterc, 'rb' )
lines = h.readlines()
h.close()

# split it back into separate files
split_file( lines, suiterc )

print ' + edited:', suiterc
print ' + backup:', inlined_suiterc_backup
print 'INCLUDE-FILES WRITTEN:'
for file in newfiles:
    f = re.sub( suitedir + '/', '', file )
    if re.search( '\.EDIT\.NEW\.', f ):
        print ' + ' + f + ' (!!! WARNING: original changed on disk !!!)'
    else:
        print ' + ' + f 

# DONE
