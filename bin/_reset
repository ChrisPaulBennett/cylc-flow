#!/usr/bin/env python

import os, sys
import cycle_time
import cylc_pyro_client
from CylcOptionParsers import PromptOptionParser
from port_scan import SuiteIdentificationError
from CylcError import CylcError

parser = PromptOptionParser( """cylc reset [options] SUITE TASK_ID

By default this command resets a task's state to 'ready' (i.e. all
prerequisites satisfied) which will cause it to trigger immediately
(unless the suite has been paused).

It can also reset a task to 'waiting' (i.e. prerequisites not yet
satisfied) or 'finished' (i.e. outputs completed).""",
[ 'TASK_ID              Identity of the task to reset (NAME%YYYYMMDDHH).'] )

parser.add_option( "--waiting", 
        help="Reset to 'waiting' state (prerequisites not satisfied).",
        action="store_true", default=False, dest="waiting" )

parser.add_option( "--finished", 
        help="Reset to 'finished' state (outputs completed).", 
        action="store_true", default=False, dest="finished" )

(options, args) = parser.parse_args()

if len(args) != 2:
    parser.error( "Suite name and task ID required." )

if options.waiting and options.finished:
    parser.error( "Specify waiting, finished, or neither (ready)" )

if options.waiting:
    state = 'waiting'
elif options.finished:
    state = 'finished'
else:
    state = 'ready'

task_id = args[1]

try:
    (name, cycle ) = task_id.split('%')
except ValueError:
    parser.error( "Task or Group ID must be NAME%YYYYMMDDHH")

if not cycle_time.is_valid( cycle ):
    parser.error( "invalid cycle time: " + cycle )

suite = parser.get_suite_name()
owner = os.environ['USER']
host = options.host
port = options.port

try:
    proxy = cylc_pyro_client.client( suite, owner, host, port ).get_proxy( 'remote' )
except SuiteIdentificationError, x:
    raise SystemExit(x)

if not parser.prompt( 'Reset task ' + task_id + ' in'):
    sys.exit(0)

result = proxy.reset_task_state( task_id, state )

if result.success:
    print result.reason
else:
    print 'ERROR:', result.reason
    sys.exit(1)
