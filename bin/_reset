#!/usr/bin/env python

import os, sys
import cycle_time
import cylc_pyro_client
from CylcOptionParsers import PromptOptionParser
from port_scan import SuiteIdentificationError
from CylcError import CylcError

parser = PromptOptionParser( """cylc reset [options] SUITE TASK

Force a task's state to:
 1/ 'ready' ...... all prerequisites satisfied (default) 
 2/ 'waiting' .... prerequisites not satisfied yet
 3/ 'finished' ... all outputs completed
 4/ 'failed' ..... use to test failure recovery scenarios
 
Resetting a task to 'ready' will cause it to trigger immediately unless
the suite is paused, in which case the task will trigger when normal
operation is resumed.

See also:
   cylc trigger
   cylc pause
   cylc resume""",
[ 'TASK              NAME%YYYYMMDDHH - the task to reset.'] )

parser.add_option( "--waiting", 
        help="Force task to the 'waiting' state.",
        action="store_true", default=False, dest="waiting" )

parser.add_option( "--finished", 
        help="Force task to 'finished' state.", 
        action="store_true", default=False, dest="finished" )

parser.add_option( "--failed", 
        help="Force task to 'failed' state.", 
        action="store_true", default=False, dest="failed" )

(options, args) = parser.parse_args()

if len(args) != 2:
    parser.error( "Suite name and task ID required." )

if [ options.waiting, options.finished, options.failed ].count( True ) != 1:
    parser.error( "Specify none or one of waiting, finished, or failed" )

if options.waiting:
    state = 'waiting'
elif options.finished:
    state = 'finished'
elif options.failed:
    state = 'failed'
else:
    state = 'ready'

task_id = args[1]

try:
    (name, cycle ) = task_id.split('%')
except ValueError:
    parser.error( "Task or Group ID must be NAME%YYYYMMDDHH")

if not cycle_time.is_valid( cycle ):
    parser.error( "invalid cycle time: " + cycle )

suite = parser.get_suite_name()
owner = os.environ['USER']
host = options.host
port = options.port

try:
    proxy = cylc_pyro_client.client( suite, owner, host, port ).get_proxy( 'remote' )
except SuiteIdentificationError, x:
    raise SystemExit(x)

if not parser.prompt( 'Reset task ' + task_id + ' in'):
    sys.exit(0)

result = proxy.reset_task_state( task_id, state )

if result.success:
    print result.reason
else:
    print 'ERROR:', result.reason
    sys.exit(1)
