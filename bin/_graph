#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2011 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os, re, sys
from time import sleep
from cylc.cycle_time import ct, CycleTimeError
import gtk
import gtk.gdk
import gobject
from optparse import OptionParser
from cylc import config
from cylc.registration import dbgetter, RegistrationError

# DEVELOPER NOTE: family grouping controls via the viewer toolbar and
# right-click menu have been rather hastily stuck on to the original
# viewer, via changes to this file and to lib/cylc/cylc_xdot.py - all
# of which could stand some refactoring to streamline the code a bit.

try:
    from cylc.cylc_xdot import MyDotWindow
except Exception, x:
    print >> sys.stderr, str(x)
    raise SystemExit( "Cylc graphing disabled" )

def on_url_clicked( widget, url, event, window ):
    if event.button != 3:
        return False
    # URL is node ID
    right_click_menu( event, url, type='live task', window=window )

def right_click_menu( event, task_id, type='live task', window=None ):
    name, ctime = task_id.split('%')

    menu = gtk.Menu()
    menu_root = gtk.MenuItem( task_id )
    menu_root.set_submenu( menu )

    group_item = gtk.MenuItem( 'Group' )
    group_item.connect( 'activate', grouping, name, window, False, False )
    ungroup_item = gtk.MenuItem( 'UnGroup' )
    ungroup_item.connect( 'activate', grouping, name, window, True, False )
    ungroup_rec_item = gtk.MenuItem( 'Recursive UnGroup' )
    ungroup_rec_item.connect( 'activate', grouping, name, window, True, True )

    title_item = gtk.MenuItem( task_id )
    title_item.set_sensitive(False)
    menu.append( title_item )

    menu.append( gtk.SeparatorMenuItem() )

    menu.append( group_item )
    menu.append( ungroup_item )
    menu.append( ungroup_rec_item )

    menu.show_all()
    menu.popup( None, None, None, event.button, event.time )

    # TO DO: popup menus are not automatically destroyed and can be
    # reused if saved; however, we need to reconstruct or at least
    # alter ours dynamically => should destroy after each use to
    # prevent a memory leak? But I'm not sure how to do this as yet.)

    return True

def grouping( w, name, window, un, recursive ):
    if not un:
        window.get_graph( group_nodes=[name] )
    else:
        if recursive:
            window.get_graph( ungroup_nodes=[name], ungroup_recursive=True )
        else:
            window.get_graph( ungroup_nodes=[name], ungroup_recursive=False )

parser = OptionParser( """1/ cylc [prep] graph [options] SUITE [START [STOP]]
     Plot the suite.rc dependency graph for SUITE.
       2/ cylc [prep] graph [options] -f,--file FILE
     Plot the specified dot-language graph file.

Plot cylc dependency graphs in a pannable, zoomable viewer.

The viewer updates automatically when the suite.rc file is saved during
editing. By default the full cold start graph is plotted; you can omit
cold start tasks with the '-w,--warmstart' option.  Specify the optional
initial and final cycle time arguments to override the suite.rc defaults.
If you just override the intitial cycle, only that cycle will be plotted.

GRAPH VIEWER CONTROLS:
    * Left-click to center the graph on a node.
    * Left-drag to pan the view.
    * Zoom buttons, mouse-wheel, or ctrl-left-drag to zoom in and out.
    * Shift-left-drag to zoom in on a box.
    * Also: "Best Fit" and "Normal Size".
  Family (namespace) grouping controls:
    Toolbar:
    * "group" - group all families up to root.
    * "ungroup" - recursively ungroup all families.
    Right-click menu:
    * "group" - close this node's parent family.
    * "ungroup" - open this family node.
    * "recursive ungroup" - ungroup all families below this node.

Arguments:
  SUITE   - Target suite. 
  START   - Initial cycle time to plot (default=2999010100)
  STOP    - Final cycle time to plot (default=2999010123)
  """)

#parser.add_option( "-l", "--live", 
#    help="Update image in real time if the source file changes. Otherwise "
#    "the user can hit the viewer Refresh button.  This option is OFF by "
#    "default because the graph will recenter when refreshed, which is "
#    "unhelpful if you are studying a panned, zoomed image.",
#    action="store_true", default=False, dest="updatelive" )

parser.add_option( "-w", "--warmstart", 
    help="Plot the mid-stream warm start graph (technically this is "
    "termed a 'raw start' in cylc).",
    action="store_true", default=False, dest="rawstart" )

parser.add_option( "-f", "--file", 
    help="View a specific dot-language graphfile.",
    metavar="FILE", action="store", default=None, dest="filename" )

parser.add_option( "-c", "--central", 
    help="Target the central database.",
    metavar="FILE", action="store_true", default=False, dest="central" )

parser.add_option( "-o", "--output", 
    help="Write an image file with format determined by file extension. "
    "The image will be rewritten automatically, for the configured "
    "(suite.rc) graph as you edit the suite. Available formats may "
    "include png, svg, jpg, gif, ps, ..., depending on your graphviz "
    "build; to see what's available specify a non-existent format "
    "and read the resulting error message.",
    metavar="FILE", action="store", default=None, dest="outputfile" )

( options, args ) = parser.parse_args()

view_file = False

if options.filename:
    if len(args) != 0:
        parser.error( 'file graphing arguments: \'-f FILE\' or \'--file=FILE\'' )
        sys.exit(1)
    view_file = True
    file = options.filename

if view_file:
    try:
        from xdot import DotWindow
    except:
        raise SystemExit( "Failed to import the xdot viewer.")
    window = DotWindow()
    try:
        window.update( file )
    except OSError, x:
        print >> sys.stderr, x
        sys.exit(1)
    window.connect( 'destroy', gtk.main_quit)
    #if options.updatelive:
    # checking periodically for file changed
    gobject.timeout_add(1000, window.update, file)
    gtk.main()
    sys.exit(0)

# parse and plot the suite.rc dependency graph
if len(args) < 1 or len(args) > 3:
    parser.error( "Argument list should be: SUITE [START [STOP]]" )

reg = args[0]

dbg = dbgetter( options.central )
try:
    suite, suiterc = dbg.get_suite(reg)
    # find all suite.rc include-files
    watchers = dbg.db.get_rcfiles( suite )
except RegistrationError, x:
    raise SystemExit(x)

start_ctime = None
stop = None

if len(args) > 1:
    # got START
    try:
        start_ctime = ct(args[1]).get()
    except CycleTimeError,x:
        raise SystemExit(x)

    if len(args) == 3:
        # got STOP
        try:
            stop_ctime = ct(args[2])
        except CycleTimeError,x:
            raise SystemExit(x)
        stop_delta = stop_ctime.subtract( ct(start_ctime) )
        # timedelta: days, seconds, microseconds; ignoring microseconds
        stop = stop_delta.days * 24 + stop_delta.seconds / 3600
    else:
        stop = 0

raw = False
if options.rawstart:
    raw = True

window = MyDotWindow( suite, suiterc, watchers, start_ctime, stop, raw, options.outputfile )

window.widget.connect( 'clicked', on_url_clicked, window )

#try:
window.get_graph()
#except config.SuiteConfigError, x:
#    raise SystemExit(x)
#window.connect( 'destroy', gtk.main_quit)

#if options.updatelive:
# checking periodically for file changed
gobject.timeout_add(1000, window.update)
gtk.main()
