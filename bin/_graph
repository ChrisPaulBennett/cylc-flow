#!/usr/bin/env python

import os
import sys
import gtk
import gtk.gdk
import gobject
from optparse import OptionParser

try:
    from graphing import xdot
except:
    raise SystemExit( "Graphing not available; install pygraphviz and xdot")

import config

class MyDotWindow( xdot.DotWindow ):
    """Override xdot to get rid of the Open and Refresh buttons"""

    ui = '''
    <ui>
        <toolbar name="ToolBar">
            <toolitem action="ZoomIn"/>
            <toolitem action="ZoomOut"/>
            <toolitem action="ZoomFit"/>
            <toolitem action="Zoom100"/>
        </toolbar>
    </ui>
    '''
    def __init__(self):
        gtk.Window.__init__(self)

        self.graph = xdot.Graph()

        window = self

        window.set_title('Suite Dependency Graph Viewer')
        window.set_default_size(512, 512)
        vbox = gtk.VBox()
        window.add(vbox)

        self.widget = xdot.DotWidget()

        # Create a UIManager instance
        uimanager = self.uimanager = gtk.UIManager()

        # Add the accelerator group to the toplevel window
        accelgroup = uimanager.get_accel_group()
        window.add_accel_group(accelgroup)

        # Create an ActionGroup
        actiongroup = gtk.ActionGroup('Actions')
        self.actiongroup = actiongroup

        # Create actions
        actiongroup.add_actions((
            ('ZoomIn', gtk.STOCK_ZOOM_IN, None, None, None, self.widget.on_zoom_in),
            ('ZoomOut', gtk.STOCK_ZOOM_OUT, None, None, None, self.widget.on_zoom_out),
            ('ZoomFit', gtk.STOCK_ZOOM_FIT, None, None, None, self.widget.on_zoom_fit),
            ('Zoom100', gtk.STOCK_ZOOM_100, None, None, None, self.widget.on_zoom_100),
        ))

        # Add the actiongroup to the uimanager
        uimanager.insert_action_group(actiongroup, 0)

        # Add a UI descrption
        uimanager.add_ui_from_string(self.ui)

        # Create a Toolbar
        toolbar = uimanager.get_widget('/ToolBar')
        vbox.pack_start(toolbar, False)

        vbox.pack_start(self.widget)

        self.set_focus(self.widget)

        self.show_all()

    def parse_graph( self, suite ):
        # re-parse the graph
        #print 'ullo'
        self.suite = suite
        cfg = config.config( suite )
        self.suite_file = cfg.get_filename()
        bar = cfg.get_coldstart_graphs()
        dotcode = bar[0].string()
        self.set_dotcode( dotcode )

    def update(self):
        # if suite config file has changed, re-parse the graph
        if not hasattr(self, "last_mtime"):
            self.last_mtime = None
        current_mtime = os.stat(self.suite_file).st_mtime
        if current_mtime != self.last_mtime:
            self.last_mtime = current_mtime
            self.parse_graph(self.suite)
        return True

if __name__ == '__main__':
    parser = OptionParser( """cylc graph SUITE 

Plot suite dependency graphs in a pannable, zoomable viewer.

By default, the graph configured in the suite config (suite.rc)
file [dependency graph] section will be plotted. The graph will
update automatically as you edit the suite.

You can also view the run-time dependency graph for the suite, 
which records resolved dependencies as the suite runs.

Arguments:
  SUITE   - registered name of the suite.""")

    parser.add_option( "-r", "--run-time", 
        help="View the run-time graph, if one has been generated.",
        action="store_true", default=False, dest="view_runtime" )

    ( options, args ) = parser.parse_args()

    if len(args) != 1:
        parser.error( "wrong number of arguments" )

    suite = args[0]

    suiterc = config.config( suite )
 
    if options.view_runtime:
        file = \
                os.path.join( suiterc['visualization']['run time graph directory'],
                              suiterc['visualization']['run time graph filename'] )
        window = xdot.DotWindow()
        try:
            window.update( file )
        except OSError, x:
            print x
            sys.exit(1)
        window.connect( 'destroy', gtk.main_quit)
        # checking for file changed not necessary for the run time graph:
        # gobject.timeout_add(1000, window.update, file)
        gtk.main()

    else:
        window = MyDotWindow()
        window.parse_graph( suite )
        window.connect( 'destroy', gtk.main_quit)
        gobject.timeout_add(1000, window.update)
        gtk.main()
