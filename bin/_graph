#!/usr/bin/env python

import os, re, sys
from time import sleep
import gtk
import gtk.gdk
import gobject
from optparse import OptionParser
import config

try:
    from cylc_xdot import MyDotWindow
except:
    raise SystemExit( "Graphing is not available; please install graphviz and pygraphviz.")

parser = OptionParser( """1/ cylc [prep] graph [options] SUITE START [STOP]
     Plot the configured (suite.rc) dependency graph for SUITE.
       2/ cylc [prep] graph [options] -r,--runtime SUITE
     Plot the run-time dependency graph for SUITE, if one has been generated.
       3/ cylc [prep] graph [options] -f,--file FILE
     Plot the specified dot-language graph file.

Plot cylc dependency graphs in a pannable, zoomable viewer.

For the configured (suite.rc) graph, the viewer updates automatically
when the suite.rc file is saved during editing. By default the full 
graph from coldstart is plotted; you can omit suite coldstart tasks
with the '-w,--warmstart' option. 

Arguments:
  SUITE   - Registered name of the suite.
  START   - Hour (HH) at which to start plotting.
  STOP    - Hours beyond START at which to stop plotting (default 6).
  """)
parser.add_option( "-w", "--warmstart", 
    help="Plot the raw start graph instead of cold start.",
    action="store_true", default=False, dest="rawstart" )

parser.add_option( "-f", "--file", 
    help="View a specific dot-language graphfile.",
    metavar="FILE", action="store", default=None, dest="filename" )

parser.add_option( "-r", "--runtime", 
    help="Plot the suite run-time graph, if one has been generated "
    "($CYLC_SUITE_DIR/graphing/runtime.dot).",
    action="store_true", default=False, dest="view_runtime" )

parser.add_option( "-c", "--centraldb", 
    help="Access the central suite database, rather than the local.",
    action="store_true", default=False, dest="central" )

parser.add_option( "-o", "--output", 
    help="Write an image file with format determined by file extension. "
    "The image will be rewritten automatically, for the configured "
    "(suite.rc) graph as you edit the suite. Available formats may "
    "include png, svg, jpg, gif, ps, ..., depending on your graphviz "
    "build; to see what's available specify a non-existent format "
    "and read the resulting error message.",
    metavar="FILE", action="store", default=None, dest="outputfile" )

( options, args ) = parser.parse_args()

view_file = False
if options.view_runtime:
    if len(args) != 1:
        parser.error( 'run-time graphing requires one argument (SUITE)' )
        sys.exit(1)
    view_file = True

    suite = args[0]
    try:
        suiterc = config.config( suite )
    except config.SuiteConfigError, x:
        print x
        sys.exit(1)
    file = os.path.join( suiterc['visualization']['run time graph directory'],
                          suiterc['visualization']['run time graph filename'] )
if options.filename:
    if len(args) != 0:
        parser.error( 'file graphing arguments: \'-f FILE\' or \'--file=FILE\'' )
        sys.exit(1)
    view_file = True
    file = options.filename

if view_file:
    window = xdot.DotWindow()
    try:
        window.update( file )
    except OSError, x:
        print x
        sys.exit(1)
    window.connect( 'destroy', gtk.main_quit)
    # checking for file changed not necessary for the run time graph:
    # gobject.timeout_add(1000, window.update, file)
    gtk.main()
    sys.exit(0)

# parse and plot the suite.rc dependency graph
if len(args) < 2 or len(args) > 3:
    parser.error( "suite.rc graphing requires args SUITE START [STOP]" )

suite = args[0]

hour = args[1]
if len(args) == 3:
    stop = args[2]
else:
    stop = 6

try:
    int(hour)
except ValueError:
    parser.error( "Illegal START hour (HH): " + hour )

try:
    int(stop)
except ValueError:
    parser.error( "Illegal STOP hours: " + stop )

raw = False
if options.rawstart:
    raw = True

# pad hour if necessary:
if len( hour ) == 1:
    hour = '0' + hour
elif len( hour ) > 2:
    parser.error( "Illegal START hour (HH): " + hour )

# fake a full cycle time
ctime = '29990101' + hour
window = MyDotWindow( suite, ctime, stop, raw, options.outputfile, options.central )
window.parse_graph()
window.connect( 'destroy', gtk.main_quit)
gobject.timeout_add(1000, window.update)
gtk.main()
