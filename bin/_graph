#!/usr/bin/env python

import os, re, sys
from time import sleep
import gtk
import gtk.gdk
import gobject
from optparse import OptionParser
from registration import registrations

try:
    from graphing import xdot
except:
    raise SystemExit( "Graphing not available; install pygraphviz and xdot")

import config

class MyDotWindow( xdot.DotWindow ):
    """Override xdot to get rid of the Open and Refresh buttons"""

    ui = '''
    <ui>
        <toolbar name="ToolBar">
            <toolitem action="ZoomIn"/>
            <toolitem action="ZoomOut"/>
            <toolitem action="ZoomFit"/>
            <toolitem action="Zoom100"/>
        </toolbar>
    </ui>
    '''
    def __init__(self, suite, ctime, stop_after, raw, outfile=None ):
        self.outfile = outfile
        self.disable_output_image = False
        self.suite = suite
        self.ctime = ctime
        self.raw = raw
        self.stop_after = stop_after

        gtk.Window.__init__(self)

        self.graph = xdot.Graph()

        window = self

        window.set_title('Suite Dependency Graph Viewer')
        window.set_default_size(512, 512)
        vbox = gtk.VBox()
        window.add(vbox)

        self.widget = xdot.DotWidget()

        # Create a UIManager instance
        uimanager = self.uimanager = gtk.UIManager()

        # Add the accelerator group to the toplevel window
        accelgroup = uimanager.get_accel_group()
        window.add_accel_group(accelgroup)

        # Create an ActionGroup
        actiongroup = gtk.ActionGroup('Actions')
        self.actiongroup = actiongroup

        # Create actions
        actiongroup.add_actions((
            ('ZoomIn', gtk.STOCK_ZOOM_IN, None, None, None, self.widget.on_zoom_in),
            ('ZoomOut', gtk.STOCK_ZOOM_OUT, None, None, None, self.widget.on_zoom_out),
            ('ZoomFit', gtk.STOCK_ZOOM_FIT, None, None, None, self.widget.on_zoom_fit),
            ('Zoom100', gtk.STOCK_ZOOM_100, None, None, None, self.widget.on_zoom_100),
        ))

        # Add the actiongroup to the uimanager
        uimanager.insert_action_group(actiongroup, 0)

        # Add a UI descrption
        uimanager.add_ui_from_string(self.ui)

        # Create a Toolbar
        toolbar = uimanager.get_widget('/ToolBar')
        vbox.pack_start(toolbar, False)

        vbox.pack_start(self.widget)

        self.set_focus(self.widget)

        self.show_all()

    def parse_graph( self ):
        #print 'ullo'
        # reparse the graph
        self.suiterc = config.config( self.suite )
        self.suitercfile = self.suiterc.get_filename()
        graph = self.suiterc.get_graph( self.ctime, self.stop_after, raw=self.raw )
        self.set_dotcode( graph.string() )
        if self.outfile and not self.disable_output_image:
            try:
                graph.draw( self.outfile, prog='dot' )
            except IOError, x:
                print x
                self.disable_output_image = True

    def update(self):
        # if suite config file has changed, reparse the graph
        if not hasattr(self, "last_mtime"):
            self.last_mtime = None

        while True:
            try:
                current_mtime = os.stat(self.suitercfile).st_mtime
            except OSError:
                # this happens occasionally when the file is being edited ... 
                print "Failed to get suite.rc file modification time, trying again in 1 second"
                sleep(1)
            else:
                break

        if current_mtime != self.last_mtime:
            self.last_mtime = current_mtime
            self.parse_graph()
        return True

if __name__ == '__main__':
    parser = OptionParser( """1/ cylc graph [options] SUITE START [STOP]
     Plot the configured (suite.rc) dependency graph for SUITE.
       2/ cylc graph [options] -r,--runtime SUITE
     Plot the run-time dependency graph for SUITE, if one has been generated.
       3/ cylc graph [options] -f,--file FILE
     Plot the specified dot-language graph file.

Plot cylc dependency graphs in a pannable, zoomable viewer.

For the configured (suite.rc) graph, the viewer updates automatically
when the suite.rc file is saved during editing. By default the full 
graph from coldstart is plotted; you can omit suite coldstart tasks
with the '-w,--warmstart' option. 

Arguments:
  SUITE   - Registered name of the suite.
  START   - Hour (HH) at which to start plotting.
  STOP    - Hours beyond START at which to stop plotting (default 6).
  """)
    parser.add_option( "-w", "--warmstart", 
        help="Plot the raw start graph instead of cold start.",
        action="store_true", default=False, dest="rawstart" )

    parser.add_option( "-f", "--file", 
        help="View a specific dot-language graphfile.",
        metavar="FILE", action="store", default=None, dest="filename" )

    parser.add_option( "-r", "--runtime", 
        help="Plot the suite run-time graph, if one has been generated "
        "($CYLC_SUITE_DIR/graphing/runtime.dot).",
        action="store_true", default=False, dest="view_runtime" )

    parser.add_option( "-o", "--output", 
        help="Write an image file with format determined by file extension. "
        "The image will be rewritten automatically, for the configured "
        "(suite.rc) graph as you edit the suite. Available formats may "
        "include png, svg, jpg, gif, ps, ..., depending on your graphviz "
        "build; to see what's available specify a non-existent format "
        "and read the resulting error message.",
        metavar="FILE", action="store", default=None, dest="outputfile" )

    ( options, args ) = parser.parse_args()

    view_file = False
    if options.view_runtime:
        if len(args) != 1:
            parser.error( 'run-time graphing requires one argument (SUITE)' )
            sys.exit(1)
        view_file = True

        suite = args[0]
        try:
            suiterc = config.config( suite )
        except config.SuiteConfigError, x:
            print x
            sys.exit(1)
        file = os.path.join( suiterc['visualization']['run time graph directory'],
                              suiterc['visualization']['run time graph filename'] )
    if options.filename:
        if len(args) != 0:
            parser.error( 'file graphing arguments: \'-f FILE\' or \'--file=FILE\'' )
            sys.exit(1)
        view_file = True
        file = options.filename

    if view_file:
        window = xdot.DotWindow()
        try:
            window.update( file )
        except OSError, x:
            print x
            sys.exit(1)
        window.connect( 'destroy', gtk.main_quit)
        # checking for file changed not necessary for the run time graph:
        # gobject.timeout_add(1000, window.update, file)
        gtk.main()

    else:
        # parse and plot the suite.rc dependency graph
        if len(args) < 2 or len(args) > 3:
            parser.error( "suite.rc graphing requires args SUITE START [STOP]" )

        suite = args[0]
        reg = registrations()
        if not reg.is_registered( suite ):
            reg.print_all()
            print >> sys.stderr, "ERROR: Suite " + suite + " is not registered"
            sys.exit(1)
 
        hour = args[1]
        if len(args) == 3:
            stop = args[2]
        else:
            stop = 6

        try:
            int(hour)
        except ValueError:
            parser.error( "Illegal START hour (HH): " + hour )

        try:
            int(stop)
        except ValueError:
            parser.error( "Illegal STOP hours: " + stop )

        raw = False
        if options.rawstart:
            raw = True

        # pad hour if necessary:
        if len( hour ) == 1:
            hour = '0' + hour
        elif len( hour ) > 2:
            parser.error( "Illegal START hour (HH): " + hour )

        # fake a full cycle time
        ctime = '29990101' + hour
        window = MyDotWindow( suite, ctime, stop, raw, options.outputfile )
        window.parse_graph()
        window.connect( 'destroy', gtk.main_quit)
        gobject.timeout_add(1000, window.update)
        gtk.main()
