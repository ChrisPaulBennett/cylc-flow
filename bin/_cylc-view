#!/usr/bin/env python

import os
import gtk
from optparse import OptionParser
from chooser import chooser
from registration import registrations
from preferences import prefs
from gtkmonitor import standalone_monitor, standalone_monitor_preload

import socket

if __name__ == "__main__":

    parser = OptionParser( """cylc view [options] [SYSTEM]

Display real time information about cylc systems, including the current
state of all tasks, scheduler log files, task stdout and stderr files, 
and task prerequisites and outputs. Note that the task state information
displayed comes from task proxy objects in the scheduler - how to
monitor the *real* tasks depends on the job submission method used.

If SYSTEM is supplied, a single monitor application will appear when
the named system starts up (or immediately, with --preload).

If SYSTEM is NOT supplied, you can select which system to monitor from 
an auto-updating list of currently running systems.

Cylc system monitors reconnect if left running while their target system
is shut down and restarted. 

SYSTEM                  Registered name of a cylc system""")

    parser.add_option( "--host",
            help="Pyro nameserver host (defaults to local host name).",
            metavar="HOSTNAME", action="store", default=socket.getfqdn(),
            dest="pns_host" )

    parser.add_option( "-u", "--user",
            help="Owner of the SYSTEM, if you are not the owner.",
            metavar="USERNAME", default=os.environ["USER"],
            action="store", dest="username" )

    parser.add_option( "-p", "--preload", 
            help="Load the task list from the system definition "
            "directory, so that a monitor can be displayed before the "
            "system starts up (normally the task list is acquired "
            " dynamically from a running systems via Pyro).",
            action="store_true", default=False, dest="preload" )

    ( options, args ) = parser.parse_args()

    pns_host = options.pns_host
    user = options.username
 
    if len( args ) == 0:
        use_chooser = True
        system = None
    elif len( args ) == 1:
        use_chooser = False
        system = args[0]
        group = ':cylc.' + user + '.' + system
    else:
        parser.error( "Wrong number of arguments" )


    rcfile = prefs( options.username )
    lamp_size = rcfile.get( 'view', 'lamp size' )
    image_subdir = '20px'
    if lamp_size == 'small':
        image_subdir = '10px'
    elif lamp_size == 'large':
        image_subdir = '20px'
 
    imagedir = os.environ[ 'CYLC_DIR' ] + '/images'

    if use_chooser:
        app = chooser( pns_host, imagedir, image_subdir )

    elif options.preload:
        # get system definition directory
        reg = registrations( options.username )
        if reg.is_registered( system ):
            system_dir = reg.get( system )
        else:
            reg.print_all()
            raise SystemExit( "System " + system + " is not registered!" )

        # get system logging directory
        logging_dir = rcfile.get_system_logging_dir( system )
        app = standalone_monitor_preload( group, system, system_dir, logging_dir, pns_host, imagedir, image_subdir )
    else:
        app = standalone_monitor( group, system, pns_host, imagedir, image_subdir )

    gtk.main()

