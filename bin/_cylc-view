#!/usr/bin/env python

import os
import gtk
from optparse import OptionParser
from chooser import chooser
from gtkmonitor import standalone_monitor

import socket

if __name__ == "__main__":

    parser = OptionParser( """cylc view [options]
       cylc view [options] SYSTEM

Start one or more real time cylc system monitors.

These display the current state of a system as reported by its task
proxy objects (how to monitor a *real* task depends on the job
submission method used), provide access to the scheduler logs and to
task stdout and stderr files, and allow you to view the current status
of each task's prerequisites and outputs. 

If a system name is supplied, a single system monitor will appear when
the named system starts up (if it hasn't already started).

If a system name is not supplied, you will be able to choose from a
list of running systems (which updates itself in real time).""")

    parser.add_option( "--host",
            help="Pyro nameserver host, defaults to local hostname. Use "
            "if not auto-detected (which depends on network config).", 
            metavar="HOSTNAME", action="store", default=socket.getfqdn(),
            dest="pns_host" )

    parser.add_option( "-u", "--user",
            help="Owner of the target system, defaults to $USER. "
            "Needed to infer the Pyro nameserver group name.",
            metavar="USERNAME", default=os.environ["USER"],
            action="store", dest="username" )

    ( options, args ) = parser.parse_args()

    pns_host = options.pns_host
    user = options.username
 
    if len( args ) == 0:
        use_chooser = True
        system = None
    elif len( args ) == 1:
        use_chooser = False
        system = args[0]
        group = ':cylc.' + user + '.' + system
    else:
        parser.error( "Wrong number of arguments" )

    imagedir = os.environ[ 'CYLC_DIR' ] + '/images'

    if use_chooser:
        app = chooser( pns_host, imagedir )
    else:
        app = standalone_monitor( group, system, pns_host, imagedir )

    gtk.main()

