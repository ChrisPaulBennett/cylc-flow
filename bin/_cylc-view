#!/usr/bin/env python

import os
import gtk
from optparse import OptionParser
from chooser import chooser
from registration import registrations
from preferences import prefs
from gtkmonitor import standalone_monitor, standalone_monitor_preload

import socket

if __name__ == "__main__":

    parser = OptionParser( """cylc view [options]
       cylc view [options] SYSTEM

Start one or more real time cylc system monitors.

These display the current state of a system as reported by its task
proxy objects (how to monitor a *real* task depends on the job
submission method used), provide access to the scheduler logs and to
task stdout and stderr files, and allow you to view the current status
of each task's prerequisites and outputs. 

If a system name is not supplied, a list of currently running systems,
which updates itself in real time, allows you to choose which systems to
monitor.

If a system name is supplied, a single system monitor will appear when
the named system starts up, if it hasn't already started.

A system monitor displays "NO CONNECTION" if the target system is yet 
to start up (or has shut down). It will connect when the system is
started (or restarted).""")

    parser.add_option( "--host",
            help="Pyro nameserver host, defaults to local hostname. Use "
            "if not auto-detected (which depends on network config).", 
            metavar="HOSTNAME", action="store", default=socket.getfqdn(),
            dest="pns_host" )

    parser.add_option( "-u", "--user",
            help="Owner of the target system, defaults to $USER. "
            "Needed to infer the Pyro nameserver group name.",
            metavar="USERNAME", default=os.environ["USER"],
            action="store", dest="username" )

    parser.add_option( "-d", help="(with SYSTEM) load the initial task "
            "list from the system definition directory.",
            action="store_true", default=False, dest="use_sysdir" )

    ( options, args ) = parser.parse_args()

    pns_host = options.pns_host
    user = options.username
 
    if len( args ) == 0:
        use_chooser = True
        system = None
    elif len( args ) == 1:
        use_chooser = False
        system = args[0]
        group = ':cylc.' + user + '.' + system
    else:
        parser.error( "Wrong number of arguments" )

    imagedir = os.environ[ 'CYLC_DIR' ] + '/images'

    if use_chooser:
        app = chooser( pns_host, imagedir )
    else:
        if options.use_sysdir:
            # get system definition directory
            reg = registrations()
            if reg.is_registered( system ):
                system_dir = reg.get( system )
            else:
                reg.print_all()
                raise SystemExit( "System " + system + " is not registered!" )

            # get system logging directory
            # TO DO: the usual --rcfile option
            rcfile = prefs()
            logging_dir = rcfile.get_system_logging_dir( system )
            app = standalone_monitor_preload( group, system, system_dir, logging_dir, pns_host, imagedir )
        else:
            app = standalone_monitor( group, system, pns_host, imagedir )

    gtk.main()

