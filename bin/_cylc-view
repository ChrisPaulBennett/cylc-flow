#!/usr/bin/env python

# example basictreeview.py

from logview import tailer
from stateview import updater

import gobject
import gtk
import pygtk
pygtk.require('2.0')
import time, os, re, sys
from CylcOptionParsers import NoPromptOptionParser_u
from connector import connector
import pyrex
from cycle_time import _rt_to_dt, is_valid

class CylcView:

    # visibility determined by state matching active toggle buttons
    def visible_cb(self, model, iter, col ):
        # set visible if model value NOT in filter_states
        # TO DO: WHY IS STATE SOMETIMES NONE?
        state = model.get_value(iter, col) 
        #print '-->', model.get_value( iter, 0 ), model.get_value( iter, 1 ), state, model.get_value( iter, 3 )
        if state:
            p = re.compile( r'<.*?>')
            state = re.sub( r'<.*?>', '', state )

        return state not in self.filter_states

    def check_filter_buttons(self, tb):
        del self.filter_states[:]
        for b in self.filter_buttonbox.get_children():
            if not b.get_active():
                self.filter_states.append(b.get_label())

        self.modelfilter.refilter()
        return

    # close the window and quit
    def delete_event(self, widget, event, data=None):
        gtk.main_quit()
        self.lt.quit = True
        self.jt.quit = True
        self.t.quit = True
        #print "BYE from main thread"
        return False

    def reset_logbuffer( self ):
        # clear log buffer iters and tags
        logbuffer = self.logview.get_buffer()
        s,e = logbuffer.get_bounds()
        logbuffer.remove_all_tags( s,e )
        self.find_current_iter = None
        self.find_current = None
 
    def replace_log( self, logfile ):
        self.logfile = logfile
        self.lt.quit = True
        logpath = self.logdir + '/' + self.logfile 
        logbuffer = self.logview.get_buffer()
        s,e = logbuffer.get_bounds()
        self.reset_logbuffer()
        logbuffer.delete( s, e )
        self.log_label.set_text( logpath ) 
        self.lt = tailer( gobject, self.logview, logpath )
        #print "Starting log viewer thread"
        self.lt.start()

    def switch_log( self, cb ):
        model = cb.get_model()
        index = cb.get_active()
        if index == 0:
            return False

        task = model[index][0]
        self.replace_log( task )

        return False

    def rotate_log( self, bt, go_older ):
        cur_log = self.logfile
        m = re.match( '(.*)\.(\d)$', cur_log ) 
        if m:
            level = int( m.groups()[1] )
            log_base = m.groups()[0]
        else:
            level = 0
            log_base = cur_log

        warn = False

        if go_older:
            level += 1
        else:
            level -= 1

        if level < 0:
            self.warning_dialog( "The newest (active) log is already displayed" )
            return

        if level == 0:
            new_log = log_base
        else:
            new_log = log_base + '.' + str( level )

        if new_log not in os.listdir( self.logdir ):
            self.warning_dialog( "No older log available" )
            return

        self.replace_log( new_log )

    def warning_dialog( self, msg ):
        dialog = gtk.MessageDialog( None,
                gtk.DIALOG_DESTROY_WITH_PARENT, gtk.MESSAGE_WARNING,
                gtk.BUTTONS_CLOSE, msg )
        dialog.run()
        dialog.destroy()

    def freeze_log( self, b ):
        # TO DO: HANDLE MORE STUFF IN THREADS LIKE THIS, RATHER THAN
        # PASSING IN ARGUMENTS?
        if b.get_active():
            self.lt.freeze = True
            b.set_label( 'UnFreeze' )
            self.reset_logbuffer()
        else:
            self.lt.freeze = False
            b.set_label( 'Freeze' )

        return False

    def about( self, bt ):
        about = gtk.AboutDialog()
        if gtk.gtk_version[1] >= 12:
            # set_program_name() was added in PyGTK 2.12
            about.set_program_name( "cylc" )
        about.set_version( cylc_version )
        about.set_copyright( "(c) Hilary Oliver, NIWA" )
        about.set_comments( 
"""
Cylc View is a real time system monitor for Cylc.
""" )
        about.set_website( "http://www.niwa.co.nz" )
        about.set_logo( gtk.gdk.pixbuf_new_from_file( imagedir + "/dew.jpg" ))
        about.run()
        about.destroy()

    def click_exit( self, foo ):
        gtk.main_quit()
        self.lt.quit = True
        self.jt.quit = True
        self.t.quit = True
        #print "BYE from main thread"
        return False

    def expand_all( self, widget, view ):
        view.expand_all()
 
    def collapse_all( self, widget, view ):
        view.collapse_all()

    def led_heading_toggle( self, b ):
        if self.led_heading_type == 2:
            self.led_heading_type = 0
            # no headings
            headings = ['Cycle Time' ] + ['-'] * len( self.task_list )

        elif self.led_heading_type == 0:
            # short name headings
            self.led_heading_type = 1
            headings = ['Cycle Time' ] + self.task_list_shortnames

        elif self.led_heading_type == 1:
            # long name headings
            self.led_heading_type = 2
            headings = ['Cycle Time' ] + self.task_list

        tvcs = self.led_treeview.get_columns()
        for n in range( 1,1+len( self.task_list) ):
            heading = headings[n]
            # underscores treated as underlines markup?
            #heading = re.sub( '_', ' ', heading )
            tvcs[n].set_title( headings[n] )

    def on_find_clicked( self, tv, e ):
        needle = e.get_text ()
        if not needle:
            return

        self.lt.freeze = True
        self.freeze_button.set_active(True)
        self.freeze_button.set_label('UnFreeze')
        if not self.search_warning_done:
            self.warning_dialog( "Find Next detaches the live log feed; click UnFreeze when you're done" ) 
            self.search_warning_done = True

        tb = tv.get_buffer ()

        if needle == self.find_current:
            s = self.find_current_iter
        else:
            s,e = tb.get_bounds()
            tb.remove_all_tags( s,e )
            s = tb.get_end_iter ()
            tv.scroll_to_iter( s, 0 )
        try:
            f, l = s.backward_search (needle, gtk.TEXT_SEARCH_TEXT_ONLY) 
        except:
            self.warning_dialog( '"' + needle + '"' + " not found" )
        else:
            tag = tb.create_tag( None, background="#70FFA9" )
            tb.apply_tag( tag, f, l )
            self.find_current_iter = f
            self.find_current = needle
            tv.scroll_to_iter( f, 0 )

    def create_led_treeview( self ):
        foo = tuple( [gtk.gdk.Pixbuf]* (10 + len( self.task_list)))
        led_liststore = gtk.ListStore( *foo )
        self.led_treeview = gtk.TreeView( led_liststore )
        ts = self.led_treeview.get_selection()
        ts.set_mode( gtk.SELECTION_NONE )

        tvc = gtk.TreeViewColumn( 'Cycle Time' )
        for i in range(10):
            cellpb = gtk.CellRendererPixbuf()
            cellpb.set_property( 'cell-background', 'black' )
            tvc.pack_start( cellpb, False )
            tvc.set_attributes( cellpb, pixbuf=i )

        self.led_treeview.append_column( tvc )

        # this doesn't show (brief flash of yellow at startup)
        # led_treeview.modify_base( gtk.STATE_NORMAL, gtk.gdk.color_parse( "yellow" ) )

        for n in range( 10, 10+len( self.task_list )):
            cell = gtk.CellRendererPixbuf()
            cell.set_property( 'cell_background', 'black' )
            cell.set_property( 'xalign', 0 )
            # replace heading underscores with spaces (they display as underline!)
            tvc = gtk.TreeViewColumn( "-"  )
            tvc.set_min_width( 20 )  # WIDTH OF LED PIXBUFS
            tvc.pack_end( cell, True )
            tvc.set_attributes( cell, pixbuf=n )
            self.led_treeview.append_column( tvc )

    def create_ct_treeview( self ):

        # For reasons unknown, filter before sorting screws up the 
        # treeview display here, but the other way around works.
        self.ttreestore = gtk.TreeStore(str, str, str )
        tmodelsort = gtk.TreeModelSort( self.ttreestore )
        tmodelsort.set_sort_column_id(0, gtk.SORT_ASCENDING)
        ttreeview = gtk.TreeView()
        ttreeview.set_model(tmodelsort)
        ts = ttreeview.get_selection()
        ts.set_mode( gtk.SELECTION_NONE )

        headings = ['task', 'state', 'latest message' ]

        for n in range(len(headings)):
            cell = gtk.CellRendererText()
            tvc = gtk.TreeViewColumn( headings[n], cell, markup=n )
            #tvc = gtk.TreeViewColumn( headings[n], cell, text=n )
            ttreeview.append_column(tvc)
            tvc.set_sort_column_id(n)
 
        return ttreeview

    def create_fl_treeview( self ):
        self.fl_liststore = gtk.ListStore(str, str, str, str)
        self.modelfilter = self.fl_liststore.filter_new()
        self.modelfilter.set_visible_func(self.visible_cb, 2)
        modelsort = gtk.TreeModelSort( self.modelfilter )
        modelsort.set_sort_column_id(0, gtk.SORT_ASCENDING)
        self.fl_treeview = gtk.TreeView()
        self.fl_treeview.set_model(modelsort)
        ts = self.fl_treeview.get_selection()
        ts.set_mode( gtk.SELECTION_NONE )

        headings = ['cycle', 'name', 'state', 'latest message' ]
        bkgcols = ['#def', '#fff', '#fff', '#fff' ]

        # create the TreeViewColumn to display the data
        for n in range(len(headings)):
            # add columns to treeview
            cell = gtk.CellRendererText()
            cell.set_property( 'cell-background', bkgcols[ n] )
            tvc = gtk.TreeViewColumn( headings[n], cell, markup=n )
            #tvc = gtk.TreeViewColumn( headings[n], cell, text=n )
            self.fl_treeview.append_column(tvc)
            tvc.set_sort_column_id(n)
            # add the cells to the columns
            #tvc.pack_start(cell, True)

            # set the cell attributes to the appropriate liststore column
            #self.fl_treeview.columns[n].set_attributes( cell, text=n)

        # make it searchable
        self.fl_treeview.set_search_column(1)

    def create_top_buttonbox( self ):
        topbuttonbox = gtk.HButtonBox()
        quit_button = gtk.Button( "Quit" )
        quit_button.connect("clicked", self.click_exit )
        #tooltips = gtk.Tooltips()
        #tooltips.set_tip( quit_button, "Exit cylc view" )
        topbuttonbox.set_layout( gtk.BUTTONBOX_END )
        about_button = gtk.Button( "About" )
        about_button.connect("clicked", self.about )
        led_heading_button = gtk.Button( "Toggle Task Name Headings" )
        led_heading_button.connect("clicked", self.led_heading_toggle )
        self.led_heading_type = 0

        topbuttonbox.add( about_button )
        topbuttonbox.add( quit_button )
        hbox1 = gtk.HBox()
        hbox1.pack_start( led_heading_button, False )
        hbox1.pack_end( topbuttonbox, False )
        return hbox1

    def create_task_logview( self ):
        jlogscroll = gtk.ScrolledWindow()
        jlogscroll.set_policy( gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC )
        self.jlogview = gtk.TextView()
        self.jlogview.modify_base( gtk.STATE_NORMAL, gtk.gdk.color_parse( "#afd" ) )
        jlogscroll.add( self.jlogview )
        self.jlogview.set_editable( False )
        jvbox = gtk.VBox()

        jsearch_hbox = gtk.HBox()
        e = gtk.Entry ()
        jsearch_hbox.pack_start (e, True)
        e.show () 
        b = gtk.Button ("Find Next")
        b.connect_object ('clicked', self.on_find_clicked, self.jlogview, e)
        jsearch_hbox.pack_start (b, False)

        jhbox = gtk.HBox()
        self.jlog_label = gtk.Label( "Job Log" )
        self.jlog_label.modify_fg( gtk.STATE_NORMAL, gtk.gdk.color_parse( "#f00" ))
        jhbox.pack_start( self.jlog_label, True )

        #self.jfreeze_button = gtk.ToggleButton( "Freeze" )
        #self.jfreeze_button.set_active(False)
        #self.jfreeze_button.connect("toggled", self.freeze_log )
        #hbox.pack_end( self.jfreeze_button, False )

        jvbox.pack_start( jlogscroll, True )
        jvbox.pack_start( jsearch_hbox, False )
        jvbox.pack_start( jhbox, False )
        return jvbox


    def create_info_bar( self ):
        user, name = groupname.split('^')

        self.label_status = gtk.Label( "status..." )
        self.label_mode = gtk.Label( "mode..." )
        self.label_time = gtk.Label( "time..." )
        self.label_sysname = gtk.Label( name )

        top_hbox = gtk.HBox()
        sysname_eb = gtk.EventBox()
        sysname_eb.add( self.label_sysname )
        sysname_eb.modify_bg( gtk.STATE_NORMAL, gtk.gdk.color_parse( '#d91212' ) ) 
        top_hbox.pack_start( sysname_eb, True )

        mode_eb = gtk.EventBox()
        mode_eb.add( self.label_mode )
        #self.label_mode.modify_fg( gtk.STATE_NORMAL, gtk.gdk.color_parse( '#f00' ))  
        #mode_eb.modify_bg( gtk.STATE_NORMAL, gtk.gdk.color_parse( '#aaa' ) )
        mode_eb.modify_bg( gtk.STATE_NORMAL, gtk.gdk.color_parse( '#ff7800' ) )
        top_hbox.pack_start( mode_eb, True )

        status_eb = gtk.EventBox()
        status_eb.add( self.label_status )
        #elf.self.label_status.modify_fg( gtk.STATE_NORMAL, gtk.gdk.color_parse( '#ff0' ))  
        #status_eb.modify_bg( gtk.STATE_NORMAL, gtk.gdk.color_parse( '#bbb' ) )
        status_eb.modify_bg( gtk.STATE_NORMAL, gtk.gdk.color_parse( '#dbd40a' ) )
        top_hbox.pack_start( status_eb, True )

        time_eb = gtk.EventBox()
        time_eb.add( self.label_time )
        #self.label_time.modify_fg( gtk.STATE_NORMAL, gtk.gdk.color_parse( '#f0f' ))  
        #time_eb.modify_bg( gtk.STATE_NORMAL, gtk.gdk.color_parse( '#ccc' ) )
        time_eb.modify_bg( gtk.STATE_NORMAL, gtk.gdk.color_parse( '#a7c339' ) )
        top_hbox.pack_start( time_eb, True )

        return top_hbox


    def __init__(self):
        window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        window.set_title("cylc view <" + groupname + ">" )
        window.modify_bg( gtk.STATE_NORMAL, gtk.gdk.color_parse( "#ddd" ))
        window.set_size_request(600, 500)
        window.connect("delete_event", self.delete_event)

        self.find_current = None
        self.find_current_iter = None
        self.search_warning_done = False

        # Get list of tasks in the system
        try:
            ss = connector( pns_host, groupname, 'state_summary' ).get()
        except Exception, x:
            print x
            raise

        self.task_list = ss.get_config( 'task_list' )
        shortnames = ss.get_config( 'task_list_shortnames' )

        temp = {}
        for t in range( len( self.task_list )):
            temp[ self.task_list[ t ] ] = shortnames[ t ]

        self.task_list.sort()
        self.task_list_shortnames = []
        for task in self.task_list:
            self.task_list_shortnames.append( temp[ task ] )
 
        # allow filtering out of 'finished' and 'waiting'
        all_states = [ 'waiting', 'submitted', 'running', 'finished', 'failed' ]
        # initially filter out only 'finished' tasks
        self.filter_states = [ 'finished' ]

        self.create_led_treeview()
        self.create_fl_treeview()
        ttreeview = self.create_ct_treeview()
        hbox1 = self.create_top_buttonbox()

        top_hbox = self.create_info_bar()


        vpaned = gtk.VPaned()
        vpaned.modify_bg( gtk.STATE_NORMAL, gtk.gdk.color_parse( '#d91212' ) )
  
        led_scrolledwindow = gtk.ScrolledWindow()
        led_scrolledwindow.set_policy( gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC )
        led_scrolledwindow.add( self.led_treeview )

        vpaned.add1( led_scrolledwindow )

        scrolledwindow = gtk.ScrolledWindow()
        scrolledwindow.set_policy( gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC )

        self.filter_buttonbox = gtk.HButtonBox()

        vbox = gtk.VBox()
        vbox.pack_start( scrolledwindow, True )
        vbox.pack_start( self.filter_buttonbox, False )

        notebook = gtk.Notebook()
        notebook.set_tab_pos(gtk.POS_TOP)
 
        label = gtk.Label("List")
        notebook.append_page( vbox, label )

        cycle_tree_scrolledwindow = gtk.ScrolledWindow()
        cycle_tree_scrolledwindow.set_policy( gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC )
        cycle_tree_scrolledwindow.add( ttreeview )

        vbox = gtk.VBox()
        bbox = gtk.HButtonBox()
        expand_button = gtk.Button( "Expand" )
        expand_button.connect( 'clicked', self.expand_all, ttreeview )
    
        collapse_button = gtk.Button( "Collapse" )
        collapse_button.connect( 'clicked', self.collapse_all, ttreeview )

        bbox.add( expand_button )
        bbox.add( collapse_button )
        bbox.set_layout( gtk.BUTTONBOX_END )

        vbox.pack_start( cycle_tree_scrolledwindow )
        vbox.pack_start( bbox, False )


        label = gtk.Label("Tree")
        notebook.append_page( vbox, label )

        for st in all_states:
            b = gtk.ToggleButton( st )
            self.filter_buttonbox.pack_start(b)
            if st in self.filter_states:
                b.set_active(False)
            else:
                b.set_active(True)
            b.connect('toggled', self.check_filter_buttons)

        self.filter_buttonbox.set_layout( gtk.BUTTONBOX_END )

        scrolledwindow.add( self.fl_treeview )

        vpaned.add2( notebook )

        logscroll = gtk.ScrolledWindow()
        logscroll.set_policy( gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC )
        self.logview = gtk.TextView()
        self.logview.modify_base( gtk.STATE_NORMAL, gtk.gdk.color_parse( "#fffaeb" ) )
        logscroll.add( self.logview )
        self.logview.set_editable( False )
        self.logdir = ss.get_config( 'logging_dir' ) 
        self.logfile = 'main'
        vbox = gtk.VBox()

        search_hbox = gtk.HBox()
        e = gtk.Entry ()
        search_hbox.pack_start (e, True)
        e.show () 
        b = gtk.Button ("Find Next")
        b.connect_object ('clicked', self.on_find_clicked, self.logview, e)
        search_hbox.pack_start (b, False)

        hbox = gtk.HBox()
        self.log_label = gtk.Label( self.logdir + '/' + self.logfile )
        self.log_label.modify_fg( gtk.STATE_NORMAL, gtk.gdk.color_parse( "#f00" ))
        hbox.pack_start( self.log_label, True )

        self.freeze_button = gtk.ToggleButton( "Freeze" )
        self.freeze_button.set_active(False)
        self.freeze_button.connect("toggled", self.freeze_log )
        hbox.pack_end( self.freeze_button, False )

        combobox = gtk.combo_box_new_text()
        combobox.append_text( 'Select Log' ) 
        combobox.append_text( 'main' ) 
        for task in self.task_list:
            combobox.append_text( task )

        combobox.connect("changed", self.switch_log )
        combobox.set_active(0)

        previous = gtk.Button( "newer rotation" )
        previous.connect("clicked", self.rotate_log, False )
        hbox.pack_end( previous, False )

        previous = gtk.Button( "older rotation" )
        previous.connect("clicked", self.rotate_log, True )
        hbox.pack_end( previous, False )

        hbox.pack_end( combobox, False )
 
        vbox.pack_start( logscroll, True )
        vbox.pack_start( search_hbox, False )
        vbox.pack_start( hbox, False )

        notebook.append_page( vbox, gtk.Label("Cylc Logs") )

        notebook.append_page( self.create_task_logview(), gtk.Label("Task Output") )

        bigbox = gtk.VBox()
        bigbox.pack_start( hbox1, False )
        bigbox.pack_start( top_hbox, False )
        bigbox.pack_start( vpaned, True )
        window.add( bigbox )

        window.show_all()

        self.t = updater( gobject, ss, imagedir, 
                self.led_treeview.get_model(), 
                self.fl_liststore,
                self.ttreestore, 
                self.task_list, 
                self.label_mode, self.label_status, self.label_time )

        cylc_main_log = self.logdir + '/' + self.logfile 
        self.lt = tailer( gobject, self.logview, cylc_main_log )

        a_logfile = '/home/oliverh/cylc/A-munge.log'
        self.jt = tailer( gobject, self.jlogview, a_logfile )

        #print "Starting task state info thread"
        self.t.start()
        #print "Starting log viewer thread"
        self.lt.start()
        #print "Starting job log viewer thread"
        self.jt.start()


if __name__ == "__main__":
    parser = NoPromptOptionParser_u( """cylc view [options] SYSTEM 

A monitor that displays the state of all tasks in a running system. 

THIS PROGRAM MONITORS TASK PROXY OBJECTS INSIDE THE SCHEDULER, NOT
EXTERNAL SYSTEM TASKS (how to do that obviously depends on the job
submission method used by each task).""")

    ( options, args ) = parser.parse_args()

    system_name = parser.get_system_name()
    pns_host = parser.get_pns_host()
    groupname = parser.get_groupname()

    # get systems currently registered in the Pyro nameserver
    #ns_groups = pyrex.discover( pns_host )

    if not pyrex.discover(pns_host).registered( groupname ):
        print "No " + groupname + " group registered with Pyro yet, waiting ..." 
        while True:
            time.sleep(1)
            if pyrex.discover( pns_host ).registered( groupname ):
                break

    imagedir = os.environ[ 'CYLC_DIR' ] + '/images'
    cylc_version = "X.Y.Z"

    gobject.threads_init()
    tvexample = CylcView()
    gtk.main()

