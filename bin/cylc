#!/usr/bin/python

import os
import sys
import subprocess

allowed_sub_commands = \
    [ 
    'configure',
    'scheduler', 
    'controller',
    'monitor'
    ]

# extract basename of the invoked command, so that we 
# can access sub-commands at first invocation, when the
# environment has not yet been configured for cylc.
invoked_name = sys.argv[0]
basename = os.path.basename( invoked_name )
dirname = os.path.dirname( invoked_name )
if dirname != '':
    dirname = dirname + '/'

usage = \
    [ 
    'Usage: ' + basename + ' [options] COMMAND [command-options] ',
    '',
    'Options:',
    '  -h, --help    ... print this message and exit',
    '',
    'Commands:',
    '  configure     ... configure a new system for scheduling', 
    '  scheduler     ... start scheduling the configured system',
    '  controller    ... control running cylc systems',
    '  monitor       ... monitor running cylc systems',
    '',
    'Command Options:',
    '  see ' + basename + ' COMMAND --help'
    ]

def print_usage():
    for line in usage:
        print line

if sys.argv[1] == "-h" or sys.argv[1] == "--help":
    print_usage()
    sys.exit(0)

try:
    sub_command = sys.argv[1]
    sub_command_options = sys.argv[2:]
except:
    print_usage()
    sys.exit(1)

if sub_command not in allowed_sub_commands:
    print_usage()
    sys.exit(1)

command = dirname + '_cylc-' + sub_command + ' ' + ' '.join( sub_command_options )
#print "(cylc sub-command: " + command + ")"

try:
    # use of shell=True here provides access to PATH in the subprocess
    retcode = subprocess.call( command, shell=True )
    if retcode < 0:
        # the sub-command returned non-zero exist status
        print >> sys.stderr, command + ' failed: ', retcode
        sys.exit(1)

except OSError:
    # the sub-command was not invoked
    print >> sys.stderr, 'CYLC ERROR: unable to run sub-command ' + sub_command
    print >> sys.stderr, "Is everything under your cylc bin directory executable?"
    print >> sys.stderr, "Have you run 'cylc-configure-system' yet?"
    sys.exit(1)
