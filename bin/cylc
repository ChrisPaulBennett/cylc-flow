#!/usr/bin/env python

from OrderedDict import OrderedDict
import os, re, sys
from execute import execute

# auto-replace with version tag at build/install:
cylc_version = "THIS IS NOT A VERSIONED RELEASE"

categories = \
     [
     'core',
     'other',
     'prep',
     'run',
     'info',
     'util',
     'task',
     'all',
     'locking',
     'security',
     ]

core_commands = \
    [
    'register',
    'edit',
    'graph',
    'search',
    'submit',
    'control',
    'coldstart',
    'warmstart',
    'restart',
    'pause',
    'resume',
    'stop',
    'insert',
    'remove',
    'purge',
    'ping',
    'scan',
    'list',
    'dump',
    'show',
    ]

locking_commands = \
    [
    'cylclockd',
    'lockserver',
    ]

security_commands = \
    [
    'block',
    'unblock',
     ]

util_commands = \
    [ 
    'cycletime',
    'checkvars',
    'template',
    'housekeeping',
    'file-transfer',
    ]

prep_commands = \
    [
    'register',
    'edit',
    'graph',
    'search',
    'inline',
    ]

run_commands = \
    [
    'control',
    'coldstart', 
    'warmstart', 
    'rawstart', 
    'restart',
    'pause',
    'resume',
    'stop',
    'insert',
    'reset',
    'remove',
    'purge',
    'block',
    'unblock',
    'verbosity',
    'submit',
    ]

info_commands = \
    [
    'ping',
    'scan',
    'list',
    'graph',
    'dump',
    'show',
    'log',
    'view',
    'monitor',
    ]

task_commands = \
    [
    'wrap',
    'task-started',
    'task-message',
    'task-finished',
    'task-failed',
    ]

# uniquify the 'all commands' list (some may reside in multiple categories)
allcom = OrderedDict()
for command in prep_commands + run_commands + info_commands + locking_commands + \
        security_commands + task_commands:
            allcom[ command ] = True
all_commands = allcom.keys()

other_commands = all_commands[:]
for command in core_commands:
    other_commands.remove( command )

general_usage = """
USAGE: cylc help
       cylc help CATEGORY
       cylc COMMAND --help
       cylc COMMAND [options] SUITE [arguments]"""

usage = """
This is the cylc metascheduler commandline interface.
""" + general_usage + """

  Main suite command CATEGORIES:
    core ....... essential commands
    other ...... other commands
    all ........ all commands
  Finer-grained categories: 
    prep ....... suite preparation and editing
    run ........ running and controlling suites
    info ....... getting information from suites
    task ....... task wrapping and messaging
    locking .... suite and task locking
    security ... suite security
  Other:
    util ....... utility commands

Cylc release version:
    $ cylc -v,--version

Main help (this page):
    $ cylc help,-h,-help,--help,?,-?
    """

if len(sys.argv) == 1:
    print >> sys.stderr, usage
    sys.exit(1)

prep_help = """
CATEGORY:prep - suite preparation and editing."""

run_help  = """
CATEGORY:run - running and controlling suites."""

info_help = """
CATEGORY:info - getting information from registered or running suites."""

core_help = """
CATEGORY:core - essential commands for preparing and running suites."""

other_help = """
CATEGORY:other - commands not in CATEGORY:core."""

security_help = """
CATEGORY:security - owner-only access, blocking, and secure passphrases.

Cylc commands allow only the suite owner to intervene in a running suite.

Suite blocking guards against inadvertent intervention in your own suites.
 + SUITE.RC: use suite blocking = True

A secure passphrase prevents other users from accessing your suite even
if they hack command source code to subvert the owner-only restriction.
 + SUITE.RC: use secure passphrase = True

The passphrase must be stored in $HOME/.cylc/security/[SUITE_NAME] with
private file permissions, or cylc will refuse to run the suite. If your
suite contains tasks that run on a remote host or under another
username, those accounts must also hold the passphrase. The passphrase
is never sent across the network; a secure md5 checksum is exchanged."""

locking_help = """
CATEGORY:locking - the cylc lockserver daemon and its user interface."""

task_help = """
CATEGORY:task - task wrapping and messaging""" 

util_help = """
CATEGORY:util - utility commands designed for use with cylc."""

all_help = "The complete cylc command set."

# command summaries
comsum = {}
comsum[ 'register'  ] = 'Manage suite registrations (name -> definition dir)'
comsum[ 'cylclockd' ] = 'The cylc lockserver daemon'
comsum[ 'search'    ] = 'An intelligent search tool for cylc suites'
comsum[ 'graph'     ] = 'A dependency graph viewer that updates as you edit'
comsum[ 'inline'    ] = 'View suite.rc files with include-files inlined'
comsum[ 'edit'      ] = 'Edit a suite config file, optionally inlined'
comsum[ 'coldstart' ] = 'Cold start a suite at a given cycle time'
comsum[ 'warmstart' ] = 'Warm start a suite at a given cycle time'
comsum[ 'rawstart'  ] = 'Raw start a suite at a given cycle time'
comsum[ 'restart'   ] = 'Restart a suite from a previous state'
comsum[ 'stop'      ] = 'Shut down a running suite (now or later)'
comsum[ 'pause'     ] = 'Pause a running suite (stop submitting tasks)'
comsum[ 'resume'    ] = 'Unpause a running suite (resume submitting tasks)'
comsum[ 'block'     ] = 'Do not comply with subsequent intervention commands'
comsum[ 'unblock'   ] = 'Do comply with subsequent intervention commands'
comsum[ 'insert'    ] = 'Insert a task or group into a running suite'
comsum[ 'reset'     ] = 'Force a task to change state (manual triggering!)'
comsum[ 'remove'    ] = 'Remove tasks from a running suite'
comsum[ 'purge'     ] = 'Remove a full dependency tree from a running suite'
comsum[ 'submit'    ] = 'Submit a single task exactly as the suite would'
comsum[ 'control'   ] = 'Suite control and monitoring GUI'
comsum[ 'view'      ] = 'Suite monitoring GUI (control functions disabled)'
comsum[ 'dump'      ] = 'Print the state of each task in a running suite'
comsum[ 'show'      ] = 'Retrieve information from a running suite'
comsum[ 'list'      ] = 'Print a suite\'s configured task list'
comsum[ 'ping'      ] = 'Check that a named suite is running'
comsum[ 'scan'      ] = 'Scan cylc ports for running suites'
comsum[ 'log'       ] = 'Print or view suite logs, with filtering'
comsum[ 'monitor'   ] = 'An in-terminal suite monitor (deprecated)'
comsum[ 'lockserver'] = 'Lockserver interrogation and lock management'
comsum[ 'verbosity' ] = 'Change a suite\'s logging verbosity level'
comsum[ 'cycletime' ] = 'Cycle time arithmetic'
comsum[ 'checkvars' ] = 'Process required environment variables en masse'
comsum[ 'template'  ] = 'Cycle time based filename templating'
comsum[ 'housekeeping' ] = 'Cycle time based parallel archiving and cleanup'
comsum[ 'file-transfer'] = 'An scp-based file transfer tool'
comsum[ 'wrap'         ] = 'A wrapper for running non-cylc-aware tasks'
comsum[ 'task-started' ] = 'Acquire a task lock and report started'
comsum[ 'task-message' ] = 'Report completion of outputs, etc.'
comsum[ 'task-finished'] = 'Release task lock and report finished'
comsum[ 'task-failed'  ] = 'Release task lock and report failure'
 
# check that the cylc core modules are accessible
try:
    import scheduler
except:
    print >> sys.stderr, "ERROR: the cylc core modules are not accessible to Python"
    print >> sys.stderr, "SOLUTION: source $CYLC_DIR/cylc-env.sh in your shell." 
    sys.exit(1)

# main help
if len( sys.argv ) == 2 and \
        (sys.argv[1] == '-h' or \
        sys.argv[1] == '--help' or \
        sys.argv[1] == '-help' or \
        sys.argv[1] == 'help' or \
        sys.argv[1] == '?' or \
        sys.argv[1] == '-?'):
    print usage
    sys.exit(0)

# cylc release version
if sys.argv[1] == '-v' or sys.argv[1] == '--version':
    print cylc_version
    sys.exit(0)

# category help
cathelp = False
if sys.argv[1] == 'help' and sys.argv[2] in categories:
    # cylc help CATEGORY
    cathelp = True
    cat = sys.argv[2]
if sys.argv[1] in categories and \
        ( sys.argv[2] == 'help' or sys.argv[2] == '--help' ):
    # cylc CATEGORY help
    # cylc CATEGORY --help
    cathelp = True
    cat = sys.argv[1]

if cathelp:
    print eval (cat + '_help')
    print general_usage
    print
    print 'COMMANDs:'
    output = []
    commands = eval( cat + '_commands')
    longest = len(commands[0])
    for command in commands:
        if len( command )> longest:
            longest = len( command )
    count = 0
    pad = False
    if len(commands) > 10:
        pad = True
    for command in commands:
        count += 1
        if pad and count < 10:
            digit = ' ' + str(count)
        else:
            digit = str(count)
        print ' ' + digit + '/', command, '.'*(longest-len(command)) + '...', comsum[command]
    sys.exit(0)

arglist = sys.argv[1:]
if len(arglist) == 2:
    # catch reversed usage: 'cylc help COMMAND'
    if arglist[0] == 'help' and arglist[1] in all_commands:
        arglist[0] = arglist[1]
        arglist[1] = '--help'

command = arglist[0]
options = []
if len(arglist) > 1:
    options = arglist[1:]

if command not in all_commands + util_commands:
    print "ERROR, illegal cylc command: " + command
    print >> sys.stderr, usage
    sys.exit(1)

try:
    if options[0] == 'help':
        # catch 'cylc COMMAND help'
        options[0] = '--help'
except IndexError:
    pass

# construct command to execute
command = '_' + command 
commandlist = [ command ]
for f in options:
    commandlist.append( f )
execute( commandlist )
