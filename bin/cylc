#!/usr/bin/python

import os
import sys
import subprocess

allowed_commands = \
    [ 
    'help',
    'configure',
    'schedule', 
    'control',
    'message',
    'monitor',
    'monitor-r',
    'monitor-d',
    'monitor-p',
    'show-configured',
    'show-pyro',
    ]

usage = \
    [ 
    'usage: cylc COMMAND [options] ',
    '',
    'This is the cylc scheduler command line interface.',
    '',
    'commands:',
    '  help          Print this usage message and exit.',
    '',
    '  configure     Configure a system for scheduling.', 
    '  schedule      Start scheduling a configured system.',
    '  control       Interact with a running system.',
    '  message       Send a message to a task proxy object.',
    '',
    '  monitor       Monitor all task proxy objects.',
    '  monitor-r     Monitor running task proxies.',
    '  monitor-d     Monitor running dummy task programs.',
    '  monitor-p     Monitor the Pyro namesever.',
    '',
    '  show-pyro [TO DO]   List systems registered with Pyro.',
    '  show-configured [TO DO]   List your configured systems.',
    '',
    'options:',
    '  cylc COMMAND --help'
    ]

def print_usage():
    for line in usage:
        print line

# check that the cylc core modules are accessible
try:
    import requisites
except:
    print >> sys.stderr, "ERROR: the cylc core modules are not accessible to Python"
    print >> sys.stderr, "Please add [cylc-top-dir]/src to your $PYTHONPATH." 
    sys.exit(1)

if len( sys.argv ) < 1:
    # COMMAND must be supplied
    print_usage()
    sys.exit(1)

# first argument must be COMMAND
command = sys.argv[1]
if command not in allowed_commands:
    print_usage()
    sys.exit(1)

if command == 'help': 
    print_usage()
    sys.exit(0)

# remaining arguments must be command options
if len( sys.argv ) == 1:
    command_options = []
else:
    command_options = sys.argv[2:]

# construct command to execute
execute = ''

if command == "schedule":
    # intercept the system name and configure the environment for access
    # to the system source modules.

    for i in range( 0, len( command_options) ):
        if command_options[i] == '-s' or command_options[i] == '--system':
            sysname = command_options[i+1]

            FILE = open( os.environ['HOME'] + '/.cylc/configured/' + sysname, 'r' )
            line = FILE.read()
            system_dir = line.rstrip() 
            FILE.close()

            print "Configuring your environment for system " + sysname
            print system_dir
            # add system scripts to $PATH
            os.environ[ 'PATH' ] += ':' + system_dir + '/scripts'
            # add system Python modules to $PYTHONPATH
            os.environ[ 'PYTHONPATH' ] += ':' + system_dir
            break

# construct the actual command name
command = '_cylc-' + command 

# subprocess.call() takes a list: [ command, arg1, arg2, ...]
execute = [ command ]
for f in command_options:
    execute.append( f )

try:
    retcode = subprocess.call( execute )
    if retcode != 0:
        # the command returned non-zero exist status
        print >> sys.stderr, command + ' failed: ', retcode
        sys.exit(1)

except OSError:
    # the command was not invoked
    print >> sys.stderr, 'ERROR: unable to execute ' + command
    print >> sys.stderr, ' * Is [cylc]/bin in your $PATH?'
    print >> sys.stderr, " * Are all cylc scripts executable?"
    print >> sys.stderr, " * Have you run 'cylc configure' yet?"
    sys.exit(1)
