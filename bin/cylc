#!/usr/bin/env bash
#
# THIS FILE IS PART OF THE CYLC SUITE ENGINE.
# Copyright (C) 2008-2017 NIWA
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
CATEGORIES=('control' 'information' 'all' 'task' 'license' 'GPL' 'admin' \
                'preparation' 'hook' 'discovery' 'utility')
                
HELP_OPTS=('help' '--help' '-h' 'h' '?')

# Aliases for commands that have old names
#shopt -s expand_aliases
#alias get-config="get-suite-config"
#alias browse="documentation"
#alias gcylc="gui"
#alias gsummary="gscan"
#alias log="cat-log"

#if ${CYLC_DEBUG:-false}; then
#    set -x
#fi

get_version() {
    # If there is a version file present, use that
    if [[ -f $CYLC_HOME/VERSION ]]; then
        CYLC_VERSION="$(cat $CYLC_HOME/VERSION)"
    else
        local DESC=
        DESC=$(cd $CYLC_HOME && git describe 2>/dev/null)
        CYLC_VERSION=$DESC
    fi
}

print_version() {
    # New way
    get_version
    # Old way using the python script
    #CYLC_VERSION="$($CYLC_HOME_BIN/cylc-new-version)"
    echo "Cylc $CYLC_VERSION ($CYLC_HOME)"
}

init_cylc() {
    set -eu
    CYLC_HOME_BIN="$(dirname "$(readlink -f "$0")")"
    CYLC_HOME="$(dirname "$CYLC_HOME_BIN")"
    CYLC_NS="$(basename $0)"
    CYLC_DIR="$CYLC_HOME"
    
    #echo $CYLC_HOME $CYLC_HOME_BIN $CYLC_HOME $CYLC_NS 
    
    get_version
    
    PATH=$(path_lead "${PATH:-}" "$CYLC_HOME_BIN")
    PYTHONPATH=$(path_lead "${PYTHONPATH:-}" "$CYLC_HOME/lib/")
    
    export PATH PYTHONPATH CYLC_DIR CYLC_VERSION
}

help_util() {
    # Deals with form 'cylc [COMMAND] --help'
    cd $CYLC_HOME_BIN
    
    # deal with graph which is a weird edge case...
    if [[ "$@" == "graph" ]]; then
        local COMMAND=$CYLC_HOME_BIN/cylc-graph
        exec $COMMAND --help
        exit
    fi
    # Check if this is a category help command
    if [[ (($# -gt 1)) && "${HELP_OPTS[*]} " == *" $UTIL "* && " ${CATEGORIES[*]} " != *" $1 "* ]]; then
        local COMMAND=$CYLC_HOME_BIN/cylc-$1
        exec $COMMAND --help
        exit
    fi
    # Deal with cases like 'cylc --help [COMMAND/CATEGORY] or cylc [CATEGORY]'   
    if [[ (( $# -ge 1 )) && -f "$(ls cylc-${1}*)" ]] ; then
        local COMMAND=$CYLC_HOME_BIN/$(ls "cylc-${1}"*)
        exec $COMMAND --help
        exit
    fi
    # Deal with cases like 'cylc --help [COMMAND/CATEGORY]'
    if [[ (( $# -gt 1 )) && -f $(ls "cylc-${2}"*)  ]] ; then
        local COMMAND=$CYLC_HOME_BIN/$(ls "cylc-${2}"*)
        exec $COMMAND --help
        exit
    fi
    
    # If category name is used, call the help func with the category
    if [[ " ${CATEGORIES[*]} " == *" $UTIL "* || " ${HELP_OPTS[*]} " == *" $UTIL "* ]]; then
        local COMMAND=$CYLC_HOME_BIN/cylc-help
        #echo "$COMMAND, $@"
        exec $COMMAND $@
        exit
    fi
    
    # If not a category or not an actaul command in the bin dir, exit
    if [[ ! -f $(ls "cylc-${UTIL}"*) ]] ; then
        echo "$UTIL: unknown utility. Abort." >&2
        echo "Type 'cylc help' for a list of utilities."
        return 1
    fi
    
    echo "Something has gone terribly wrong if you are here..."
    return 1

}

# Ensure that ITEM_STR is at the beginning of PATH_STR
path_lead() {
    local PATH_STR=$1
    local ITEM_STR=$2
    if [[ -z ${PATH_STR:-} ]]; then
        echo "$ITEM_STR"
    elif [[ "$PATH_STR" != "$ITEM_STR" && "$PATH_STR" != $ITEM_STR:* ]]; then
        while [[ "$PATH_STR" == *:$ITEM_STR ]]; do
            PATH_STR=${PATH_STR%:$ITEM_STR}
        done
        while [[ "$PATH_STR" == *:$ITEM_STR:* ]]; do
            local PATH_HEAD=${PATH_STR%:$ITEM_STR:*}
            local PATH_TAIL=${PATH_STR##*:$ITEM_STR:}
            PATH_STR="$PATH_HEAD:$PATH_TAIL"
        done
        echo "$ITEM_STR:$PATH_STR"
    else
        echo "$PATH_STR"
    fi
}

abort_bad_command() {
    echo "$CYLC_NS: $UTIL: unknown utility. Abort." >&2
    echo "Type \"$CYLC_NS help all\" for a list of utilities." >&2
    exit 1
}

abort_ambiguous_command() {
    echo "\"$UTIL\" is too ambiguous to be a valid Cylc command abbreviation."
    echo "These commands match the abbreviation \"$UTIL\":"
    ls "$CYLC_HOME_BIN/cylc-${UTIL}"* 2>/dev/null | sed -r "s,$CYLC_HOME_BIN/cylc-,,"
    exit 1
}

run_cylc_command_matched() {
    COMMAND=$(ls "$CYLC_HOME_BIN/cylc-${UTIL}"*)
    #echo $COMMAND "$@"

    if [[ ! -f $COMMAND || ! -x $COMMAND ]]; then
        abort_bad_command
    fi

    CYLC_UTIL="$(echo $COMMAND | sed -r "s,$CYLC_HOME_BIN/cylc-,,")"
    export CYLC_UTIL
    #echo "$COMMAND" "$@"
    exec "$COMMAND" "$@"
    exit
}

run_cylc_command() {
    COMMAND=$(ls "$CYLC_HOME_BIN/cylc-${UTIL}")
    #echo $COMMAND "$@"

    if [[ ! -f $COMMAND || ! -x $COMMAND ]]; then
        abort_bad_command
    fi

    CYLC_UTIL=$UTIL
    #echo "UTIL: $CYLC_UTIL"
    export CYLC_UTIL
    #echo "$COMMAND" "$@"
    exec "$COMMAND" "$@"
    exit
}

init_cylc

UTIL="help"
if (($# > 0)); then
    UTIL=$1
    shift 1
fi


case $UTIL in
help|h|?|--help|-h)
    help_util $@
    exit
    :;;
version|--version|-V)
    print_version
    exit
    :;;
# Deal with categories
control|information|all|task|license|GPL|admin|preparation|hook|discovery|utility)
    if (($# == 0)); then
        help_util $UTIL
        exit
    elif (($# > 0)); then
        UTIL=$1
        echo "UTIL $UTIL"
        # Discard the category qualifier argument by shifting the arguments along by 1.
        shift 1
    fi
    :;;
esac

# test file existence first 
# i.e. dont ls to start with

# Abort if no matches to command abbrev, list matches if multiple matches
test "$(ls "$CYLC_HOME_BIN/cylc-${UTIL}"* 2>/dev/null)" || { abort_bad_command; exit; }
# Check if command (singular) exists first. Needed for handling "graph" and "graph-diff"
test "$(ls "$CYLC_HOME_BIN/cylc-${UTIL}" 2>/dev/null | wc -l )" -eq 1 && { run_cylc_command "$@"; exit; }
# Now try and match abbreviated commands.
test "$(ls "$CYLC_HOME_BIN/cylc-${UTIL}"* 2>/dev/null | wc -l )" -eq 1 && { run_cylc_command_matched "$@"; exit; }
# Now try and match abbreviated commands.
test "$(ls "$CYLC_HOME_BIN/cylc-${UTIL}"* 2>/dev/null | wc -l )" -gt 1 && { abort_ambiguous_command; exit; }



