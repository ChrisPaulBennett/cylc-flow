#!/usr/bin/python

import os
import sys
import subprocess

# auto-replace with version tag at build/install:
cylc_version = "-CYLC-VERSION-"

allowed_commands = \
    [ 
    'help',
    'configure',
    'register',
    'start', 
    'stop',
    'pause',
    'resume',
    'nudge',
    'set-level',
    'reset',
    'kill',
    'purge',
    'insert',
    'message',
    'ask',
    'run-task',
    'monitor',
    'monitor-r',
    'monitor-d',
    'monitor-p',
#    'show-pyro',
    ]

usage = \
    [ 
    'USAGE: cylc [options] COMMAND [command-options] ',
    '',
    'Cylc is pronounced "silk".',
    '',
    'options:',
    ' -v, --version  Print the release version tag and exit.',
    ' -h, --help     Print this usage message and exit.',
    '',
    'command-options:',
    '  cylc COMMAND --help',
    '',
    'COMMANDS:',
    '  help          Print this usage message and exit.',
    '',
    '  configure     Create task proxy and config modules for a system.',
    '  register      Register a configured system for use by name.',
    '',
    '  start         Start up, or restart, a registered system.',
    '  stop          Stop a running system.',
    '  pause         Pause a running system.',
    '  resume        Resume running a paused system.',
    '  set-level     Set the logging level in a running system.',
    '  nudge         Invoke the cylc task processing loop.',
    '  ask           Interrogate a running system.',
    '',
    '  reset         Reset a single task to the waiting state.',
    '  kill          Remove a single task from a running system.',
    '  purge         Recursively remove a tree of dependent tasks.',
    '',
    '  message       Send a message to a task proxy object.',
    '  run-task      Run a single task without the scheduler.',
    '',
    '  monitor       Monitor task proxy objects in a running system.',
    '  monitor-r     Monitor "submitted" and "running" task proxies.',
    '  monitor-d     Monitor all running dummy task programs.',
    '  monitor-p     Monitor the Pyro namesever.',
    ]

def print_usage():
    print "_______________C_Y_L_C___________________"
    print ". Self Organising Dynamic Metascheduler ."
    print ". (c) Hilary Oliver, NIWA, 2008-2010    ."
    print "        Version: " + cylc_version
    print "_______________C_Y_L_C___________________"
    print
    for line in usage:
        print line

# check that the cylc core modules are accessible
try:
    import requisites
except:
    print >> sys.stderr, "ERROR: the cylc core modules are not accessible to Python"
    print >> sys.stderr, "Please add [cylc-top-dir]/src to your $PYTHONPATH." 
    sys.exit(1)

if sys.argv[1] == '-h' or sys.argv[1] == '--help':
    print_usage()
    sys.exit(0)

if sys.argv[1] == '-v' or sys.argv[1] == '--version':
    print cylc_version
    sys.exit(0)

if len( sys.argv ) < 1:
    # COMMAND must be supplied
    print_usage()
    sys.exit(1)

# first argument must be COMMAND
command = sys.argv[1]
if command not in allowed_commands:
    print_usage()
    sys.exit(1)

if command == 'help': 
    print_usage()
    sys.exit(0)

# remaining arguments must be command options
if len( sys.argv ) == 1:
    command_options = []
else:
    command_options = sys.argv[2:]

# construct command to execute
execute = ''

# construct the actual command name
command = '_cylc-' + command 

# subprocess.call() takes a list: [ command, arg1, arg2, ...]
execute = [ command ]
for f in command_options:
    execute.append( f )

try:
    retcode = subprocess.call( execute )
    if retcode != 0:
        # the command returned non-zero exist status
        print >> sys.stderr, command + ' failed: ', retcode
        sys.exit(1)

except OSError:
    # the command was not invoked
    print >> sys.stderr, 'ERROR: unable to execute ' + command
    print >> sys.stderr, ' * Is [cylc]/bin in your $PATH?'
    print >> sys.stderr, " * Are all cylc scripts executable?"
    print >> sys.stderr, " * Have you run 'cylc configure' yet?"
    sys.exit(1)
