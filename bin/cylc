#!/usr/bin/python

import os
import sys
import subprocess

allowed_commands = \
    [ 
    'configure',
    'schedule', 
    'control',
    'monitor'
    ]

# extract basename of the invoked command, so that we 
# can access commands at first invocation, when the
# environment has not yet been configured for cylc.
invoked_name = sys.argv[0]
basename = os.path.basename( invoked_name )
dirname = os.path.dirname( invoked_name )
if dirname != '':
    dirname = dirname + '/'

usage = \
    [ 
    '',
    'Usage: ' + basename + ' [options] COMMAND [command-options] ',
    '',
    'Options:',
    '  -h, --help    ... print this message and exit',
    '',
    'COMMAND:',
    '  configure     ... configure a system for scheduling', 
    '  schedule      ... start scheduling a configured system',
    '  control       ... interact with a running cylc system',
    '  monitor       ... monitor a running cylc system',
    '',
    'Command Options, see:',
    '  ' + basename + ' COMMAND --help',
    ''
    ]

def print_usage():
    for line in usage:
        print line

if sys.argv[1] == "-h" or sys.argv[1] == "--help":
    print_usage()
    sys.exit(0)

try:
    command = sys.argv[1]
    # TO DO: THIS WILL FAIL IF NO OPTIONS SUPPLIED?
    command_options = sys.argv[2:]
except:
    print_usage()
    sys.exit(1)

if command not in allowed_commands:
    print_usage()
    sys.exit(1)

execute = ''
if command != 'configure':
    # read system dir for the named system

    i = 2
    while sys.argv[i] != '-n':
        i += 1

    sysname = sys.argv[i+1]

    FILE = open( os.environ['HOME'] + '/.cylc/configured/' + sysname, 'r' )
    line = FILE.read()
    system_dir = line.rstrip() 
    FILE.close()

    execute = ". " + system_dir + "/cylc-env.sh; "

execute += dirname + '_cylc-' + command + ' ' + ' '.join( command_options )
# print "cylc command: " + execute 

try:
    # use of shell=True here provides access to PATH in the subprocess
    retcode = subprocess.call( execute, shell=True )
    if retcode < 0:
        # the command returned non-zero exist status
        print >> sys.stderr, execute + ' failed: ', retcode
        sys.exit(1)

except OSError:
    # the command was not invoked
    print >> sys.stderr, 'CYLC ERROR: unable to run command ' + execute
    print >> sys.stderr, "Is everything under your cylc bin directory executable?"
    print >> sys.stderr, "Have you run 'cylc configure' yet?"
    sys.exit(1)
