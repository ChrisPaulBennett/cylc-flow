#!/usr/bin/env python


import os
import sys

from execute import execute

# auto-replace with version tag at build/install:
cylc_version = "THIS IS NOT A VERSIONED RELEASE"

allowed_commands = \
    [ 
    'help',
    'register',
    'grep',
    'edit',
    'coldstart', 
    'warmstart', 
    'rawstart', 
    'restart',
    'stop',
    'pause',
    'resume',
    'lock',
    'unlock',
    'insert',
    'reset',
    'kill',
    'purge',
    'submit',
    'gui',
    'dump',
    'show',
    'list',
    'ping',
    'scan',
    'log',
    'monitor',
    'task-started',
    'task-message',
    'task-finished',
    'task-failed',
    'lockserver',
    'verbosity',
    ]

usage = \
    [ 
    'USAGE: cylc [options] COMMAND [command-options] ',
    '',
    'This is the commandline interface to the cylc self-organising adaptive',
    'multicycling forecast systems metascheduler. Cylc is pronounced \'silk\'.',
    '',
    'See also: cylcutil --help',
    '',
    'options:',
    ' -v, --version  Print the release version tag and exit.',
    ' -h, --help     Print this usage message and exit.',
    '',
    'command-options:',
    '  cylc COMMAND --help',
    '',
    'COMMANDS:',
    'S-U-I-T-E--R-E-G-I-S-T-R-A-T-I-O-N',
    '  register .... Manage suite name registrations',
    'S-U-I-T-E--E-D-I-T-I-N-G',
    '  grep     .... A cylc suite-definition-aware text search command',
    '  edit     .... Edit suite config files with inlined include-files',
    'S-U-I-T-E--C-O-N-T-R-O-L',
    '  coldstart ... Start a suite at a given cycle time (including coldstart tasks)',
    '  warmstart ... Start a suite at a given cycle time (assuming a previous cycle)',
    '  rawstart  ... Start a suite at a given cycle time (excluding coldstart tasks)',
    '  restart ..... Restart a suite its most recent, or any other, previous state',
    '  stop ........ Shut down a running suite, or set a final cycle time',
    '  pause ....... Refrain from submitting tasks that are ready to run',
    '  resume ...... Resume submitting tasks that are ready, or unset the stop time',
    '  lock ........ Refuse to comply with subsequent intervention commands',
    '  unlock ...... Comply with subsequent intervention commands',
    'T-A-S-K--C-O-N-T-R-O-L',
    '  insert ...... Insert a task or task group into a running suite',
    '  reset ....... Force a task to change state (e.g. for manual triggering)',
    '  kill ........ Remove tasks from a running suite, once or permanently',
    '  purge ....... Remove an entire dependency tree rooted on a single task',
    '  submit ...... Submit a single task to run just as it would in the suite',
    'I-N-T-E-R-R-O-G-A-T-I-O-N',
    '  gui ......... Graphical User Interface for suite control and monitoring',
    '  dump ........ Print the current state of all suite tasks to stdout',
    '  show ........ Retrieve information from a running suite',
    '  list ........ Print the task list from a registered suite', 
    '  ping ........ Check that a named suite is running',
    '  scan ........ Scan cylc ports for running suites',
    '  log ......... Print cylc logs to stdout, with optional task filtering',
    '  monitor ..... Terminal based suite monitor',
    'T-A-S-K--I-N-T-E-R-F-A-C-E',
    '  task-started ... Acquire a lock from the lockserver, and report started',
    '  task-message ... Report completion of outputs, and other messages',
    '  task-finished... Release lock to the lockserver, and report finished',
    '  task-failed .... Release lock to the lockserver, and report failure',
    'M-I-S-C-E-L-L-A-N-E-O-U-S',
    '  lockserver .. Lockserver interrogation and manual lock management',
    '  verbosity ... Change the logging verbosity level in a running suite',
    '  help ........ Print this usage message and exit; also [-h], [--help]',
    ]

def print_usage():
    for line in usage:
        print line

# check that the cylc core modules are accessible
try:
    import requisites
except:
    print >> sys.stderr, "ERROR: the cylc core modules are not accessible to Python"
    print >> sys.stderr, "Source $CYLC_DIR/cylc-env.sh in your command shell." 
    sys.exit(1)

if len( sys.argv ) < 2:
    # COMMAND must be supplied
    print_usage()
    sys.exit(1)

if sys.argv[1] == '-h' or sys.argv[1] == '--help':
    print_usage()
    sys.exit(0)

if sys.argv[1] == '-v' or sys.argv[1] == '--version':
    print cylc_version
    sys.exit(0)

# SECRET COMMAND USED IN AUTO DOCUMENT PROCESSING
if sys.argv[1] == 'commands':
    for command in allowed_commands:
        print command
    sys.exit(0)

# first argument must be COMMAND
command = sys.argv[1]
if command not in allowed_commands:
    print "ERROR, illegal cylc command: " + command
    print "Use 'cylc --help' to see legal commands"
    sys.exit(1)

if command == 'help': 
    print_usage()
    sys.exit(0)

# remaining arguments must be command options
if len( sys.argv ) == 1:
    command_options = []
else:
    command_options = sys.argv[2:]

# construct command to execute
command = '_' + command 
# subprocess.call() takes a list: [ command, arg1, arg2, ...]
commandlist = [ command ]
for f in command_options:
    commandlist.append( f )

execute( commandlist )
