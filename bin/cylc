#!/usr/bin/python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|


import os
import sys
import subprocess

# auto-replace with version tag at build/install:
cylc_version = "-CYLC-VERSION-"

allowed_commands = \
    [ 
    'help',
    'configure',
    'register',
    'start', 
    'stop',
    'pause',
    'resume',
    'reset',
    'insert',
    'kill',
    'purge',
    'monitor',
    'monitor-r',
    'task-dump',
    'list-all',
    'what-is',
    'system-info',
    'run-task',
    'set-level',
    'nudge',
    'message',
    'unit-test'
    ]

usage = \
    [ 
    '_________________________________________________________________________',
    'USAGE: cylc [options] COMMAND [command-options] ',
    '',
    'This is the commandline interface to the cylc self-organising optimal',
    'multicycle forecast systems metascheduler. Cylc is pronounced \'silk\'.',
    '',
    'options:',
    ' -v, --version  Print the release version tag and exit.',
    ' -h, --help     Print this usage message and exit.',
    '',
    'command-options:',
    '  cylc COMMAND --help',
    '',
    'COMMANDS:',
    '_________________________________________________________________________',
    '# P R E P A R A T I O N',
    '  configure ... Create required source modules from system taskdef files',
    '  register .... Manage system name registrations.',
    '_________________________________________________________________________',
    '# S Y S T E M C O N T R O L',
    '  start ....... Begin scheduling, or restart, a registered cylc system',
    '  stop ........ Shut a running system down, or set a final cycle time',
    '  pause ....... Temporarily refrain from running any new tasks',
    '  resume ...... Resume running any tasks that are ready',
    '_________________________________________________________________________',
    '# T A S K C O N T R O L',
    '  insert ...... Insert a task, or group of tasks, into a running system',
    '  reset ....... Force a task\'s state to "waiting", "ready", or "finished"',
    '  kill ........ Delete a task from a running system, once or permanently',
    '  purge ....... Recursively kill dependent tasks, down to a given cycle',
    '_________________________________________________________________________',
    '# I N F O R M A T I O N',
    '  monitor ..... View the state of task proxy objects in a running system',
    '  monitor-r ... View extra information about running task proxies only',
    '  task-dump ... Display current status of task prerequisites and outputs',
    '  list-all .... List all cylc systems currently using the Pyro nameserver',
    '  what-is ..... Retrieve task or system information from a running system',
    '  system-info . Print system-specific information for a registered system',
    '_________________________________________________________________________',
    '# O T H E R',
    '  run-task .... Run one task, alone, just as the scheduler would run it',
    '  set-level ... Change the logging verbosity level in a running system',
    '  nudge ....... Cause the cylc main task processing loop to be invoked',
    '  message   ... Send a message to a task proxy object (for use by tasks)',
    '  help ........ Print this usage message and exit; also [-h], [--help]',
    '  unit-test ... An automated test of core cylc functionality',
    '_________________________________________________________________________',
    ]

def print_usage():
    for line in usage:
        print line

# check that the cylc core modules are accessible
try:
    import requisites
except:
    print >> sys.stderr, "ERROR: the cylc core modules are not accessible to Python"
    print >> sys.stderr, "Please add [cylc-top-dir]/src to your $PYTHONPATH." 
    sys.exit(1)

if len( sys.argv ) < 2:
    # COMMAND must be supplied
    print_usage()
    sys.exit(1)

if sys.argv[1] == '-h' or sys.argv[1] == '--help':
    print_usage()
    sys.exit(0)

if sys.argv[1] == '-v' or sys.argv[1] == '--version':
    print cylc_version
    sys.exit(0)

# SECRET COMMAND USED IN AUTO DOCUMENT PROCESSING
if sys.argv[1] == 'commands':
    for command in allowed_commands:
        print command
    sys.exit(0)

# first argument must be COMMAND
command = sys.argv[1]
if command not in allowed_commands:
    print_usage()
    sys.exit(1)

if command == 'help': 
    print_usage()
    sys.exit(0)

# remaining arguments must be command options
if len( sys.argv ) == 1:
    command_options = []
else:
    command_options = sys.argv[2:]

# construct command to execute
execute = ''

# construct the actual command name
command = '_cylc-' + command 

# subprocess.call() takes a list: [ command, arg1, arg2, ...]
execute = [ command ]
for f in command_options:
    execute.append( f )

try:
    retcode = subprocess.call( execute )
    if retcode != 0:
        # the command returned non-zero exist status
        print >> sys.stderr, command + ' failed: ', retcode
        sys.exit(1)

except OSError:
    # the command was not invoked
    print >> sys.stderr, 'ERROR: unable to execute ' + command
    print >> sys.stderr, ' * Is [cylc]/bin in your $PATH?'
    print >> sys.stderr, " * Are all cylc scripts executable?"
    print >> sys.stderr, " * Have you run 'cylc configure' yet?"
    sys.exit(1)

except Exception,x:
    raise SystemExit( x )
