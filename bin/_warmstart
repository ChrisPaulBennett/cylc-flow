#!/usr/bin/env python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|

import sys
from optparse import OptionParser

import cycle_time
from coldstart import coldstart
from scheduler import scheduler

debug = True

class coldstart_scheduler( scheduler ):
    def __init__( self ):

        usage = """cylc start [options] SUITE CYCLE

WARM START a suite at a given initial cycle time. Each task will be
instantiated as for a cold start (above) except for oneff coldstart
tasks listed in the suite.rc file which will be started in the
"finished" state (i.e. all outputs completed). This makes it easy to
rerun cycles for which all input files generated by the previous cycle
are already in place. 

Arguments:
   SUITE                Registered name of the suite to start.
   CYCLE                Initial cycle time (YYYYMMDDHH).""" 

        self.parser = OptionParser( usage )

        scheduler.__init__( self )

    def parse_commandline( self ):
        ( self.options, self.args ) = self.parser.parse_args()

        if len( self.args ) != 2:
            self.parser.error( "Please supply a suite name and initial cycle time." )

        if cycle_time.is_valid( self.args[1] ):
            self.start_time = self.args[1]
        else:
            self.parser.error( "Invalid cycle time: " + self.args[1])

        scheduler.parse_commandline( self )

        global debug
        debug = self.options.debug

        print "Starting from: " + self.start_time

    def load_suite_config( self ):
        scheduler.load_suite_config( self )
        # check for legal start time
        self.config.check_start_time( self.start_time )

    def create_task_pool( self ):
        # initialize the server (and create main logger)
        # True below indicates warm start
        self.pool = coldstart( self.config, self.pyro,
                self.dummy_mode, self.use_quick_elim, self.logging_dir,
                self.logging_level, self.state_dump_file, self.exclude_tasks,
                self.include_tasks, self.start_time, self.stop_time,
                self.pause_time, True, self.graphfile )

if __name__ == '__main__':

    try:
        # parse the commandline and initialize the cylc server
        server = coldstart_scheduler()
    except Exception, x:
        if debug:
            raise
        else:
            print x
            print "(use --debug to see exception traceback)"
            sys.exit(1)

    try:
        # configure pyro, logging, etc., and load the suite task pool 
        server.configure()

        # crank it up baby!
        server.run()

    except Exception, x:

        print "ERROR CAUGHT, will clean up before exit"

        # this assumes no exceptions in cleanup()
        server.cleanup()

        if debug:
            raise
        else:
            print "THE ERROR WAS:"
            print x
            print "(use --debug to see exception traceback)"
            sys.exit(1)

    except:
        # catch 'sys.exit(1)' and 'raise SystemExit("foo")'
        # TO DO: check these can actually be caught
        print "ERROR CAUGHT; will clean up before exit"
        server.cleanup()
        raise
