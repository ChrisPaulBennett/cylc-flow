#!/usr/bin/python

import sys, re
from connectors import connect_to_control

def print_heading( strng ):
        print
        print strng
        underline = re.sub( '.', '-', strng )
        print underline

usage = """cylc task-dump [options] SYSTEM 

Display the current status of a task's prerequisites, outputs, 
and other information deemed relevant to scheduling."""

connector = connect_to_control( usage )

connector.parser.add_option( "-t", 
        help="ID of the task to dump.",
        metavar="TASK%CYCLE", action="store", dest="task_id" )

connector.parse_args()

controller = connector.get_control()

if not connector.options.task_id:
    connector.parser.error( "Task ID required" )

id = connector.options.task_id
sysname = connector.system_name

result = controller.get_task_requisites( [ id ] )

if id not in result.keys():
    print "Task " + id + " not found in " + sysname
    sys.exit(1)

print
print_heading( 'Task ' + id + ' in ' + sysname + ':' )
print ' + => prerequisite satisfied, or output completed' 
print ' - => prerequisite NOT satisfied, or output NOT completed' 

for id in result.keys():
    [ pre, out, extra_info ] = result[ id ]

    print_heading( '> Prerequisites:')
    if len( pre ) == 0:
        print '(None)'
    for item in pre:
        [ msg, state ] = item
        if state:
            descr = ' + '
        else:
            descr = ' - '
        print descr + msg

    print_heading( '> Outputs:' )
    if len( out ) == 0:
        print '(None)'
    for item in out:
        [ msg, state ] = item
        if state:
            descr = ' + '
        else:
            descr = ' - '
        print descr + msg

    if len( extra_info.keys() ) > 0:
        print_heading( '> Other:' )
        for item in extra_info:
            print item, '...', extra_info[ item ]

print
