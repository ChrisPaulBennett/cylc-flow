#!/usr/bin/env python

import os, sys
import port_scan
import gtk
from optparse import OptionParser
from chooser import chooser
from config import config
from registration import registrations, RegistrationError
from gtkmonitor import standalone_monitor

import socket

if __name__ == "__main__":

    parser = OptionParser( """cylc view [options] [SUITE]

Launch a read-only version of the 'cylc control' GUI.

If SUITE is not specified a list of your registered suites will be
presented to choose from. If the chosen suite is already running the
viewer will connect to it. To start a suite that is not already running,
see 'cylc control', or the commandline (see 'cylc help). Cylc view
reconnects if the target suite is restarted. 

See also:
    cylc control
(which has suite control functionality enabled)

SUITE                  Registered name of the target suite.""")

    parser.add_option( "--host",
            help="cylc suite host (defaults to localhost).",
            metavar="HOST", action="store", default=socket.getfqdn(),
            dest="host" )

    ( options, args ) = parser.parse_args()

    host = options.host
    owner = os.environ["USER"]

    if len( args ) == 0:
        use_chooser = True
        suite = None
    elif len( args ) == 1:
        use_chooser = False
        suite = args[0]
    else:
        parser.error( "Wrong number of arguments" )

    imagedir = os.environ[ 'CYLC_DIR' ] + '/images'

    if use_chooser:
        app = chooser( host, imagedir, readonly=True )

    else:
        # get suite definition directory
        reg = registrations()
        try:
            suite_dir = reg.get( suite )
        except RegistrationError, x:
            raise SystemExit( x )

        # get suite logging directory
        logging_dir = os.path.join( config( suite )['top level logging directory'], suite )

        # get secure passphrase
        try:
            passphrase = passphrase( suite )
        except:
            passphrase = None

        # scan for suite port
        try:
            port = port_scan.get_port( suite, owner, host, passphrase )
        except:
            port = None
            print >> sys.stderr, "Suite " + suite + " is not running"

        app = standalone_monitor( suite, owner, host, port, suite_dir, logging_dir, imagedir, readonly=True )

    gtk.main()
