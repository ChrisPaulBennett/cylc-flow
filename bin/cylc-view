#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2011 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os, re, sys
import tempfile
import subprocess
from optparse import OptionParser
from cylc.registration import dbgetter, RegistrationError
from cylc.mkdir_p import mkdir_p

try:
    from jinja2 import Environment, FileSystemLoader, TemplateError
except ImportError:
    jinja2_loaded = False
else:
    jinja2_loaded = True

done = []

def continuation_lines( inf ):
    outf = []
    cline = ''
    for line in inf:
        # detect continuation line endings
        m = re.match( '(.*)\\\$', line )
        if m:
            # add line to cline instead of appending to outf.
            cline += m.groups()[0]
        else:
            outf.append( cline + line )
            # reset cline 
            cline = ''
    return outf

def include_files( suitedir, inf, mark=False, single=False, label=False, level=None ):
    global done
    outf = []

    if level == None:
        level = ''
    else:
        if mark:
            level += '!'

    for line in inf:
        m = re.match( '\s*%include\s+(.*)\s*$', line )
        if m:
            match = m.groups()[0]
            # include statement found
            # strip off possible quotes: %include "foo.inc"
            match = match.replace('"','')
            match = match.replace("'",'')
            inc = os.path.join( suitedir, match )
            if inc not in done:
                if single:
                    done.append(inc)
                if os.path.isfile(inc):
                    print " + inlining", inc
                    if single or label:
                        outf.append('++++ START INLINED INCLUDE FILE ' + match + '\n' )
                    h = open(inc, 'rb')
                    inc = h.readlines()
                    h.close()
                    # recursive inclusion
                    outf.extend( include_files( suitedir, inc, mark, single, label, level ))
                    if single or label:
                        outf.append('---- END INLINED INCLUDE FILE ' + match + '\n' )
                else:
                    raise SystemExit( "File not found: " + inc )
            else:
                outf.append(level + line)
        else:
            # no match
            outf.append(level + line)
    return outf

parser = OptionParser( """cylc [prep] view [options] SUITE 

View a read-only temporary copy of a suite definition (suite.rc file) in
your editor. If the suite uses include-files you can view it inlined. If
it uses a template engine such as Jinja2 you can view the processed file.

The edit process is spawned in the foreground as follows:
  $(G)EDITOR suite.rc
$GEDITOR or $EDITOR, and $TMDPIR, must be in your environment. 

Examples:
   export EDITOR=vim
   export GEDITOR='gvim -f'      # -f: do not detach from parent shell!!
   export EDITOR='xterm -e vim'  # for gcylc, if gvim is not available
   export GEDITOR=emacs
   export EDITOR='emacs -nw'
You can set both $GEDITOR and $EDITOR to a GUI editor if you like, but
$GEDITOR at least *must* be a GUI editor, or an in-terminal invocation 
of a non-GUI editor, if you want to spawn editing sessions via gcylc.

See also 'cylc [prep] edit'.

Arguments:
  SUITE         Target suite.""")

parser.add_option( "--inline", "-i", 
        help="Inline any include-files.",
        action="store_true", default=False, dest="inline" )

parser.add_option( "--processed", "-p",
        help="View the suite after template engine processing. "
        "This necessarily implies '-i' as well.",
        action="store_true", default=False, dest="process" )

parser.add_option( "--mark", "-m", 
        help="(With '-i') Mark inclusions in the left margin.",
        action="store_true", default=False, dest="mark" )

parser.add_option( "--label", "-l", 
        help="(With '-i') Label file inclusions with the file name. "
        "Line numbers will not correspond to those reported by the parser.",
        action="store_true", default=False, dest="label" )

parser.add_option( "--single", "-s", 
        help="(With '-i') Inline only the first instances of any "
        "multiply-included files. Line numbers will not correspond to "
        "those reported by the parser.",
        action="store_true", default=False, dest="single" )

parser.add_option( "--nojoin", "-n", 
        help="Do not join continuation lines (line numbers will "
        "not correspond to those reported by the parser).",
        action="store_true", default=False, dest="nojoin" )

parser.add_option( "--central",
        help="Target the central suite database.",
        action="store_true", default=False, dest="central" )

parser.add_option( "--gui", "-g", 
        help="Use GUI editor $GEDITOR instead of $EDITOR. This option is "
        "automatically used when an editing session is spawned by gcylc.",
        action="store_true", default=False, dest="geditor" )

parser.add_option( "--stdout", "-o", 
        help="Print the suite definition to stdout instead of editing it.",
        action="store_true", default=False, dest="stdout" )

( options, args ) = parser.parse_args()

if len(args) != 1:
    parser.error( "wrong number of arguments" )

reg = args[0]

if options.geditor:
    edvar = 'GEDITOR'
else:
    edvar = 'EDITOR'

try:
    editor = os.environ[edvar]
except KeyError:
    raise SystemExit( 'export $' + edvar + ' before using this command' )

# find location of the suite definition directory
global suitedir

dbg = dbgetter( options.central )
try:
    suite, suiterc = dbg.get_suite(reg)
except RegistrationError, x:
    raise SystemExit(x)

suitedir = os.path.dirname(suiterc)

if 'TMPDIR' in os.environ:
    tmpdir = os.environ['TMPDIR']
elif 'SCRATCH' in os.environ:
    tmpdir = os.environ['SCRATCH']
else:
    raise SystemExit( "ERROR: export $TMPDIR or $SCRATCH before 'cylc edit --inline'" )

# create $TMPDIR if necessary
try:
    mkdir_p( tmpdir )
except Exception,x:
    print >> sys.stderr, x
    print >> sys.stderr, 'ERROR, illegal tmpdir?', tmpdir
    sys.exit(1)

# read the suite.rc file
if os.path.isfile( suiterc ):
    h = open( suiterc, 'rb' )
    lines = h.readlines()
    h.close()

    if options.inline or options.process:
        # inline any include files
        lines = include_files( suitedir, lines, options.mark, options.single, options.label )
    if options.process:
        if re.match( '#![Jj]inja2', lines[0] ):
            # This suite.rc file requires processing with jinja2.
            if not jinja2_loaded:
                print >> sys.stderr, 'WARNING: This suite requires processing with the Jinja2 template engine'
                print >> sys.stderr, 'WARNING: but the Jinja2 modules are not installed in your PYTHONPATH.'
                print >> sys.stderr, 'WARNING: Continuing without template processing.'
            else:
                env = Environment( loader=FileSystemLoader(suitedir) )
                # load file lines into a template, excluding '#!jinja2' so
                # that '#!cylc-x.y.z' rises to the top.
                try:
                    template = env.from_string( ''.join(lines[1:]) )
                except TemplateError, x:
                    print >> sys.stderr, "Jinja2 template error: " + str(x)
                    sys.exit(1)

                # convert unicode to plain string (needed here?)
                rendered = str( template.render() )
                # split back into lines
                xlines = rendered.split('\n')
                lines = []
                for line in xlines:
                    # remove blank lines left by Jinja2
                    if re.match( '^\s*$', line ):
                        continue
                    # restore newlines to each line
                    lines.append(line + '\n')
    if not options.nojoin:
        # join any continuation lines
        lines = continuation_lines( lines )
else:
    parser.error("File not found: " + suiterc )

# Add a warning to file
tmp = " WARNING: This is a READ-ONLY COPY of " + suiterc 
bot = re.sub( '.', '-', tmp )
warning = [
'#' + tmp + '\n', 
'#' + bot + '\n' ] 
newlines = warning + lines

if options.stdout:
    for line in lines:
        print line,
    sys.exit(0)

# write to a temporary file
viewfile = tempfile.mktemp( suffix = ".suite.rc", prefix = suite + '.', dir = tmpdir )
h = open( viewfile, 'wb' )
h.writelines( newlines )
h.close()

# set the file to be read only
os.chmod( viewfile, 0444 )

# capture the temp file's mod time in case the user edits it
# and overrides the readonly mode.
modtime1 = os.stat( viewfile ).st_mtime

# in case $EDITOR has options, e.g. 'emacs -nw':
command_list = re.split( ' ', editor )
command_list.append( viewfile )
command = ' '.join( command_list )
try:
    # THIS BLOCKS UNTIL THE COMMAND COMPLETES
    retcode = subprocess.call( command_list )
    if retcode != 0:
        # the command returned non-zero exist status
        print >> sys.stderr, command, 'failed:', retcode
        sys.exit(1)
except OSError:
    # the command was not invoked
    print >> sys.stderr, 'ERROR: unable to execute:', command
    sys.exit(1)
 
# !!!VIEWING FINISHED!!!

# Did the user edit the file
modtime2 = os.stat( viewfile ).st_mtime

if modtime2 > modtime1:
    print
    print >> sys.stderr, 'WARNING: YOU HAVE EDITED A TEMPORARY READ-ONLY SUITE COPY:'
    print >> sys.stderr, viewfile
    print >> sys.stderr, 'In future use \'cylc [prep] edit\' to edit a suite.'
    print
# DONE
