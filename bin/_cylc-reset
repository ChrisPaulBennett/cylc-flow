#!/usr/bin/env python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|


import os
import cycle_time
from connector import connector
from CylcOptionParsers import PromptOptionParser

parser = PromptOptionParser( """cylc reset [options] SYSTEM 

Reset the state of a single task to 'waiting', 'ready' or 'finished'.

The principal intended use for this command is to reset a failed task to
the WAITING state (i.e. waiting for its prerequisites to be satisfied)
after fixing the problem that resulted in the failure, thereby causing
the failed task to be resubmitted. See the cylc userguide for
information on resetting tasks to ready or finished states.""")

parser.add_option( "--waiting", 
        help="Reset a task to the 'waiting' state (prerequisites yet "
        "to be satisfied).",
        action="store_true", default=False, dest="waiting" )

parser.add_option( "--ready", 
        help="Reset a task to the 'ready' state "
        "(all prerequisites satisfied).", 
        action="store_true", default=False, dest="ready" )

parser.add_option( "--finished", 
        help="Reset a task to the 'finished' state (all outputs "
        "completed).", 
        action="store_true", default=False, dest="finished" )

parser.add_option( "-t", "--task",
        help="ID of the task to reset.",
        metavar="TASK%CYCLE", action="store", dest="task_id" )

(options, args) = parser.parse_args()

if not options.task_id:
    parser.error( "Specify a task to reset" )

if not options.waiting and not options.finished and not options.ready:
    parser.error( "Specify either waiting, ready, or finished" )

task_id = options.task_id
(name, cycle ) = task_id.split('%')
if not cycle_time.is_valid( cycle ):
    parser.error( "invalid cycle time: " + cycle )

if parser.prompt( 'Reset task ' + task_id + ' in'):
    god = connector( parser.get_pns_host(), parser.get_groupname(), 'remote' ).get()

    if options.waiting:
        print god.reset_to_waiting( task_id, os.environ['USER'] )

    if options.ready:
        print god.reset_to_ready( task_id, os.environ['USER'] )

    elif options.finished:
        print god.reset_to_finished( task_id, os.environ['USER'] )
