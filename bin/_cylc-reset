#!/usr/bin/env python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|


import os, sys
import cycle_time
import check_switch
import cylc_pyro_client
from CylcOptionParsers import PromptOptionParser

parser = PromptOptionParser( """cylc reset [options] SYSTEM TASK_ID

Reset the state of a single task to 'waiting', 'ready' or 'finished'.

The principal intended use for this command is to reset a failed task to
the WAITING state (i.e. waiting for its prerequisites to be satisfied)
after fixing the problem that resulted in the failure, thereby causing
the failed task to be resubmitted. See the cylc userguide for
information on resetting tasks to ready or finished states.""",
[ 'TASK_ID              Identity of the task to reset (NAME%YYYYMMDDHH).'] )

parser.add_option( "--waiting", 
        help="Reset a task to the 'waiting' state (prerequisites yet "
        "to be satisfied).",
        action="store_true", default=False, dest="waiting" )

parser.add_option( "--ready", 
        help="Reset a task to the 'ready' state "
        "(all prerequisites satisfied).", 
        action="store_true", default=False, dest="ready" )

parser.add_option( "--finished", 
        help="Reset a task to the 'finished' state (all outputs "
        "completed).", 
        action="store_true", default=False, dest="finished" )

(options, args) = parser.parse_args()

if len(args) != 2:
    parser.error( "System name and task ID required." )

if not options.waiting and not options.finished and not options.ready:
    parser.error( "Specify either waiting, ready, or finished" )

if [options.waiting, options.finished, options.ready ].count( True ) != 1:
    parser.error( "Specify either waiting, ready, or finished" )

task_id = args[1]
try:
    (name, cycle ) = task_id.split('%')
except ValueError:
    parser.error( "Task or Group ID must be NAME%YYYYMMDDHH")
if not cycle_time.is_valid( cycle ):
    parser.error( "invalid cycle time: " + cycle )

if parser.prompt( 'Reset task ' + task_id + ' in'):
    host = parser.get_pns_host()
    group = parser.get_groupname()
    user = os.environ['USER']  

    god = cylc_pyro_client.client( host, group ).get_proxy( 'remote' )
    if options.waiting:
        check_switch.check( god.reset_to_waiting( task_id, user ))

    if options.ready:
        check_switch.check( god.reset_to_ready( task_id, user ))

    elif options.finished:
        check_switch.check( god.reset_to_finished( task_id, user ))
