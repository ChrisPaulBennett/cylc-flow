#!/usr/bin/python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|


import cycle_time
from connector import connector
from CylcOptionParsers import PromptOptionParser

parser = PromptOptionParser( """cylc reset [options] SYSTEM 

Reset the state of a single task to 'waiting', 'ready' or 'finished'.

The principal use for this command is to reset a failed task to the
'waiting' state (i.e. waiting for its prerequisites to be satisfied),
after fixing whatever problem resulted in the failure, thereby causing
the failed task to be resubmitted.

However, you can also reset a task to 'ready' (satisfied prerequisites)
or 'finished' (completed outputs).  Reset to 'finished ONLY if you 
know that the external task has completed successfully prior to
starting or restarting the scheduler; and reset to 'ready' ONLY if you
know that the external task's real prerequisites are satisfied AND (this
should not occur!) the tasks responsible for satisfying them are no
longer present in the task pool.""" )

parser.add_option( "--waiting", 
        help="Reset a task to the 'waiting' state (prerequisites yet "
        "to be satisfied).",
        action="store_true", default=False, dest="waiting" )

parser.add_option( "--ready", 
        help="Reset a task to the 'ready' state "
        "(all prerequisites satisfied).", 
        action="store_true", default=False, dest="ready" )

parser.add_option( "--finished", 
        help="Reset a task to the 'finished' state (all outputs "
        "completed).", 
        action="store_true", default=False, dest="finished" )

parser.add_option( "-t", "--task",
        help="ID of the task to reset.",
        metavar="TASK%CYCLE", action="store", dest="task_id" )

(options, args) = parser.parse_args()

if not options.task_id:
    parser.error( "Specify a task to reset" )

if not options.waiting and not options.finished and not options.ready:
    parser.error( "Specify either waiting, ready, or finished" )

task_id = options.task_id
(name, cycle ) = task_id.split('%')
if not cycle_time.is_valid( cycle ):
    parser.error( "invalid cycle time: " + cycle )

if parser.prompt( 'Reset task ' + task_id + ' in'):
    god = connector( parser.get_pns_host(), parser.get_groupname(), 'remote' ).get()

    if options.waiting:
        god.reset_to_waiting( task_id )

    if options.ready:
        god.reset_to_ready( task_id )

    elif options.finished:
        god.reset_to_finished( task_id )
