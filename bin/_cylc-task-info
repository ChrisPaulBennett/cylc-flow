#!/usr/bin/env python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|

import re, sys
import cycle_time
from connector import connector
from CylcOptionParsers import NoPromptOptionParser_u

def print_heading( strng ):
        underline = re.sub( '.', '_', strng )
        print underline
        print strng

parser = NoPromptOptionParser_u( usage = """cylc task-info [options] SYSTEM 

Print a task's description, the current state of its prerequisites
and outputs, and (for a contact task) whether or not its delayed start
time has been reached yet.""" )

parser.add_option( "-t", "--task",
        help="ID of the task to dump.",
        metavar="TASK%CYCLE", action="store", dest="task_id" )

(options, args) = parser.parse_args()

if not options.task_id:
    parser.error( "Task ID required" )

id = options.task_id
if '%' not in id:
    parser.error( 'invalid task id (NAME%YYYYMMDDHH): ' + id )

(name, cycle) = id.split('%')
if not cycle_time.is_valid( cycle ):
    parser.error( "invalid cycle time: " + cycle )

god = connector( parser.get_pns_host(), parser.get_groupname(), 'remote' ).get()

sysname = parser.get_system_name()

result = god.get_task_requisites( [ id ] )

if id not in result:
    print "Task " + id + " not found in " + sysname
    sys.exit(1)

# DESCRIPTION

# strip off cycle time
name = re.sub( '%.*', '', id )

info = god.get_task_info( [ name ] )

for name in info.keys():
    print
    for line in info[name]:
        print '  ' + line

# PREREQUISTIES AND OUTPUTS
print
print_heading( 'Task ' + id + ' in ' + sysname + ':' )
print ' o => prerequisite NOT satisfied, or output NOT completed' 

for id in result.keys():
    [ pre, out, extra_info ] = result[ id ]

    print_heading( 'Prerequisites:')
    if len( pre ) == 0:
        print '(None)'
    for item in pre:
        [ msg, state ] = item
        if state:
            descr = ' + '
        else:
            descr = ' o '
        print descr + msg

    print_heading( 'Outputs:' )
    if len( out ) == 0:
        print '(None)'
    for item in out:
        [ msg, state ] = item
        if state:
            descr = ' + '
        else:
            descr = ' o '
        print descr + msg

    if len( extra_info.keys() ) > 0:
        print_heading( 'Other:' )
        for item in extra_info:
            print item, '...', extra_info[ item ]

print
