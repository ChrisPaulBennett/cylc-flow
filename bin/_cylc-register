#!/usr/bin/python

import os, sys
from optparse import OptionParser
from registration import registrations

parser = OptionParser( usage = """cylc register --sysdef=PATH SYSTEM
Usage: cylc register [-p,--print] [-g,--get]
    
Registration associates a name with a configured system definition
directory. This has two purposes: (1) cylc commands that need to
access system-specific modules can do so without you having to type the
full system path on the command line; and (2) the registered name is
used by the Pyro nameserver, along with your username, to distinguish
between different running systems running at the same time. 

You can register the same system under multiple names, and the
registered name is made available to tasks in a running system through
their execution environment, as $SYSTEM_NAME. Thus, if a system is
configured to use the registered name in all important important and
output directories, you can run multiple instances of the same system at
the same time without interference between them.

The cylc commands that require a registered system name as input are:
  cylc start
  cylc run-task
  cylc system-info

You can interact with running systems using

Registrations are user-specific and are stored in a special config file,
$HOME/.cylc/registrations. 

Arguments:
  SYSTEM   Name to associate with the configured system directory.""" )

parser.add_option( "-s", "--sysdef",
    help="Location of a cylc system definition directory.",
    metavar="PATH", action="store", dest="dir" )

parser.add_option( "-p", "--print",
    help="Print all current system registrations.",
    action="store_true", default=False, dest="printall" )

parser.add_option( "-g", "--get",
    help="Print the system directory registered under NAME.",
    metavar="NAME", action="store", dest="get" )

( options, args ) = parser.parse_args()

# load registration file
reg = registrations()
reg.load_from_file()

if options.get:
    # print one registration and exit
    print reg.get( options.get )
    sys.exit(0)

elif options.printall:
    # print current registrations and exit
    reg.print_all()
    sys.exit(0)

elif options.dir:
    # record a new registration for dir
    if len( args ) != 1:
        parser.error( 'system name required' )
    else:
        name = args[0]
        reg.register( name, options.dir )

    reg.dump_to_file()

else:
    parser.error( 'input required' )
