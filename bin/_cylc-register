#!/usr/bin/env python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|


import os, sys
import socket
import pyrex
from optparse import OptionParser
from registration import registrations

#----------------------------------------
def check_dir( dir ):
    if not os.path.exists( dir ):
        print "ERROR, dir not found: " + dir
        return False

    files = [\
            dir + '/system_config.py',
            dir + '/task_classes.py',
            dir + '/task_list.py',
            ]

    good = True
    for file in files:
        if not os.path.exists( file ):
            print "file not found: " + file
            good = False

    return good
 
#----------------------------------------

parser = OptionParser( usage = """1/ cylc register [-d,--delete] [-g,--get] [-s,--system=PATH] NAME
Usage: 2/ cylc register [-p,--print]
Usage: 3/ cylc register [--host=HOST] [-c,--check] [-w,--wipe]

Create, print, or delete user-specific cylc system name registrations, 
which associate a name with a configured system definition directory.

A system can be registered for use under multiple names. This allows,
for example, real and dummy mode instances of a system to run at the
same time (see also 'cylc start --practice' for this functionality).

Arguments:
  NAME            Name to associate with the configured system directory.""" )

parser.add_option( "-s", "--system",
    help="Location of a cylc system definition directory.",
    metavar="PATH", action="store", dest="dir" )

parser.add_option( "-p", "--print",
    help="Print all current system registrations.",
    action="store_true", default=False, dest="printall" )

parser.add_option( "-g", "--get",
    help="Print the system directory registered under NAME.",
    action="store_true", default=False, dest="get" )

parser.add_option( "-d", "--delete",
    help="Delete the registered NAME.",
    action="store_true", default=False, dest="delete" )

parser.add_option( "-c", "--check",
    help="Check all your current system registrations, and "
    "delete any found to be invalid.",
    action="store_true", default=False, dest="check" )

parser.add_option( "-w", "--wipe",
    help="Delete all of your current system registrations.",
    action="store_true", default=False, dest="wipe" )

parser.add_option( "--host",
        help="Pyro nameserver host, defaults to local hostname. Use "
        "if not auto-detected (which depends on network config).", 
        metavar="HOSTNAME", action="store", default=socket.getfqdn(),
        dest="pns_host" )

parser.add_option( "--user",
        help="Attempt to access another user's system registrations.", 
        metavar="USER", action="store", default=None, dest="user" )

( options, args ) = parser.parse_args()

# load registration file
reg = registrations( options.user )

if options.get:
    if len( args ) != 1:
        print "ERROR, system name required"
        sys.exit(1)

    # print one registration and exit
    name = args[0]

    if reg.is_registered( name ):
        print reg.get( name )
        sys.exit(0)
    else:
        print name + " is not registered"
        sys.exit(1)

elif options.printall:
    if len( args ) != 0:
        print "ERROR, no arguments allowed for --print"
        sys.exit(1)

    # print all registrations and exit
    reg.print_all()
    sys.exit(0)

elif options.dir:
    # record a new registration
    if len( args ) != 1:
        parser.error( 'system name required' )

    name = args[0]

    dir = os.path.abspath( options.dir )
    if not os.path.exists( dir ):
        print "ERROR, directory not found: " + dir
        sys.exit(1)

    if not check_dir( dir ):
        print "ERROR, " + dir + " has not been configured"
        sys.exit(1)

    reg.register( name, dir )
    reg.dump_to_file()

elif options.delete or options.wipe or options.check:
    # get system names currently in use in the Pyro nameserver
    groups = pyrex.discover( options.pns_host ).get_groups()
    username = os.environ[ 'USER' ]
 
    twatted = []

    if options.check:
        if len( args ) != 0:
            print "ERROR, no arguments allowed for --check"
            sys.exit(1)

        count = 0
        for name in reg.get_all():
            count += 1
            dir = reg.get(name)
            if not check_dir( dir ):
                post = ' ... INVALID'
                twatted.append( name )

            else:
                post = ' ... OK'
            reg.print_reg( name, pre=' [' + str(count) + '] ', post=post )

    elif options.wipe:
        if len( args ) != 0:
            print "ERROR, no arguments allowed for --wipe"
            sys.exit(1)

        twatted = reg.get_all() 

    elif options.delete:
        if len( args ) != 1:
            parser.error( 'system name to delete?' )

        twatted = [ args[0] ] 

    if len(twatted) == 0:
        print "No systems to unregister"
        sys.exit(0)

    count = 0
    print "Unregistering " + str( len(twatted) ) + " systems:"
    for twat in twatted:
        count += 1
        print ' [' + str( count ) + '] ' + twat
        if username + '_' + twat in groups or \
                username + '_' + twat + '_practice' in groups:
            print "  WARNING, a system called " + twat + " owned by you is currently using"
            print "the Pyro nameserver. See 'cylc register --help' for information about"
            response = raw_input( "exactly what this means. Proceed with deregistration (y/n)? " )
            if response != 'y':
                continue
        reg.unregister( twat )

    # record registration changes
    reg.dump_to_file()

else:
    parser.error( 'input required' )
