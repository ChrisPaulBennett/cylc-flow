#!/bin/bash

set -e  # ABORT on error

function print_usage() 
{
	echo "usage:"
    echo "  cylc register [options] -s NAME PATH"
    echo "  cylc register [options] -d NAME"
    echo "  cylc register [options]"
    echo ""
    echo "Register a configured cylc system for use under a given name,"
    echo "or review, check, or unregister currently registered systems." 
    echo "This information is stored under \$HOME/.cylc/registered."
    echo ""
    echo "Registration simply associates a name with a system definition"
    echo "directory, after which the name can be used to refer to the"
    echo "system when invoking other cylc commands."
    echo ""
    echo "The registered name is also used along with your username to"
    echo "construct a unique Pyro nameserver 'group name' for a system,"
    echo "allowing multiple systems to run at once without interfering."
    echo ""
    echo "To run multiple instance of *the same system* at once, just"
    echo "register the one system under several different names - but"
    echo "if you do this, be aware that for real (non dummy-mode)"
    echo "operation, multiple instances of the external system must be"
    echo "also be able to run without interference!"
    echo ""
    echo "arguments:"
    echo "  PATH         Path to the system definition directory."
    echo ""
    echo "options:"
    echo "  -h, --help   Print this usage message and exit"
    echo "  -s NAME      Name under which to register the system."
    echo "  -c           Check all currently registered systems, print"
    echo "               their names and locations, and unregister any"
    echo "               that no longer point to a configured system."
    echo "  -f           Force: overwrite an existing registration."
    echo "  -d NAME      Delete (unregister) a registered system name."
    echo "  -r           Reset: delete (unregister) ALL your registered"
    echo "               system names."
}

function check_configured()
{
    SYS_DIR=$1

    # is this a cylc system definition directory?
    if [[ ! -d $SYS_DIR/taskdef/ || \
        ! -d $SYS_DIR/scripts ]]; then
        echo "ERROR: $SYS_DIR"
        echo "is not a cylc system definition directory: it does"
        echo "not contain taskdef and/or scripts sub-directories."
        return 1
    fi

    # has this cylc system definition directory been configured yet?
    if [[ ! -f $SYS_DIR/system_config.py || \
        ! -f $SYS_DIR/system_tasks.py ]]; then
        echo "ERROR: $SYS_DIR"
        echo "has not been configured yet: it does not contain config"
        echo "and/or task class modules. Use 'cylc configure' first."
        return 1
    fi

    # all good
    return 0
}

# cheap hack to get '--help', which isn't allowed by getopts
if [[ $1 == '--help' ]]; then
    print_usage
    exit 0
fi

NAMED=false
CHECK=false
FORCE=false
RESET=false
DELETE=false
while getopts "rfchs:d:" opt; do
    case $opt in
        h)
        print_usage
        exit 0
        ;;
        s)
        NAMED=true
        NAME=$OPTARG
        ;;
        d)
        DELETE=true
        NAME=$OPTARG
        ;;
        c)
        CHECK=true
        ;;
        f)
        FORCE=true
        ;;
        r)
        RESET=true
        ;;
    esac
done

shift $(( OPTIND -1 ))

if ! $NAMED && ! $DELETE && ! $CHECK && ! $RESET; then
    print_usage
    exit 1
fi

# make the registration directory if necessary
REG_DIR=$HOME/.cylc/registered
[[ ! -d $REG_DIR ]] && mkdir -p $REG_DIR

if $RESET; then
    echo "WARNING: DELETING ALL CURRENT SYSTEM REGISTRATIONS"
    COUNT=0
    cd $REG_DIR
    for REG in *; do
        COUNT=$((COUNT+1))
        echo "[$COUNT] $REG: $(cat $REG)"
        rm $REG
    done
    exit 0
fi

if $DELETE; then
    REG=$REG_DIR/$NAME
    if [[ -f $REG ]]; then
        echo "DELETING: $NAME -> $(cat $REG)"
        rm $REG
        exit 0
    else
        echo "ERROR: $NAME is not registered."
        exit 1
    fi
fi

if $NAMED; then
    [[ $# != 1 ]] && { print_usage; exit 1; }
    SYS_DIR=$1
    if [[ $SYS_DIR != /* ]]; then
        # make absolute path
        SYS_DIR=$PWD/$SYS_DIR
        # remove trailing '/'
        SYS_DIR=${SYS_DIR%/}
    fi

    # check the new system has been configured
    ! check_configured $SYS_DIR && exit 1

    # is the system already registered?
    if [[ -f $REG_DIR/$NAME ]]; then
        TO=$( cat $REG_DIR/$NAME )
        if [[ $TO = $SYS_DIR ]]; then
            # already registered as requested
            echo "ALREADY REGISTERED: $NAME -> $SYS_DIR"
            exit 0
        else
            # already registered for access to another system
            if ! $FORCE; then
                echo "ALREADY REGISTERED: $NAME -> $TO"
                echo "Use the '-f' option to re-register"
                exit 1
            fi # else continue on to the reg code below
        fi
    fi
    
    # register the system
    echo $SYS_DIR > $REG_DIR/$NAME
    echo "NEW: $NAME -> $SYS_DIR"

    exit 0
fi

if $CHECK; then
    # go to user registration directory
    cd $REG_DIR
    # how many systems registered?
    N_REG=$( ls -1 | wc -l )
    echo "You have $N_REG systems registered"
    [[ $N_REG = 0 ]] && exit 0

    # check and print each registered system
    COUNT=0
    for NAME in *; do 
        COUNT=$((COUNT + 1 ))
        SYS_DIR=$( cat $NAME )
        if check_configured $SYS_DIR; then
            echo "[${COUNT}] ${NAME}: $SYS_DIR"
        else
            echo " UNREGISTERING $NAME"
            rm -f $NAME
        fi
    done
    exit 0
fi
