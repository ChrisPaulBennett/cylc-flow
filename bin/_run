#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2011 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from optparse import OptionParser
from cycle_time import ct, CycleTimeError
from scheduler import scheduler

global debug
debug = True

class start( scheduler ):
    def __init__( self ):
        usage = """cylc [control] run|start [options] SUITE [START]

Start a suite running at a specified initial cycle time. To restart a
suite from a previous state (which may contain tasks at multiple cycle
times), see 'cylc restart SUITE'.

There are three start up modes that differ in how initial intercycle
dependencies are handled (at start up there is no previous cycle for
tasks, such as warm cycled forecast models, that normally depend on
tasks in previous cycles): 
  1/ Cold start (the default) -- start from scratch with special tasks 
  2/ Warm start (-w,--warm)   -- assume a previous cycle 
  3/ Raw  start (-r,--raw)    -- assume nothing
(These are all the same for a suite that has no intercycle dependencies).

1/ COLD START -- start from scratch, with special one off "cold start
tasks" to satisfy the initial dependencies of any tasks that normally
depend on tasks from a previous cycle (most notably the restart
dependencies of warm cycled forecast models). Cold start tasks
can run real processes (e.g. a special forecast to generate the initial
restart files for a warm cycled model) or, with no task command defined,
just act as a dummy proxy for some external process that has to occur
before the suite is started (e.g. a spinup run of some kind). For a
suite with no intercycle dependencies there is no distinction between
the cold, warm, and raw start methods. For a cold start, each task,
including designated cold start tasks, starts in the 'waiting' state
(i.e. prerequisites not satisfied) at the initial cycle time or at the
next valid cycle time thereafter for the task. 
  SUITE.RC: [special tasks] -> cold start = task1, task2, ...

2/ WARM START:
    This assumes that there was a previous cycle (from a previous suite
run - in which case a 'cylc restart' may be an option too) or that files
required from previous cycles have been put in place by some external
means. Start up is as for a cold start, except that designated
cold start tasks are inserted in the 'succeeded' state (i.e. outputs
completed). The cold start task list must be defined in the suite config
file:
  SUITE.RC: [special tasks] -> cold start = task1, task2, ...

3/ RAW START:
    This starts the suite as if in mid run without any special handling
- any tasks that depend on previous cycles will have to be triggered
manually. Start up is as for a cold start, except that designated
cold start tasks are excluded from the suite. The cold start task list
must be defined in the suite config file:
  SUITE.RC: [special tasks] -> cold start = task1, task2, ...

If you provide an initial cycle time on the command line, the suite.rc
initial AND final cycle times, if set, will be ignored.
 
NOTE:
  SUITE.RC: [special tasks]-> startup = task1, task2, ...
Start up tasks are one off tasks that are used only in a cold start; any
dependence on a start up task is ignored in subsequent cycles. This 
allows you to make everything wait on one or more start up tasks that
could, for example, clean out suite workspaces when a suite is started
from scratch (cold start).

NOTE: daemonize important suites with the POSIX nohup command:
  $ nohup cylc [con] run SUITE [START] > suite.out 2> suite.err &

See also:
    cylc [control] restart
    cylc [control] stop|shutdown

Arguments:
   SUITE                Private database registration GROUP:NAME of the
                        suite you want to run.
   [START]              (optional) Initial cycle time (YYYYMMDDHH). This will
                        override a start time set in the suite.rc file.""" 

        self.parser = OptionParser( usage )

        self.parser.add_option( "-w", "--warm", help="Warm start the suite",
        action="store_true", default=False, dest="warm" )

        self.parser.add_option( "-r", "--raw", help="Raw start the suite",
        action="store_true", default=False, dest="raw" )

        scheduler.__init__( self )

    def parse_commandline( self ):
        ( self.options, self.args ) = self.parser.parse_args()
        largs = len( self.args )
        if largs == 0:
            self.parser.error( "ERROR: suite group:name required." )
        elif largs > 2:
            self.parser.error( "ERROR: too many arguments." )

        self.start_time = None
        if largs == 2:
            try:
                self.start_time = ct( self.args[1] ).get()
            except CycleTimeError, x:
                raise SystemExit(x)

        scheduler.parse_commandline( self )

        global debug
        debug = self.options.debug

    def load_tasks_cold( self ):
        self.log.info( 'Cold Start ' + self.start_time )

        # set clock before using log (affects simulation mode only)
        self.clock.set( self.start_time )

        task_list = self.filter_initial_task_list( self.config.get_task_name_list() )
    
        for name in task_list:
            if name in self.asynchronous_task_list:
                tag = '1' # asynchronous tasks start with tag = 1
            else:
                tag = self.start_time
            itask = self.config.get_task_proxy( name, tag, 'waiting', stopctime=None, startup=True )
            # check stop time in case the user has set a very quick stop
            if self.stop_time and int( itask.tag ) > int( self.stop_time ):
                # we've reached the stop time already: delete the new task 
                itask.log( 'WARNING', "STOPPING at configured stop time " + self.stop_time )
                itask.prepare_for_death()
                del itask
            else:
                self.insert( itask )

    def load_tasks_warm( self ):
        self.log.info( 'Warm Start ' + self.start_time )

        # set clock before using log (affects simulation mode only)
        self.clock.set( self.start_time )

        task_list = self.filter_initial_task_list( self.config.get_task_name_list() )
        coldstart_tasks = self.config.get_coldstart_task_list()
        startup_tasks = self.config.get_startup_task_list()
        if len( coldstart_tasks ) == 0:
            self.log.warning( "THIS SUITE HAS NOT DEFINED THE 'cold start task list' CONFIG ITEM" )
        for name in task_list:
            # (startup=True is only for cold start)
            if name in self.asynchronous_task_list:
                tag = '1' # asynchronous tasks start with tag = 1
            else:
                tag = self.start_time
            itask = self.config.get_task_proxy( name, tag, 'waiting', stopctime=None, startup=False )
            if name in coldstart_tasks:
                itask.log( 'WARNING', "warm start: starting in succeeded state" )
                itask.state.set_status( 'succeeded' )
                itask.prerequisites.set_all_satisfied()
                itask.outputs.set_all_completed()
            if name in startup_tasks:
                itask.log( 'WARNING', "This is a warm start: I will self-destruct." )
                itask.prepare_for_death()
                del itask
                continue
            # check stop time in case the user has set a very quick stop
            if self.stop_time and int( itask.tag ) > int( self.stop_time ):
                # we've reached the stop time already: delete the new task 
                itask.log( 'WARNING', "STOPPING at configured stop time " + self.stop_time )
                itask.prepare_for_death()
                del itask
            else:
                self.insert( itask )

    def load_tasks_raw( self ):
        self.log.info( 'Raw Start ' + self.start_time )
        
        # set clock before using log (affects simulation mode only)
        self.clock.set( self.start_time )

        task_list = self.filter_initial_task_list( self.config.get_task_name_list() )

        coldstart_tasks = self.config.get_coldstart_task_list()
        startup_tasks = self.config.get_startup_task_list()
        if len( coldstart_tasks ) == 0:
            self.log.warning( "THIS SUITE HAS NOT DEFINED THE 'cold start task list' CONFIG ITEM" )

        for name in task_list:
            # startup=True only for cold start
            if name in self.asynchronous_task_list:
                tag = '1' # asynchronous tasks start with tag = 1
            else:
                tag = self.start_time
            itask = self.config.get_task_proxy( name, tag, 'waiting', stopctime=None, startup=False )
            if name in coldstart_tasks or name in startup_tasks:
                itask.log( 'WARNING', "This is a raw start: I will self-destruct." )
                itask.prepare_for_death()
                del itask
                continue
            # check stop time in case the user has set a very quick stop
            if self.stop_time and int( itask.tag ) > int( self.stop_time ):
                # we've reached the stop time already: delete the new task 
                itask.log( 'WARNING', "STOPPING at configured stop time " + self.stop_time )
                itask.prepare_for_death()
                del itask
                continue
            self.insert( itask )

if __name__ == '__main__':
    try:
        server = start()
    except Exception, x:
        if debug:
            raise
        else:
            print >> sys.stderr, x
            print >> sys.stderr, "(use --debug to see exception traceback)"
            sys.exit(1)
    try:
        server.run()
        #   For profiling:
        #import cProfile
        #cProfile.run( 'server.run()', 'fooprof' )
        #   and see Python docs "The Python Profilers"
        #   for how to display the resulting stats.
    except Exception, x:
        print >> sys.stderr, "ERROR CAUGHT, will clean up before exit"
        # this assumes no exceptions in shutdown()
        server.shutdown()

        if debug:
            raise
        else:
            print >> sys.stderr, "THE ERROR WAS:"
            print >> sys.stderr, x
            print >> sys.stderr, "(use --debug to see exception traceback)"
            sys.exit(1)
    except:
        # catch 'sys.exit(1)' and 'raise SystemExit("foo")'
        # TO DO: check these can actually be caught
        print >> sys.stderr, "ERROR CAUGHT; will clean up before exit"
        server.shutdown()
        raise
    else:
        # success!
        server.shutdown()
