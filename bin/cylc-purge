#!/usr/bin/env python

# THIS FILE IS PART OF THE CYLC SUITE ENGINE.
# Copyright (C) 2008-2015 NIWA
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""cylc [control] purge [OPTIONS] ARGS

Remove an entire tree of dependent tasks, over multiple cycles, from a running
suite. The top task will be forced to spawn and will then be removed, then so
will every task that depends on it, and every task that depends on those, and
so on until the given stop cycle point.

THIS COMMAND IS DANGEROUS.

UNDERSTANDING HOW PURGE WORKS: cylc identifies tasks that depend on the top
task, and then on its downstream dependents, and then on theirs, etc., by
simulating what would happen if the top task were to trigger: it artificially
sets the top task to the "succeeded" state then negotatiates dependencies and
artificially sets any tasks whose prerequisites get satisfied to "succeeded";
then it negotiates dependencies again, and so on until the stop cycle is
reached or nothing new triggers. Finally it marks "virtually triggered" tasks
for removal.  Consequently:
 * Dependent tasks will only be identified as such, and purged, if they have
   already spawned into the top cycle - so let them catch up first.
 * You can't purge a tree of tasks that has already triggered, because the
   algorithm relies on detecting new triggering.
Note that suite runahead must be sufficient enough to bridge the purge gap."""

import sys
if '--use-ssh' in sys.argv[1:]:
    sys.argv.remove('--use-ssh')
    from cylc.remote import remrun
    if remrun().execute(force_required=True):
        sys.exit(0)

import cylc.flags
from cylc.prompt import prompt
from cylc.task_id import TaskID
from cylc.network.suite_command import SuiteCommandClient
from cylc.CylcOptionParsers import cop

# Development note: post cylc-3.0 we could potentially use the suite
# graph to determine downstream tasks to remove in a purge operation without
# doing an internal triggering simulation.


def main():
    parser = cop(__doc__, pyro=True, argdoc=[("REG", "Suite name"),
                 ("TASK", "Task (NAME.CYCLE_POINT) to start purge"),
                 ("STOP_POINT", "Cycle point (inclusive!) to stop purge")])

    (options, args) = parser.parse_args()
    suite = args[0]

    target = args[1]
    stop_point_string = args[2]

    if not TaskID.is_valid_id(target):
        sys.exit("Invalid Task ID: " + target)
    name, start = TaskID.split(target)

    stop = stop_point_string

    prompt('Purge from %s to %s in %s' % (target, stop, suite), options.force)

    pclient = SuiteCommandClient(
        suite, options.owner, options.host, options.pyro_timeout,
        options.port, options.db, my_uuid=options.set_uuid,
        print_uuid=options.print_uuid)
    pclient.put_command('purge_tree', target, stop)


if __name__ == "__main__":
    try:
        main()
    except Exception as exc:
        if cylc.flags.debug:
            raise
        sys.exit(exc)
