#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from cylc.remote import remrun
if remrun().execute():
    sys.exit(0)

from cylc.CylcOptionParsers import cop
from cylc.config import config
from cylc.command_prep import prep_file

parser = cop( """cylc [info|prep] list|ls [OPTIONS] ARGS 

List suite namespaces names, either:
 1) tasks used in the graph
 2) all tasks (namespaces with no descendants)
 3) all namespaces (tasks and family groups)

By default, only graphed tasks are printed.
To visualize the full runtime tree use 'cylc graph -n'.""" )

parser.add_option( "-t","--all-tasks",
        help="Print all tasks, not just those used in the graph.",
        action="store_true", default=False, dest="all_tasks" )

parser.add_option( "-n","--all-namespaces",
        help="Print all runtime namespaces, just tasks.",
        action="store_true", default=False, dest="all_namespaces" )

(options, args) = parser.parse_args()

suite, suiterc = prep_file( args[0], options ).execute()

if options.all_tasks and options.all_namespaces:
    parser.error("Choose either -t or -n")
if options.all_tasks:
    which = "all tasks"
elif options.all_namespaces:
    which = "all namespaces"
else:
    which = "graphed tasks"

try:
    namespaces = config( suite, suiterc,
        template_vars=options.templatevars,
        template_vars_file=options.templatevars_file
        ).get_namespace_list( which )
except Exception,x:
    if options.debug:
        raise
    raise SystemExit(x)

namespaces.sort()
for ns in namespaces:
    print ns

