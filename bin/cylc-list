#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC SUITE ENGINE.
#C: Copyright (C) 2008-2013 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os, sys
from cylc.remote import remrun
if remrun().execute():
    sys.exit(0)

from cylc.CylcOptionParsers import cop
from cylc.config import config
from cylc.command_prep import prep_file

parser = cop( """cylc [info|prep] list|ls [OPTIONS] ARGS 

 1) List runtime namespaces (tasks and families), optionally with their
linearized inheritance precedence (known as "Method Resolution Order" in
programming languages with multiple inheritance).

 2) Print the first-parent inheritance hierarchy as a character graph.
This is the runtime inheritance tree determined by first parents alone.
If the suite does not make use of multiple inheritance it will be the
full inheritance hierarchy. First parents also define the primary family
groupings that are collapsible in gcylc suite views and the graph viewer.

To visualize the full multiple inheritance hierarchy use:
  'cylc graph -n'.""" )

parser.add_option( "-a","--all-tasks",
        help="Print all tasks, not just those used in the graph.",
        action="store_true", default=False, dest="all_tasks" )

parser.add_option( "-n","--all-namespaces",
        help="Print all runtime namespaces, not just tasks.",
        action="store_true", default=False, dest="all_namespaces" )

parser.add_option( "-m","--mro",
        help="Print the linear \"method resolution order\" for each namespace "
        "(the multiple-inheritance precedence order as determined by the "
        "C3 linearization algorithm).",
        action="store_true", default=False, dest="mro" )

parser.add_option( "-t","--tree",
        help="Print the first-parent inheritance hierarchy in tree form.",
        action="store_true", default=False, dest="tree" )

parser.add_option( "-b","--box",
        help="With -t/--tree, using unicode box characters. Your terminal "
        "must be able to display unicode characters.",
        action="store_true", default=False, dest="box" )

(options, args) = parser.parse_args()

suite, suiterc = prep_file( args[0], options ).execute()

if options.all_tasks and options.all_namespaces:
    parser.error("Choose either -a or -n")
if options.all_tasks:
    which = "all tasks"
elif options.all_namespaces:
    which = "all namespaces"
else:
    which = "graphed tasks"

if options.tree:
    if os.environ['LANG'] == 'C':
        print >> sys.stderr, "WARNING, ignoring -t/--tree: $LANG=C"
        options.tree = False

if options.tree and any( [options.all_tasks, options.all_namespaces, options.mro] ):
    print >> sys.stderr, "WARNING: -t chosen, ignoring non-tree options."

try:
    config = config( suite, suiterc,
        template_vars=options.templatevars,
        template_vars_file=options.templatevars_file)
    if options.tree:
        config.print_first_parent_tree( options.box )
    else:
        namespaces = config.get_namespace_list( which )
        namespaces.sort()
        for ns in namespaces:
            if options.mro:
                print ns,
                for i in config.get_mro( ns )[1:]:
                    print i,
                print
            else:
                print ns
except Exception,x:
    if options.debug:
        raise
    raise SystemExit(x)

