#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2012 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

from cylc.remote import remrun
remrun().execute()

import os, sys
import subprocess
from cylc.CylcOptionParsers import cop
from cylc.config import config

parser = cop( """cylc [info|prep] list|ls [OPTIONS] ARGS 

Print a suite's task list; or print or graph its runtime namespace
inheritance hierarchy.""" )

parser.add_option( "-t","--tree",
        help="Print the full runtime inheritance hierarchy.",
        action="store_true", default=False, dest="tree" )

parser.add_option( "-g","--graph",
        help="Graph the full runtime inheritance hierarchy.",
        action="store_true", default=False, dest="gui" )

parser.add_option( "--pretty",
        help="(with -t,--tree) use unicode box characters.",
        action="store_true", default=False, dest="pretty" )

(options, args) = parser.parse_args()

from cylc.compat import compat_reg
compat = compat_reg( args[0], options.db, options.verbose, options.debug )
compat.execute()
suite, suiterc = compat.get_suite()

if options.gui:
    command = [ 'cylc', 'graph', '--namespaces', suite ]
    try:
        # THIS BLOCKS UNTIL THE COMMAND COMPLETES
        retcode = subprocess.call( command )
    except OSError, x:
        print >> sys.stderr, 'ERROR: Unable to invoke', new_cylc
        raise SystemExit( str(x) )
    else:
        sys.exit(retcode)

try:
    config = config( suite, suiterc )
except Exception,x:
    if options.debug:
        raise
    raise SystemExit(x)

if options.tree or options.pretty:
    config.print_inheritance_tree( pretty=options.pretty )
else:
    config.print_task_list()

