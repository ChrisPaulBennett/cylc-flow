#!/usr/bin/env python

import os, sys
import cycle_time
import cylc_pyro_client
from CylcOptionParsers import PromptOptionParser
from port_scan import SuiteIdentificationError

parser = PromptOptionParser( """cylc [control] shutdown [options] SUITE [STOP]

1/ Shut down when all currently running tasks have finished (default). 
   No other tasks will be submitted to run in the meantime.

2/ Shut down AFTER the following event occurs:
    a/ all tasks have passed the cycle time STOP (YYYYMMDDHH)
    b/ the clock time has reached STOP (YYYY/MM/DD-HH:mm)
    c/ the task STOP (TASK%YYYYMMDDHH) has finished

3/ [--now] shut down immediately, regardless of tasks still running.
   WARNING: the final state dump file will reflect the state of the
   suite at shutdown; any tasks that run to completion post shutdown
   will thus be resubmitted, by default, if the suite is restarted.""", 
   [ """STOP                 YYYYMMDDHH (cycle time), or
                         YYYY/MM/DD-HH:mm (clock time), or
                          TASK%YYYYMMDDHH (task ID).""" ] )

parser.add_option( "--now", 
        help="Shut down immediately; see WARNING above.",
        action="store_true", default=False, dest="shutdownnow" )

(options, args) = parser.parse_args()

shutdown_at = False
if len( args ) == 2:
    shutdown_at = True
    shutdown_arg = args[1] 

suite = parser.get_suite_name()

try:
    proxy = cylc_pyro_client.client( suite ).get_proxy( 'remote' )
except SuiteIdentificationError, x:
    raise SystemExit(x)

method = None
if shutdown_at:
    # STOP argument detected
    if cycle_time.is_valid( shutdown_arg ):
        # STOP is a cycle time
        method = 'stop after cycle time'
    else:
        try:
            # YYYY/MM/DD-HH:mm
            date, time = shutdown_arg.split('-')
            yyyy, mm, dd = date.split('/')
            HH,MM = time.split(':')
        except:
            try:
                name, ctime = shutdown_arg.split('%')
            except:
                parser.error( "invalid STOP argument: " + shutdown_arg )
            else:
                # STOP is a task ID
                method = 'stop after task finishes'
        else:
            # STOP is a clock time
            method = 'stop after clock time'

    if not parser.prompt( 'Set shutdown time ' + shutdown_arg + ' for'):
        sys.exit(0)

    result = proxy.set_stop( shutdown_arg, method )

elif options.shutdownnow:
    if not parser.prompt( 'Shut down NOW' ):
        sys.exit(0)
    result = proxy.shutdown_now()

else:
    if not parser.prompt( 'Shut down' ):
        sys.exit(0)
    result = proxy.shutdown()

if result.success:
    print result.reason
else:
    print 'ERROR:', result.reason
    sys.exit(1)
