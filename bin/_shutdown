#!/usr/bin/env python

import os, sys
import cycle_time
import cylc_pyro_client
from CylcOptionParsers import PromptOptionParser
from port_scan import SuiteIdentificationError

parser = PromptOptionParser( """cylc [control] shutdown [options] SUITE [YYYYMMDDHH]

1/ Do not submit any more tasks to run, and shut down as soon as all
   tasks that are currently running have finished (this is the default).

2/ Shut down after all tasks have passed the cycle time YYYYMMDDHH.

3/ [--now] shut down immediately, regardless of tasks still running.
   WARNING: the final state dump file will reflect the state of the
   suite at shutdown; any tasks that run to completion post shutdown
   will thus be resubmitted, by default, if the suite is restarted.""", 
[ """YYYYMMDDHH           Future cycle time after which to shutdown.""" ] )

parser.add_option( "--now", 
        help="Shut down immediately; see WARNING above.",
        action="store_true", default=False, dest="shutdownnow" )

(options, args) = parser.parse_args()

shutdown_at = False
if len( args ) == 2:
    shutdown_at = True
    shutdown_time = args[1] 

suite = parser.get_suite_name()

try:
    proxy = cylc_pyro_client.client( suite ).get_proxy( 'remote' )
except SuiteIdentificationError, x:
    raise SystemExit(x)

if shutdown_at:
    if cycle_time.is_valid( shutdown_time ):
        shutdown_by_clock = False
    else:
        try:
            # YYYY/MM/DD-HH:mm
            date, time = shutdown_time.split('-')
            yyyy, mm, dd = date.split('/')
            HH,MM = time.split(':')
        except:
            parser.error( "invalid shutdown time argument: " + shutdown_time )
        else:
            shutdown_by_clock = True

    if not parser.prompt( 'Set shutdown time ' + shutdown_time + ' for'):
        sys.exit(0)

    if shutdown_by_clock:
        result = proxy.set_stop_clock( shutdown_time )
    else:
        result = proxy.set_stop_ctime( shutdown_time )

elif options.shutdownnow:
    if not parser.prompt( 'Shut down NOW' ):
        sys.exit(0)
    result = proxy.shutdown_now()

else:
    if not parser.prompt( 'Shut down' ):
        sys.exit(0)
    result = proxy.shutdown()

if result.success:
    print result.reason
else:
    print 'ERROR:', result.reason
    sys.exit(1)
