#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2012 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

""" 
Documentation
"""

import sys
from cylc import cylc_mode
from optparse import OptionParser
from cylc.task_message import message
from cylc.locking.task_lock import task_lock
from Pyro.errors import NamingError

usage = """cylc [task] failed [options] [REASON]

This command is part of the cylc task messaging interface, by which
means running tasks communicate with their parent suite; it is used to
report task failure (and releases the task lock to the lockserver, if
the lockserver is used).

NOTE that this command is automatically called at the end of the job
scripts of non-detaching tasks if the command scripting returns error
status; but it must be called manually in the external implementation
of detaching tasks ('manual completion = True').

Suite and task identity are determined from the task execution
environment supplied by the suite or by 'cylc [task] submit'. In the
latter case no communication occurs, but a message is printed to stdout.

See also:
    cylc [task] message
    cylc [task] started
    cylc [task] succeeded

Arguments:
    REASON        - message explaining why the task failed."""

parser = OptionParser( usage )

( options, args ) = parser.parse_args()

if len( args ) == 0:
    reason = None
else:
    reason = ' '.join( args )

# release task lock if using the lockserver
if not cylc_mode.mode().is_raw():
    try:
        if not task_lock().release():
            raise SystemExit( "Failed to release task lock" )
    except Exception, z:
        print >> sys.stderr, z
        raise SystemExit( "Failed to connect to a lockserver" )
try:
    message( reason ).send_failed()
except NamingError, x:
    print >> sys.stderr, 'ERROR: Failed to connect to task proxy.'
    raise SystemExit(x)
except Exception, x:
    raise SystemExit(x)
