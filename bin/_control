#!/usr/bin/env python

import os, sys
import port_scan
import gtk
from passphrase import passphrase
from optparse import OptionParser
from chooser import chooser
from config import config
from registration import localdb, RegistrationError
from gtkmonitor import standalone_monitor

import socket

if __name__ == "__main__":

    parser = OptionParser( """cylc control [options] [SUITE]

A real time suite control and monitoring GUI.

If SUITE is not specified a list of your registered suites will be
presented to choose from. If the chosen suite is already running the
GUI will connect to it; otherwise you can start the suite from within
the GUI or via the commandline (see 'cylc help'). Cylc control
reconnects if the target suite is restarted. 

WARNING: when you start an important suite use the 'nohup' command to
detach the suite from its parent shell, to prevent it being killed when
you log out. Also, when using nohup, 
    export PYTHONUNBUFFERED=true
so that cylc stdout will be written to nohup.out as the suite runs.

See also:
    cylc view
(a read-only version of the control GUI)

SUITE                  Registered name of the target suite.""")

    parser.add_option( "--host",
            help="cylc suite host (defaults to localhost).",
            metavar="HOST", action="store", default=socket.getfqdn(),
            dest="host" )

    ( options, args ) = parser.parse_args()

    host = options.host
    owner = os.environ["USER"]

    if len( args ) == 0:
        use_chooser = True
        suite = None
    elif len( args ) == 1:
        use_chooser = False
        suite = args[0]
    else:
        parser.error( "Wrong number of arguments" )

    imagedir = os.environ[ 'CYLC_DIR' ] + '/images'

    if use_chooser:
        app = chooser( host, imagedir )

    else:
        # get suite definition directory
        reg = localdb()
        try:
            suite_dir, descr = reg.get( suite )
        except RegistrationError, x:
            raise SystemExit( x )

        # get suite logging directory
        logging_dir = os.path.join( config( suite )['top level logging directory'], suite )

        # get secure passphrase
        try:
            passphrase = passphrase( suite ).get()
        except:
            passphrase = None

        # scan for suite port
        try:
            port = port_scan.get_port( suite, owner, host, passphrase )
        except:
            port = None
            print >> sys.stderr, "Suite " + suite + " is not running"

        app = standalone_monitor( suite, owner, host, port, suite_dir, logging_dir, imagedir )

    gtk.main()
