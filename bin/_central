#!/usr/bin/env python

import os, re, sys
from optparse import OptionParser
from registration import centraldb, RegistrationError

parser = OptionParser( usage = """cylc central [options] [arguments]

View or delete central suite database registrations. 

1/ Print registrations:
     $ cylc cen -p                      # print all
     $ cylc cen -p [FILTER options]     # print some

2/ Delete registrations (confirmation required):   
     $ cylc cen -d                      # delete all
     $ cylc cen -d [FILTER options]     # delete some
   (but note that you can only delete your own registrations)

3/ Clean up invalid registrations: (missing directory or suite.rc):
     $ cylc cen -c,--clean

FILTERING: 
  (a) The filter patterns are Regular Expressions, not shell globs, so
the general wildcard is '.*' (match zero or more of anything), NOT '*'.
  (b) For our purposes there is an implicit wildcard at the end of each
pattern ('foo' is the same as 'foo.*'); use the string end marker to
stop this ('foo$' matches only literal 'foo').
  (c) Omission of an item filter is taken to mean "match any of item".
  (d) to single out entries in the default group you have to specify
  the group name explicitly (-g default).

See also:
    cylc export   - export suites to the central database
    cylc import   - import suites from the central database
    cylc register - manage local suite registrations""" )

parser.add_option( "-p", "--print",
        help="Delete registrations.",
        action="store_true", default=False, dest="rprint" )

parser.add_option( "-d", "--delete",
        help="Delete registrations.",
        action="store_true", default=False, dest="delete" )

parser.add_option( "-o", "--owner",
        help="Owner filter Regular Expression.",
        metavar="RE", action="store", default=None, dest="ownerfilt" )

parser.add_option( "-g", "--group",
        help="Group filter Regular Expression.",
        metavar="RE", action="store", default=None, dest="groupfilt" )

parser.add_option( "-n", "--name",
        help="Name filter Regular Expression.",
        metavar="RE", action="store", default=None, dest="namefilt" )

parser.add_option( "-c", "--clean",
        help="Delete any registrations that are not valid.",
        action="store_true", default=False, dest="clean" )

parser.add_option( "-v", "--verbose",
        help="Turn on verbose output.",
        action="store_true", default=False, dest="verbose" )

( options, args ) = parser.parse_args()

if len(args) != 0:
    parser.error( "Commandline error")

if not options.rprint and not options.delete and not options.clean:
    parser.error( "Commandline error")

if options.clean:
    reg = centraldb() 
    try:
        reg.lock()
    except RegistrationError, x:
        raise SystemExit(x)
    reg.load_from_file()
    if reg.clean_all():
        reg.dump_to_file()
    reg.unlock()
    sys.exit(0)

# check for valid regular expressions:
for filt in options.ownerfilt, options.groupfilt, options.namefilt:
    if filt:
        try:
            re.compile( filt )
        except:
            raise SystemExit( 'Bad expression: ' + filt )

if options.delete:
    user = os.environ['USER']
    if options.ownerfilt:
        if options.ownerfilt != user:
            raise SystemExit( "You cannot delete registrations owned by " + options.ownerfilt )
    else:
        print "Setting owner filter to " + user
        ownerfilt = user

    reg = centraldb()
    try:
        reg.lock()
    except RegistrationError, x:
        raise SystemExit(x)
    reg.load_from_file()
 
    reg.unregister_multi( ownerfilt=options.ownerfilt,
            groupfilt=options.groupfilt, namefilt=options.namefilt,
            verbose=options.verbose )
    reg.dump_to_file()
    reg.unlock()

elif options.rprint:
    reg = centraldb()
    reg.load_from_file()
    reg.print_multi( ownerfilt=options.ownerfilt,
            groupfilt=options.groupfilt, namefilt=options.namefilt,
            verbose=options.verbose )
