#!/usr/bin/env python

import os, re, sys
from optparse import OptionParser
from registration import localdb, RegistrationError
from config import config, SuiteConfigError

# NOTE:ABSPATH (see below)
#   rdir = os.path.abspath( rdir )
# On GPFS os.path.abspath() returns the full path with fileset
# prefix which can make filenames (for files stored under the 
# cylc suite directory) too long for hardwired limits in the
# UM, which then core dumps. Manual use of $PWD to absolutize a relative
# path, on GPFS, results in a shorter string ... so I use this for now.

parser = OptionParser( usage = """cylc [register] create [options] SUITE PATH

Create local cylc suite registrations, which associate a suite name with
a suite definition directory (stored in $HOME/.cylc/registrations). Cylc
commands target a particular suite using its registered name.

Arguments:
     SUITE  -  GROUP:NAME or NAME (in the 'default' group)
     PATH   -  A cylc suite definition directory location.
    
If you accidentally delete the registration of a running suite, just
reregister it under the same name to regain access to the suite.""" )

parser.add_option( "-v", "--verbose",
        help="Turn on verbose output.",
        action="store_true", default=False, dest="verbose" )

( options, args ) = parser.parse_args()

if len(args) != 2:
    parser.error( "Wrong number of arguments" )

# NEW REGISTRATION: cylc register SUITE PATH
suite = args[0]
rdir = args[1]
if not os.path.isdir( rdir ):
    print "Second argument is not a valid directory: " + rdir
    print "Trying reversed arguments..."
    # + cylc register PATH SUITE 
    suite = args[1]
    rdir = args[0]
if not os.path.isdir( rdir ):
    raise SystemExit( 'ERROR: Suite definition PATH not valid' )

# remove trailing '/'
rdir = rdir.rstrip( '/' )
# remove leading './'
rdir = re.sub( '^\.\/', '', rdir )
# also strip / off name in case of registering same name as dir 
# whilst sitting one level up from the suite dir itself, using
# tab completion, and getting the args the wrong way around.
suite = suite.rstrip( '/' )

# make registered path absolute # see NOTE:ABSPATH above
if not re.search( '^/', rdir ):
    rdir = os.path.join( os.environ['PWD'], rdir )

# get suite title from config file
try:
    config = config( path=rdir )
except SuiteConfigError,x:
    raise SystemExit(x)
else:
    descr = config['title']

reg = localdb()
try:
    reg.lock()
except RegistrationError, x:
    raise SystemExit(x)

reg.load_from_file()
try:
    reg.register( suite, rdir, descr )
except RegistrationError, x:
    raise SystemExit(x)
reg.unlock()
reg.dump_to_file()
sys.exit(0)
