#!/usr/bin/env python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|

import os, sys, re
import cycle_time
import cylc_pyro_client
import Pyro.errors
from CylcOptionParsers import PromptOptionParser

parser = PromptOptionParser( """cylc kill [options] SUITE [TASK_ID] [CYCLE]

Remove a task, or all tasks with a given cycle time, from a running
suite. See also 'cylc purge'.

The target task will be forced to a spawn successor, if it has
not done so already, before being removed, unless you specify the
'--no-spawn' option.""",
["""TASK_ID              Task to remove (NAME%YYYYMMDDHH).
   CYCLE                Remove all tasks at this cycle (YYYYMMDDHH)."""])

parser.add_option( "--no-spawn", 
        help="Do not spawn successors before dying.",
        action="store_true", default=False, dest="no_spawn" )

(options, args) = parser.parse_args()

if len(args) != 2:
    parser.error( "Task ID or cycle time required" )

suite = parser.get_suite_name()
owner = os.environ['USER']
host = options.host
port = options.port

target = args[1]

kill_cycle = False
kill_task = False

if cycle_time.is_valid( target ):
    kill_cycle = True
elif re.search( '%', target ):
    kill_task = True
    try:
        ( name, cycle ) = target.split('%')
    except ValueError:
        parser.error( "Task ID must be NAME%YYYYMMDDHH")
    if not cycle_time.is_valid( cycle ):
        parser.error( "invalid cycle time: " + cycle )
else:
    parser.error( 'Input Format error? must be NAME%YYYYMMDDHH or YYYYMMDDHH' )

try:
    proxy = cylc_pyro_client.client( suite, owner, host, port).get_proxy( 'remote' )

    if kill_cycle:
        if parser.prompt( 'Kill ALL tasks in ' + target + ' in' ):
            if options.no_spawn:
                actioned, explanation = proxy.die_cycle( target, owner )
            else:
                actioned, explanation = proxy.spawn_and_die_cycle( target, owner )
            print explanation

    if kill_task:
        if parser.prompt( 'Kill task ' + target + ' in'):
            if options.no_spawn:
                actioned, explanation = proxy.die( target, owner )
            else:
                actioned, explanation = proxy.spawn_and_die( target, owner )
            print explanation

except Pyro.errors.NamingError, x:
    if options.debug:
        raise
    else:
        print x
        sys.exit(1)

if not actioned:
    sys.exit(1)
