#!/usr/bin/env python

import os, sys
import port_scan
import gtk
from optparse import OptionParser
from chooser import chooser
from registration import registrations
from preferences import prefs
from gtkmonitor import standalone_monitor, standalone_monitor_preload

import socket

if __name__ == "__main__":

    parser = OptionParser( """cylc gui [options] [SUITE]

Graphical User Interface for real time suite control and monitoring.

Displays information about running cylc suites, including the current
state of all tasks, scheduler log files, task stdout and stderr log, and
task prerequisites and outputs.

If SUITE is supplied, the task list will be loaded from the suite
definition directory so that a monitor can be displayed before the
suite starts up (normally the task list is acquired dynamically from a
running suite, via Pyro.

If SUITE is NOT supplied, you can select which suite to monitor from 
an auto-updating list of currently running suites.

Cylc gui reconnects if the target suite is restarted. 

SUITE                  Registered name of the target suite.""")

    parser.add_option( "--host",
            help="cylc suite host (defaults to localhost).",
            metavar="HOST", action="store", default=socket.getfqdn(),
            dest="host" )

    #parser.add_option( "-o", "--owner",
    #        help="Owner of SUITE, if you are not the owner.",
    #        metavar="USERNAME", default=os.environ["USER"],
    #        action="store", dest="owner" )

    ( options, args ) = parser.parse_args()

    host = options.host
    #owner = options.owner
    owner = os.environ["USER"]

    if len( args ) == 0:
        use_chooser = True
        suite = None
    elif len( args ) == 1:
        use_chooser = False
        suite = args[0]
    else:
        parser.error( "Wrong number of arguments" )

    rcfile = prefs( user=owner, silent=True )
    imagedir = os.environ[ 'CYLC_DIR' ] + '/images'

    if use_chooser:
        app = chooser( host, imagedir )

    else:
        # get suite definition directory
        reg = registrations( owner )
        if reg.is_registered( suite ):
            suite_dir = reg.get( suite )
        else:
            reg.print_all()
            raise SystemExit( "suite " + suite + " is not registered!" )

        found, port = port_scan.get_port( suite, owner, host )

        if not found:
            print >> sys.stderr, "WARNING: suite " + suite + " is not running"

        # get suite logging directory
        logging_dir = rcfile.get_suite_logging_dir( suite )
        app = standalone_monitor_preload( suite, owner, host, port, suite_dir, logging_dir, imagedir )

    gtk.main()
