#!/usr/bin/env python

import os, sys
import port_scan
import gtk
from passphrase import passphrase
from optparse import OptionParser
from chooser import chooser
from config import config
from registration import localdb, RegistrationError
from gtkmonitor import standalone_monitor

import socket

parser = OptionParser( """gcylc [SUITE]

This is the cylc graphical user interface. It is functionally equivalent
to the commandline interface ('cylc help') in most respects.

To start the main gcylc GUI from which you can access all functionality
for any of your own suites, and those registered in the database:
    1/ gcylc &

Or, to launch a suite control GUI for a registered suite:
    2/ gcylc SUITE &

NOTE: daemonize important suites with the POSIX nohup command:
    $ nohup gcylc [options] [SUITE] &

Arguments:
    [SUITE]                  GROUP:NAME of a registered suite.""")

#parser.add_option( "--host",
#        help="cylc suite host (defaults to localhost).",
#        metavar="HOST", action="store", default=socket.getfqdn(),
#        dest="host" )

( options, args ) = parser.parse_args()

if len(args) != 0 and len(args) != 1:
    parser.error( "Wrong number of arguments" )

# this is required for extensive use of the capture command in gcylc:
if 'TMPDIR' in os.environ:
    tmpdir = os.environ['TMPDIR']
elif 'SCRATCH' in os.environ:
    tmpdir = os.environ['SCRATCH']
else:
    raise SystemExit( 'You must export $TMPDIR or $SCRATCH before running gcylc' )

imagedir = os.environ[ 'CYLC_DIR' ] + '/images'

#host = options.host
host = socket.getfqdn()
owner = os.environ["USER"]

if len( args ) == 1:
    if args[0] == 'help':
        parser.print_help()
        sys.exit(0)

if len( args ) == 0:
    app = chooser( host, tmpdir, imagedir )
    gtk.main()
    sys.exit(0)

suite = args[0]

# get suite definition directory
reg = localdb()
reg.load_from_file()
try:
    suite_dir, descr = reg.get( suite )
except RegistrationError, x:
    raise SystemExit( x )

# get suite logging directory
logging_dir = os.path.join( config( suite )['top level logging directory'], suite )

# get secure passphrase
try:
    passphrase = passphrase( suite ).get()
except:
    passphrase = None

# scan for suite port
try:
    port = port_scan.get_port( suite, owner, host, passphrase )
except:
    port = None
    print >> sys.stderr, "Suite " + suite + " is not running"

app = standalone_monitor( suite, owner, host, port, suite_dir, logging_dir, imagedir )
gtk.main()

