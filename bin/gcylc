#!/usr/bin/env python

import os, sys
import port_scan
import gtk
from passphrase import passphrase
from optparse import OptionParser
from gcylc import MainApp
from config import config
from registration import localdb, RegistrationError
from controller import StandaloneControlApp

import socket

parser = OptionParser( """gcylc [SUITE]

This is the cylc graphical user interface. It is functionally equivalent
to the commandline interface ('cylc help') in most respects.

    1/ gcylc &
The gcylc main window displays suites in your private registration
database, and in the central database available to all users. By right
clicking on suites or registration groups you can access all cylc
functionality.

    2/ gcylc SUITE &
This invokes a control and monitoring application for a particular suite.

NOTE: daemonize important suites with the POSIX nohup command:
    $ nohup gcylc [options] [SUITE] &

Arguments:
    [SUITE]                  registered GROUP:NAME of a suite.""")

#parser.add_option( "--host",
#        help="cylc suite host (defaults to localhost).",
#        metavar="HOST", action="store", default=socket.getfqdn(),
#        dest="host" )

( options, args ) = parser.parse_args()

if len(args) != 0 and len(args) != 1:
    parser.error( "Wrong number of arguments" )

# this is required for extensive use of the capture command in gcylc:
if 'TMPDIR' in os.environ:
    tmpdir = os.environ['TMPDIR']
elif 'SCRATCH' in os.environ:
    tmpdir = os.environ['SCRATCH']
else:
    raise SystemExit( 'You must export $TMPDIR or $SCRATCH before running gcylc' )

imagedir = os.environ[ 'CYLC_DIR' ] + '/images'

#host = options.host
host = socket.getfqdn()
owner = os.environ["USER"]

if len( args ) == 1:
    if args[0] == 'help':
        parser.print_help()
        sys.exit(0)

if len( args ) == 0:
    app = MainApp( host, tmpdir, imagedir )
    gtk.main()
    sys.exit(0)

suite = args[0]

# get suite definition directory
reg = localdb()
reg.load_from_file()
try:
    suite_dir, descr = reg.get( suite )
except RegistrationError, x:
    raise SystemExit( x )

# get suite logging directory
logging_dir = os.path.join( config( suite )['top level logging directory'], suite )

# scan for suite port
try:
    port = port_scan.get_port( suite )
except:
    port = None
    print >> sys.stderr, "Suite " + suite + " is not running"
else:
    print "Suite " + suite + " is running on port " + str(port)

app = StandaloneControlApp( suite, owner, host, port, suite_dir, logging_dir, imagedir )
gtk.main()

