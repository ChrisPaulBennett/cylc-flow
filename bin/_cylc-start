#!/usr/bin/env python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|

import sys
from optparse import OptionParser

import cycle_time
from coldstart import coldstart
from scheduler import scheduler

class coldstart_scheduler( scheduler ):
    def __init__( self ):
        usage = """cylc start [options] SYSTEM

Cold start a cylc system. By default, every task in the system will be
instantiated, in the 'waiting' state, at the initial cycle time, or at
the next valid cycle time for the task.  

Arguments:
   SYSTEM               Registered name of the system to start.""" 

        self.parser = OptionParser( usage )

        self.parser.add_option( "--at", 
            help="Initial cycle time (YYYYMMDDHH).",
            metavar="CYCLE", action="store", default=None,
            dest="start_time" )

        scheduler.__init__( self )

    def parse_commandline( self ):
        ( self.options, self.args ) = self.parser.parse_args()

        if len( self.args ) == 0:
            self.parser.error( "System name argument required." )
        elif len( self.args ) > 1:
            self.parser.error( "Too many arguments." )

        if not self.options.start_time:
            parser.error( 'You must supply an initial cycle time' )
        else:
            self.start_time = self.options.start_time

        if not cycle_time.is_valid( self.start_time ):
            parser.error( "invalid cycle time: " + self.start_time )

        scheduler.parse_commandline( self )
        print "Starting from: " + self.start_time

    def load_system_config( self ):
        scheduler.load_system_config( self )
        # check for legal start time
        self.config.check_start_time( self.start_time )

    def create_task_pool( self ):
        # initialize the server (and create main logger)
        self.pool = coldstart( self.config, self.nameserver,
                self.groupname, self.dummy_mode, self.logging_dir,
                self.state_dump_file, self.exclude_tasks,
                self.include_tasks, self.start_time, self.stop_time,
                self.pause_time )

if __name__ == '__main__':
    server = coldstart_scheduler()
    server.configure()
    try:
        server.run()
    except Exception, x:
        # catch proper exceptions
        #print "ERROR 1"
        print x
        server.cleanup()
        #raise
    except:
        # catch 'sys.exit(1)' and 'raise SystemExit("foo")'
        #print "ERROR 2"
        server.cleanup()
        #raise
