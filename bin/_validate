#!/usr/bin/env python

import os, sys
from job_submit import job_submit
from optparse import OptionParser
from config import config, SuiteConfigError
from taskdef import DefinitionError

parser = OptionParser( """cylc [prep] validate [options] SUITE

(a) Parse and validate a suite config (suite.rc) file to check that
all entries conform to the $CYLC_DIR/conf/suiterc.spec specification.
(b) Attempt to instantiate a proxy object for each task in the suite.

IF THE SUITE.RC FILE USES INCLUDE-FILES: line numbers reported with 
validation errors will be wrong because the parser sees an inlined
version of the file. You can use 'cylc prep inline SUITE' to trace errors to
the correct source line, although the extra information reported by the
validator should be sufficient to make this unnecessary.

Arguments:
   SUITE    - suite registration [OWNER:]GROUP:NAME""")

parser.add_option( "-d", "--debug", help="print the "
        "exception traceback for validation errors.",
        action="store_true", default=False, dest="debug" )

(options, args) = parser.parse_args()

if len(args) != 1:
    parser.error( "Wrong number or arguments" )
else:
    suite = args[0]

print "Parsing Suite Config File"
try:
    config = config( suite )
    config.load_tasks()
except SuiteConfigError,x:
    if options.debug:
        raise
    else:
        raise SystemExit(x)

# Now instantiate each task
# TO DO: TEST THE FOLLOWING WITH VARIOUS ERRORS AND CLEAN UP
# THE RESULTING OUTPUT:
job_submit.cylc_env = {}
job_submit.global_env = {}
ctime = '2999010112'
print 'Instantiating Task Proxies:'
for tn in config.get_full_task_name_list():
    print '  - ', tn, '...', 
    try:
        # tasks used in the suite dependency graph
        task_proxy = config.get_task_proxy( tn, ctime, 'waiting', startup=True )
    except DefinitionError,x:
        msg = 'ERROR: ' + str(x)
        print msg
        raise SystemExit( msg )
    except KeyError, x:
        print '(not currently used)', '...',
        try:
            # tasks defined but not used in the suite graph
            task_proxy = config.get_task_proxy_raw( tn, ctime, 'waiting', startup=True )
        except DefinitionError,x:
            msg = 'ERROR: ' + str(x)
            print msg
            raise SystemExit( msg )
        except:
            print 'ERROR'
            raise
        else:
            print 'OK'
    else:
        print 'OK'

print "Suite " + suite + " validates OK."
