#!/usr/bin/env python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|


# TO DO: THIS SCRIPT NEEDS TO BE CLEANED UP WITH MORE CODE REUSE

import string, glob
import sys, os, re

def usage():
    print 'USAGE: ' + sys.argv[0] + ' <list of task definition files>'
    sys.exit(1)

def indent_more():
    global indent
    global indent_unit
    indent += indent_unit

def escape_quotes( strng ):
    return re.sub( '([\\\'"])', r'\\\1', strng )

def indent_less():
    global indent
    global indent_unit
    indent = re.sub( indent_unit, '', indent, 1 )
    
def print_parsed_info():

    global parsed_def

    for k in parsed_def:
        print
        print k + ':' 
        for val in parsed_def[ k ]:
            print ' - ' + val

def interpolate_cycle_times( strng ):
    # interpolate $(CYCLE_TIME [+/-N]) in a string
    # strng = 'a string'  (SINGLE QUOTES REQUIRED)

    # strip leading spaces
    strng = re.sub( "^'\s+", "'", strng )

    # replace "$(CYCLE_TIME)"
    strng = re.sub( "^'\$\(CYCLE_TIME\)'$",   "self.c_time",     strng ) # alone
    strng = re.sub( "^'\$\(CYCLE_TIME\)",     "self.c_time + '", strng ) # start line
    strng = re.sub( "\$\(CYCLE_TIME\)'$", "' + self.c_time"   ,  strng ) # end line
    strng = re.sub( "\$\(CYCLE_TIME\)" , "'  + self.c_time + '", strng ) # mid line

    # replace "$(CYCLE_TIME - XX )"
    m = re.search( '\$\(\s*CYCLE_TIME\s*-\s*(\d+)\s*\)', strng )
    if m:
        strng = re.sub( "^'\$\(\s*CYCLE_TIME.*\)'$",   "cycle_time.decrement( self.c_time, " + m.group(1) + ")",     strng ) # alone
        strng = re.sub( "^'\$\(\s*CYCLE_TIME.*\)",     "cycle_time.decrement( self.c_time, " + m.group(1) + ") + '", strng ) # start line
        strng = re.sub( "\$\(\s*CYCLE_TIME.*\)'$", "' + cycle_time.decrement( self.c_time, " + m.group(1) + ")",     strng ) # mid line
        strng = re.sub( "\$\(\s*CYCLE_TIME.*\)",   "' + cycle_time.decrement( self.c_time, " + m.group(1) + ") + '", strng ) # end line

    # replace "$(CYCLE_TIME + XX )"
    m = re.search( '\$\(\s*CYCLE_TIME\s*\+\s*(\d+)\s*\)', strng )
    if m:
        strng = re.sub( "^'\$\(\s*CYCLE_TIME.*\)'$",   "cycle_time.increment( self.c_time, " + m.group(1) + ")",     strng ) # alone
        strng = re.sub( "^'\$\(\s*CYCLE_TIME.*\)",     "cycle_time.increment( self.c_time, " + m.group(1) + ") + '", strng ) # start line
        strng = re.sub( "\$\(\s*CYCLE_TIME.*\)'$", "' + cycle_time.increment( self.c_time, " + m.group(1) + ")",     strng ) # mid line
        strng = re.sub( "\$\(\s*CYCLE_TIME.*\)",   "' + cycle_time.increment( self.c_time, " + m.group(1) + ") + '", strng ) # end line

    # now check for any environment variable $CYCLE_TIME or ${CYCLE_TIME}
    m = re.search( '\$CYCLE_TIME', strng )
    n = re.search( '\$\{CYCLE_TIME\}', strng )
    if m:
        strng = re.sub( "^'\$CYCLE_TIME",     "self.c_time + '", strng ) # start line
        strng = re.sub( "\$CYCLE_TIME'$", "' + self.c_time"   ,  strng ) # end line
        strng = re.sub( "\$CYCLE_TIME" , "'  + self.c_time + '", strng ) # mid line
    if n:
        strng = re.sub( "^'\$\{CYCLE_TIME\}",     "self.c_time + '", strng ) # start line
        strng = re.sub( "\$\{CYCLE_TIME\}'$", "' + self.c_time"   ,  strng ) # end line
        strng = re.sub( "\$\{CYCLE_TIME\}" , "'  + self.c_time + '", strng ) # mid line
    
    return strng

def require_quotes( strng, item ):
    # require enclosing quotes, then strip them off
    
    # first strip any whitespace
    str = string.strip( strng )

    m = re.match( '^".*"$', str )
    if m:
        stripped = string.strip( str, '"' )
    else:
        print 'ERROR: ' + item + ' must be enclosed in double quotes'
        sys.exit(1)

    return stripped

def time_trans( strng, hours=False ):
    # translate a time of the form:
    #  x sec, y min, z hr
    # into NUMERICAL MINUTES or HOURS,
    # and return a string thereof.

    if not re.search( '^\s*(.*)\s*min\s*$', strng ) and \
        not re.search( '^\s*(.*)\s*sec\s*$', strng ) and \
        not re.search( '^\s*(.*)\s*hr\s*$', strng ):
            print "ERROR: missing time unit on " + strng
            sys.exit(1)

    m = re.search( '^\s*(.*)\s*min\s*$', strng )
    if m:
        [ mins ] = m.groups()
        if hours:
            return str( float( mins / 60.0 ) )
        else:
            return str( float(mins) )

    m = re.search( '^\s*(.*)\s*sec\s*$', strng )
    if m:
        [ secs ] = m.groups()
        if hours:
            return str( float(secs)/3600.0 )
        else:
            return str( float(secs)/60.0 )

    m = re.search( '^\s*(.*)\s*hr\s*$', strng )
    if m:
        [ hrs ] = m.groups()
        if hours:
            return str( float(hrs) )
        else:
            return str( float(hrs)*60.0 )

def parse_prereq( prereq, OUT, name ):
    # case 0: conditional: [A] or [B]
    # case 1:                 "the quick brown fox"
    # case 2:          labelA "the quick brown fox"
    # case 3: 0,6,12 |        "the quick brown fox"
    # case 4: 0,6,12 | labelA "the quick brown fox"

    #import pdb
    #pdb.set_trace()

    # conditional expression
    m = re.search( 'conditional:\s+(.*)$', prereq )
    if m:
        expr = m.groups()[0]
        OUT.write( indent + 'self.' + name + '.set_conditional_expression( "' + expr + '" )\n' )
        return

    # cycle time conditional
    m = re.match( '^([\d,]+)\s*\|\s*(.*)$', prereq )
    if m:
        [ left, prereq ] = m.groups()
        # get a list of hours
        hours = left.split(',')
        prereq = re.sub( '^\s+', '', prereq )

    else:
        hours = None

    # label
    m = re.match( '^\s*(\w+)\s+(.*)$', prereq )
    if m:
        [ label, prereq ] = m.groups()
        label = '"' + label + '"'
    else:
        label = "None"

    req = require_quotes( prereq, 'prerequisites' )
    req = "'" + req + "'"
    req = interpolate_cycle_times( req )
    if hours:
        for hour in hours:
            OUT.write( indent + 'if int( hour ) == ' + hour + ':\n' )
            indent_more()
            OUT.write( indent + 'self.' + name + '.add( ' + req + ', ' + label + ' )\n' )
            indent_less()
    else:
        OUT.write( indent + 'self.' + name + '.add( ' + req + ', ' + label + ' )\n' )
 

#================= MAIN PROGRAM ========================================
def main( argv ):

    global parsed_def
    global FILE

    global indent, indent_unit
    indent = ''
    indent_unit = '    '

    task_class_file = 'task_classes.py'

    if len( argv ) < 2:
        usage()

    taskdir = argv[1]
    if not os.path.isdir( taskdir ):
        raise SystemExit( "Directory not found: " + taskdir )

    task_def_files = argv[2:]

    allowed_keys = [ 'LOGFILES', 'INHERIT', 'NAME', 'OWNER', 'CYCLES',
            'TASK', 'REMOTE_HOST', 'DIRECTIVES', 'COMMANDLINE',
            'EXTRA_SCRIPTING', 'ENVIRONMENT', 'INTERCYCLE',
            'PREREQUISITES', 'COLDSTART_PREREQUISITES',
            'SUICIDE_PREREQUISITES', 'OUTPUTS', 'N_RESTART_OUTPUTS',
            'TYPE', 'CONTACT_DELAY', 'DESCRIPTION', 'OUTPUT_PATTERNS',
            'FOLLOW_ON' ]

    allowed_types = ['tied', 'free', 'cycling_daemon' ]
    allowed_modifiers = ['dummy', 'sequential', 'oneoff', 'contact', 'catchup_contact' ]

    # open the output file
    FILE = open( task_class_file, 'w' )

    # python interpreter location
    FILE.write( '#!/usr/bin/env python\n\n' )

    # preamble for task class files
    preamble = '''
#!/usr/bin/env python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|

# WARNING: THIS FILE WAS AUTO-GENERATED BY cylc configure

from daemon import daemon
from asynchronous import asynchronous
from tied import tied
from free import free
from mod_oneoff import oneoff
from mod_sequential import sequential
from mod_contact import contact
from mod_catchup_contact import catchup_contact
from prerequisites_fuzzy import fuzzy_prerequisites
from prerequisites import prerequisites
from outputs import outputs
from cycling_daemon import cycling_daemon
from time import sleep
from task_output_logs import logfiles
import cycle_time
import task_state
import ordered_dict

'''

    n_files = len(task_def_files)
    i = 0

    seen = {}

    for task_def_file in task_def_files:

        print '  + ' + task_def_file

        i += 1

        DEF = open( task_def_file, 'r' )
        lines = DEF.readlines()
        DEF.close()

        # PARSE THE TASKDEF FILE----------------------------
        current_key = None
        parsed_def = {}
        for lline in lines:
            line = string.strip( lline )
            # skip blank lines
            if re.match( '^\s*$', line ):
                continue
            # skip comment lines
            if re.match( '^\s*#.*', line ):
                continue
            if re.match( '^%.*', line ):
                # new key identified
                current_key = string.lstrip( line, '%' )
                # print 'new key: ' + current_key,
                if current_key not in allowed_keys:
                    print 'ILLEGAL KEY ERROR: ' + current_key
                    sys.exit(1)
                parsed_def[ current_key ] = []
            else:
                if current_key == None:
                    # can this ever happen?
                    print "ERROR: no key identified"
                    sys.exit(1)
                # data associated with current key
                parsed_def[ current_key ].append( line ) 
        # -----------------------------------------------DONE
        # print_parsed_info()

        inherit = False
        if 'INHERIT' in parsed_def:
            inherit = True
            inherit_from = parsed_def['INHERIT'][0]

        taskdef_name = os.path.basename( task_def_file )
        task_name = 'class_' + re.sub( '.def$', '.py', taskdef_name )
        outfile = os.path.join( taskdir, task_name )
        modname = re.sub( '.py', '', os.path.basename( outfile ))
        OUT = open( outfile, 'w' )

        OUT.write( preamble )
        if inherit:
            OUT.write( 'from class_' + inherit_from + ' import ' + inherit_from + '\n\n')

        if re.match( '^.*\.py$', task_def_file ):
            # this file is a python class definition
            for line in lines:
                OUT.write( line )

            OUT.write( '\n' )
            continue


        # intercycle (DEFAULT False)
        intercycle = False
        if 'INTERCYCLE' in parsed_def:
            intercycle = parsed_def[ 'INTERCYCLE' ][0]
            if intercycle == 'True' or intercycle == 'true':
                intercycle = True

        delay = 0
        catchup_contact = False
        sequential = False
        contact = False
        oneoff = False
        dummy = False
        task_type = None

        if 'TYPE' not in parsed_def:
            if not inherit:
                print "ERROR: no %TYPE specified"
                sys.exit(1)

        else:

            tmp = parsed_def[ 'TYPE' ][0]
            typelist = tmp.split(',')

            task_type = typelist[0]
            if task_type not in allowed_types:
                print 'ERROR, unknown task class:', task_type
                sys.exit(1)

            if task_type == 'cycling_daemon':
                if 'OUTPUT_PATTERNS' not in parsed_def:
                    print 'ERROR, cycling daemon tasks must define OUTPUT_PATTERNS'
                    sys.exit(1)

            derived_from = task_type

            modifiers = typelist[1:]
            if len(modifiers) > 0:
                got_modifiers = True

                # strip white space
                modifiers = [ x.strip() for x in modifiers ]

                for modifier in modifiers:
                    if modifier not in allowed_modifiers:
                        print 'ERROR, unknown task modifier:', modifier
                        print allowed_modifiers
                        sys.exit(1)

                    if modifier == 'dummy':
                        dummy = True
                    elif modifier == 'sequential':
                        sequential = True
                    elif modifier == 'oneoff':
                        oneoff = True
                    elif modifier == 'contact':
                        contact = True
                    elif modifier == 'catchup_contact':
                        contact = True
                        catchup_contact = True

                # removed 'dummy' from modifiers; it is handled below by
                # simply replacing the external task, not class derivation.

                if 'dummy' in modifiers:
                    modifiers.remove( 'dummy' )

                # this assumes the order of modifiers does not matter.
                if len( modifiers ) >= 1:
                    derived_from = ','.join( modifiers ) + ', ' + derived_from

        if 'TASK' in parsed_def:
            external_task = parsed_def[ 'TASK' ][0]
            if dummy:
                print "WARNING: this task has the 'dummy' task type modifier, and therefore its"
                print "external task, " + external_task + ", will be replaced by _cylc-dummy-task."
        else:
            if not dummy and not inherit:
                print 'ERROR: no external task specified'
                sys.exit(1)

        # set external task for dummy tasks
        if dummy:
            external_task = '_cylc-dummy-task'

        follow_on = False
        if oneoff and intercycle:
            if 'FOLLOW_ON' not in parsed_def:
                print "ERROR: oneoff with intercycle dependants must define %FOLLOW_ON"
                sys.exit(1)
            else:
                follow_on = parsed_def['FOLLOW_ON'][0]

        task_init_def_args = 'c_time, initial_state, startup = False'
        task_inherit_super_args = 'c_time, initial_state, startup'
        task_init_args = 'initial_state'

        if contact:
            if 'CONTACT_DELAY' not in parsed_def:
                print "ERROR: contact classes must define %CONTACT_DELAY"
                sys.exit(1)

        if task_type == 'tied':
            if 'N_RESTART_OUTPUTS' not in parsed_def:
                print 'ERROR: tied tasks must define %N_RESTART_OUTPUTS'
                sys.exit(1)

        task_name = parsed_def[ 'NAME' ][0]

        short_name = task_name
        m = re.search( '^\s*(.*),\s*(.*)\s*$', task_name )
        if m:
            # short name given as well
            [ task_name, short_name ] = m.groups()

        if task_name in seen:
            print "ERROR: task name '" + task_name + "' has been defined already!"
            sys.exit(1)
        else:
            seen[ task_name ] = True

        FILE.write( 'from ' + modname + ' import ' + task_name + '\n' )

        # class definition
        if inherit:
            OUT.write( 'class ' + task_name + '(' + inherit_from + '):\n' )
        else:
            OUT.write( 'class ' + task_name + '(' + derived_from + '):\n' )

        indent_more()
 
        OUT.write( indent + '# AUTO-GENERATED FROM ' + task_def_file + '\n\n' )  
   
        # task name
        OUT.write( indent + 'name = \'' + task_name + '\'\n' )
        OUT.write( indent + 'short_name = \'' + short_name + '\'\n' )

        OUT.write( indent + 'instance_count = 0\n\n' )

        # task description
        if 'DESCRIPTION' in parsed_def:
            OUT.write( indent + 'description = []\n' )
            for line in  parsed_def[ 'DESCRIPTION' ]:
                OUT.write( indent + 'description.append("' + escape_quotes(line) + '")\n' )
            OUT.write( '\n' )
        else:
            print "ERROR: no %DESCRIPTION provided for task " + task_name
            sys.exit(1)

        # owner
        owner = None
        if 'OWNER' in parsed_def:
            owner = parsed_def[ 'OWNER' ][0]
            OUT.write( indent + 'owner = \'' + owner + '\'\n' )
        elif not inherit:
            OUT.write( indent + 'owner = None\n' )

        # external task
        OUT.write( indent + 'external_task = \'' + external_task + '\'\n\n' )

        # remote host
        remote_host = None
        if 'REMOTE_HOST' in parsed_def:
            remote_host = parsed_def[ 'REMOTE_HOST' ][0]
            OUT.write( indent + 'remote_host = \'' + remote_host + '\'\n\n' )
        else:
            OUT.write( indent + 'remote_host = None\n' )

        OUT.write( indent + 'job_submit_method = None\n' )

        if 'CYCLES' not in parsed_def:
            # NOTE: THIS WILL NEED TO BE MODIFIED FOR ASYNC TASKS
            if not inherit:
                print "ERROR: no %CYCLES provided for task " + task_name
                sys.exit(1)
            pass

        else:
            # valid hours
            OUT.write( indent + 'valid_hours = [' + parsed_def[ 'CYCLES' ][0] + ']\n\n' )

        if intercycle:
            OUT.write( indent + 'intercycle = ' + str(intercycle) + '\n\n' )

        if follow_on:
            OUT.write( indent + 'follow_on = "' + follow_on + '"\n\n' )

        # class init function
        OUT.write( indent + 'def __init__( self, ' + task_init_def_args + ' ):\n\n' )

        indent_more()

        if inherit:
            OUT.write( indent + 'super(' + task_name + ', self ).__init__(' + task_inherit_super_args + ' )\n\n' )

        if not inherit:
            OUT.write( indent + '# adjust cycle time to next valid for this task\n' )
            OUT.write( indent + 'self.c_time = self.nearest_c_time( c_time )\n' )
            OUT.write( indent + 'self.tag = self.c_time\n' )
            OUT.write( indent + 'self.id = self.name + \'%\' + self.c_time\n' )
            # FIXME ASYNC
            OUT.write( indent + 'hour = self.c_time[8:10]\n\n' )

        #if contact:
        if 'CONTACT_DELAY' in parsed_def: 
            for line in parsed_def[ 'CONTACT_DELAY' ]:
                line = re.sub( '\s+$', '', line )
                # look for conditionals
                m = re.match( '^([\d,]+)\s*\|\s*(.*)$', line )
                if m:
                    [ left, delay ] = m.groups()
                    # get a list of hours
                    hours = left.split(',')
                    for hour in hours:
                        OUT.write( indent + 'if int( hour ) == ' + hour + ':\n' )
                        indent_more()
                        OUT.write( indent + 'self.real_time_delay = ' + time_trans( delay, hours=True ) + '\n' )
                        indent_less()
                else:
                    delay = line
                    OUT.write( indent + 'self.real_time_delay = ' + time_trans( delay, hours=True ) + '\n' )

            OUT.write( '\n' )

        # ... prerequisites
        if not inherit or 'PREREQUISITES' in parsed_def:
            OUT.write( indent + 'self.prerequisites = prerequisites( self.id )\n' )

        if 'PREREQUISITES' in parsed_def:
            for line in parsed_def[ 'PREREQUISITES' ]:
                parse_prereq( line, OUT, 'prerequisites' )

        # ... suicide prerequisites
        if not inherit or 'SUICIDE_PREREQUISITES' in parsed_def:
            OUT.write( indent + 'self.suicide_prerequisites = prerequisites( self.id )\n' )

        if 'SUICIDE_PREREQUISITES' in parsed_def:
            for line in parsed_def[ 'SUICIDE_PREREQUISITES' ]:
                parse_prereq( line, OUT, 'suicide_prerequisites' )
 
        OUT.write( indent + 'self.logfiles = logfiles()\n' )
        if 'LOGFILES' in parsed_def:
            for lfile in parsed_def[ 'LOGFILES' ]:
                OUT.write( indent + 'self.logfiles.add_path("' + lfile + '")\n' )

        # ... outputs
        if not inherit or 'OUTPUTS' in parsed_def:
            OUT.write( '\n' )
            OUT.write( indent + 'self.outputs = outputs( self.id )\n' )
      
        if 'OUTPUTS' in parsed_def:
            for line in parsed_def[ 'OUTPUTS' ]:

                # look for conditionals
                m = re.match( '^([\d,]+)\s*\|\s*(.*)$', line )
                if m:
                    [ left, req ] = m.groups()
                    # get a list of hours
                    hours = left.split(',')

                    req = require_quotes( req, 'outputs' )

                    req = "'" + req + "'"
                    req = interpolate_cycle_times( req )
                    for hour in hours:
                        OUT.write( indent + 'if int( hour ) == ' + hour + ':\n' )
                        indent_more()
                        OUT.write( indent + 'self.outputs.add( ' + req + ' )\n' )
                        indent_less()
                else:
                    req = line

                    req = require_quotes( req, 'outputs' )

                    req = "'" + req + "'"
                    req = interpolate_cycle_times( req )
                    OUT.write( indent + 'self.outputs.add( ' + req + ' )\n' )

        # forecast model restarts
        if task_type == 'tied' or ( inherit and 'N_RESTART_OUTPUTS' in parsed_def ):
            for line in parsed_def['N_RESTART_OUTPUTS']:
                line = re.sub( '\s+$', '', line )
                # look for conditionals
                m = re.match( '^([\d,]+)\s*\|\s*(.*)$', line )
                if m:
                    [ left, right ] = m.groups()
                    # get a list of hours
                    hours = left.split(',')
                    for hour in hours:
                        OUT.write( indent + 'if int( hour ) == ' + hour + ':\n' )
                        indent_more()
                        n_restart_outputs = right
                        OUT.write( indent + 'self.register_restart_requisites(' + n_restart_outputs + ')\n' )

                        indent_less()
                else:
                    n_restart_outputs = line
                    OUT.write( indent + 'self.register_restart_requisites(' + n_restart_outputs +')\n' )

        OUT.write( indent + 'self.outputs.register()\n\n' )

        # are the prerequisites different for the first instance?
        if 'COLDSTART_PREREQUISITES' in parsed_def:
            OUT.write( indent + "if startup:\n" )
            indent_more()
            OUT.write( indent + '# overwrite prerequisites for startup case\n' )
            OUT.write( indent + 'self.prerequisites = prerequisites( self.id )\n' )

            for line in parsed_def[ 'COLDSTART_PREREQUISITES' ]:
                parse_prereq( line, OUT, 'prerequisites' )

            indent_less()
 
        # ... output patterns
        if not inherit:
            OUT.write( indent + 'self.output_patterns = []\n' )

        if 'OUTPUT_PATTERNS' in parsed_def:
            for line in parsed_def[ 'OUTPUT_PATTERNS' ]:
                 OUT.write( indent + 'self.output_patterns.append( ' + line + ')\n' )

        # environment variables
        if not inherit:
            OUT.write( '\n' + indent + 'self.env_vars = ordered_dict.ordered_dict()\n' )

        if 'ENVIRONMENT' in parsed_def:
            for pair in parsed_def[ 'ENVIRONMENT' ]:
                ( var, val ) = pair.split( ' ', 1 )
                var = "'" + var + "'"
                # interpolate $(CYCLE_TIME [+/-n]) 
                val = interpolate_cycle_times( "'" + val + "'" )
                OUT.write( indent + 'self.env_vars[' + var + '] = ' + val + '\n' )

        # command line
        if not inherit:
            OUT.write( '\n' + indent + 'self.commandline = []\n' )

        if 'COMMANDLINE' in parsed_def:
            for line in parsed_def[ 'COMMANDLINE' ]:
                line = "'" + line + "'"
                # interpolate $(CYCLE_TIME [+/-n]) 
                line = interpolate_cycle_times( line )
                OUT.write( indent + 'self.commandline.append(' + line + ')\n' )

        # batch queue scheduler directives (qsub or loadleveler)
        if not inherit:
            OUT.write( '\n' + indent + 'self.directives = {}\n' )

        if 'DIRECTIVES' in parsed_def:
            for pair in parsed_def[ 'DIRECTIVES' ]:
                ( var, val ) = pair.split( ' ', 1 )
                var = "'" + var + "'"
                # interpolate $(CYCLE_TIME [+/-n]) 
                val = interpolate_cycle_times( "'" + val + "'" )
                OUT.write( indent + 'self.directives[' + var + '] = ' + val + '\n' )


        if not inherit:
            OUT.write( '\n' + indent + 'self.extra_scripting = []\n' )

        if 'EXTRA_SCRIPTING' in parsed_def:
            for line in parsed_def[ 'EXTRA_SCRIPTING' ]:
                # cannot interpolate $(CYCLE_TIME+/-N) here because this
                # section is for shell scripting, not generated python.
                line = escape_quotes( line )
                OUT.write( indent + 'self.extra_scripting.append("' + line + '")\n' )
            OUT.write( '\n' )

        if not inherit:
            # call parent init methods
            # FOR PARENT CLASS TYPES THAT HAVE INIT METHODS!
            if catchup_contact:
                OUT.write( indent + 'catchup_contact.__init__( self )\n\n' )
 
            OUT.write( indent + task_type + '.__init__( self, ' + task_init_args + ' )\n\n' )

        indent_less()
        indent_less()

        OUT.close()
 
    FILE.close()

if __name__ == '__main__':
    main( sys.argv )

