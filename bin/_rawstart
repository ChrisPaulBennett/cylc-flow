#!/usr/bin/env python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|

import sys
from optparse import OptionParser

import cycle_time
from rawstart import rawstart
from scheduler import scheduler

debug = True

class rawstart_scheduler( scheduler ):
    def __init__( self ):

        usage = """cylc rawstart [options] SUITE CYCLE

RAW START a suite at a given initial cycle time. This starts a suite as
if in mid run (but without tasks of the previous cycle!). Each task
proxy is inserted in the 'waiting' state (i.e. prerequisites not
satisfied) at the initial cycle time, or at the next valid cycle time
for the task, except for designated cold start tasks (see suite.rc
documentation) which are NOT inserted. 

To get the suite running you will need to manually insert the coldstart
tasks, or manually trigger any forecast models (whose restart
prerequisites would normally be satisfied by tasks in a previous cycle,
or by coldstart tasks).

See also:
    cylc coldstart SUITE
    cylc warmstart SUITE

Arguments:
   SUITE                Registered name of the suite to start.
   CYCLE                Initial cycle time (YYYYMMDDHH).""" 

        self.parser = OptionParser( usage )

        scheduler.__init__( self )

    def parse_commandline( self ):
        ( self.options, self.args ) = self.parser.parse_args()

        if len( self.args ) != 2:
            self.parser.error( "Please supply a suite name and initial cycle time." )

        if cycle_time.is_valid( self.args[1] ):
            self.start_time = self.args[1]
        else:
            self.parser.error( "Invalid cycle time: " + self.args[1])

        scheduler.parse_commandline( self )

        global debug
        debug = self.options.debug

        print "Starting from: " + self.start_time

    def load_suite_config( self ):
        scheduler.load_suite_config( self )
        # check for legal start time
        #TO DO TO DO TO DO: self.config.check_start_time( self.start_time )

    def create_task_pool( self ):
        # initialize the server (and create main logger)
        self.pool = rawstart( self.config, self.clock, self.pyro,
                self.dummy_mode, self.use_quick_elim, self.logging_dir,
                self.logging_level, self.state_dump_file, self.exclude_tasks,
                self.include_tasks, self.start_time, self.stop_time,
                self.pause_time, self.graphfile )

if __name__ == '__main__':

    try:
        # parse the commandline and initialize the cylc server
        server = rawstart_scheduler()
    except Exception, x:
        if debug:
            raise
        else:
            print x
            print "(use --debug to see exception traceback)"
            sys.exit(1)

    try:
        # configure pyro, logging, etc., and load the suite task pool 
        server.configure()

        # crank it up baby!
        server.run()
        #   OR for profiling:
        #import cProfile
        #cProfile.run( 'server.run()', 'fooprof' )
        #   and see Python docs "The Python Profilers"
        #   for how to display the resulting stats.

    except Exception, x:

        print "ERROR CAUGHT, will clean up before exit"

        # this assumes no exceptions in cleanup()
        server.cleanup()

        if debug:
            raise
        else:
            print "THE ERROR WAS:"
            print x
            print "(use --debug to see exception traceback)"
            sys.exit(1)

    except:
        # catch 'sys.exit(1)' and 'raise SystemExit("foo")'
        # TO DO: check these can actually be caught
        print "ERROR CAUGHT; will clean up before exit"
        server.cleanup()
        raise
