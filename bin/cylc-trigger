#!/usr/bin/env python

# THIS FILE IS PART OF THE CYLC SUITE ENGINE.
# Copyright (C) 2008-2015 NIWA
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys

if '--host' in sys.argv[1:] and '--edit' in sys.argv[1:]:
    # Edit runs must always be re-invoked on the suite host.
    if '--use-ssh' not in sys.argv[1:]:
        sys.argv[1:].append('--use-ssh')

if '--use-ssh' in sys.argv[1:]:
    sys.argv.remove('--use-ssh')
    from cylc.remote import remrun
    if remrun().execute(force_required=True):
        sys.exit(0)

import re
import os
import time
import subprocess
from cylc.prompt import prompt
from cylc import cylc_pyro_client
from cylc.CylcOptionParsers import cop, multitask_usage
from cylc.command_prep import prep_pyro
import cylc.flags
from cylc.cfgspec.globalcfg import GLOBAL_CFG
from cylc.job_logs import CommandLogger


parser = cop("""cylc [control] trigger [OPTIONS] ARGS

Manually trigger a task or tasks. For single tasks you can choose to edit the
generated job script first, to apply one-off changes (--edit).  Triggering a
waiting task queues it for execution. If its queue is not limited it will
submit immediately, otherwise it will submit when released by its queue.
Triggering a queued task causes it to submit immediately even if that violates
the queue limit.
""" + multitask_usage, pyro=True, multitask=True, argdoc=[
    ('REG', 'Suite name'),
    ('MATCH', 'Task or family name matching regular expression'),
    ('POINT', 'Task cycle point (e.g. date-time or integer)')
    ]
)

parser.add_option(
    "-e", "--edit",
    help="Manually edit the job script before running it.",
    action="store_true", default=False, dest="edit_run")

parser.add_option(
    "-g", "--geditor",
    help="(with --edit-run) force use of the configured GUI editor.",
    action="store_true", default=False, dest="geditor")

(options, args) = parser.parse_args()
suite, pphrase = prep_pyro(args[0], options).execute()
name = args[1]
point_string = args[2]

if options.edit_run:
    jobfile_path = CommandLogger.get_latest_job_log(
        suite, name, point_string)
    try:
        jobfile_mtime = os.stat(jobfile_path).st_mtime
    except OSError:
        # No job script yet.
        jobfile_mtime = None

try:
    proxy = cylc_pyro_client.client(
        suite, pphrase, options.owner,
        options.host, options.pyro_timeout, options.port
        ).get_proxy('command-interface')
    prompt(
        'Trigger task(s) ' + name + ' at ' + point_string + ' in ' + suite,
        options.force
    )
    result = proxy.put(
        'trigger task', name, point_string, options.is_family,
        options.edit_run)
except Exception as exc:
    if cylc.flags.debug:
        raise
    sys.exit(exc)

if not result[0]:
    sys.exit(result[1])

if options.edit_run:
    if options.geditor:
        editor = GLOBAL_CFG.get(['editors', 'gui'])
    else:
        editor = GLOBAL_CFG.get(['editors', 'terminal'])

    count = 0
    MAX_TRIES = 10
    while True:
        count += 1
        # Wait for the new jobfile to be written.
        try:
            if os.stat(jobfile_path).st_mtime > jobfile_mtime:
                break
        except:
            # No job script yet.
            pass
        if count > MAX_TRIES:
            sys.exit('ERROR: no job file after %s seconds' % MAX_TRIES)
        time.sleep(1)

    # The editor command may have options, e.g. 'emacs -nw'.
    command_list = re.split(' ', editor)
    command_list.append(jobfile_path)
    command = ' '.join(command_list)
    try:
        # Edit the job file (this blocks until editor exit).
        retcode = subprocess.call(command_list)
        if retcode != 0:
            sys.exit(
                'ERROR, command failed with %d:\n %s' % (retcode, command))
    except OSError:
        sys.exit('ERROR, unable to execute:\n %s' % command)

    # Release the task proxy to run.
    result = proxy.put(
        'release task', name, point_string, options.is_family)
