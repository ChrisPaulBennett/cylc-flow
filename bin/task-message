#!/usr/bin/python

""" 
Standalone interface between external EcoConnect tasks/models and the
task objects that represent them in the controller.

Sends a message to task proxy object in a cyclon instance, by calling
[task object].incoming(<message>). The task is identified by its
unique "task id" <NAME>%<REFTIME>.
"""

import sys
import Pyro.core
import config

# command line arguments
if len( sys.argv ) != 5:
    print "USAGE:", sys.argv[0], "<priority> <task name> <REFERENCE_TIME> <quoted message>"
    print "   priority: CRITICAL, WARNING, or NORMAL"
    sys.exit(1)
    
config = config.config()
config.user_override()
config.check()

[priority, task_name, ref_time] = sys.argv[1:4]
message = sys.argv[4]

# TO DO: use exception handling when I know how to report the real error
# (which is generally more useful than my own error message)

# connect to the task object inside the control program
#try:
task = Pyro.core.getProxyForURI('PYRONAME://' +  config.get('system_name') + '.' + task_name + '%' + ref_time )
task.incoming( priority, message )
#except:
#    # nameserver not found, or object not registered with it?
#    print "ERROR: failed to connect to " + task_name + "_" + ref_time
#    print "Trying dead letter box"

#    try:
#        dead_box = Pyro.core.getProxyForURI('PYRONAME://' + config.get('system_name') + '.' + 'dead_letter_box' )
#        dead_box.incoming( message )
#    except:
#        # nameserver not found, or object not registered with it?
#        print "ERROR: failed to connect to pyro nameserver"
#        sys.exit(1)
