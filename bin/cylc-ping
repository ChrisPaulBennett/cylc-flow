#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2012 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
if '--use-ssh' in sys.argv[1:]: 
    sys.argv.remove( '--use-ssh' )
    from cylc.remote import remrun
    remrun().execute()

import os
from cylc.CylcOptionParsers import cop
from cylc.port_scan import get_port, SuiteIdentificationError
from cylc.conf.CylcGlobals import pyro_base_port, pyro_port_range
from cylc.TaskID import TaskID, TaskIDError
from cylc import cylc_pyro_client
from cylc.hostname import hostname
from cylc.passphrase import passphrase, SecurityError

parser = cop( """cylc [discover] ping [OPTIONS] ARGS
    
If suite REG (or task TASK in it) is running, exit (silently, unless
-v,--verbose is specified); else print an error message and exit with
error status. For tasks, success means the task proxy is currently in
the 'running' state.""",
    pyro=True,
    argdoc=[('REG', 'Suite name'), 
            ('[TASK]', 'Task NAME%TAG (TAG is cycle time or "a:INT")')])

parser.add_option( "--print-ports",
        help="Print cylc's configured port range.",
        action="store_true",default=False, dest="print_ports" )

( options, args ) = parser.parse_args()

from cylc.compat import compat_pyro
compat = compat_pyro( args[0], options.owner, options.host,
        options.pfile, options.verbose, options.debug )
compat.execute()
suite, junk = compat.get_suite()

if options.print_ports:
    print "cylc port range from $CYLC_DIR/lib/cylc/pyro_server.py:"
    print pyro_base_port, '<= port <=', pyro_base_port + pyro_port_range
    sys.exit(0)

pphrase = passphrase( suite, options.owner, options.host ).get(options.pfile)
try:
    port = get_port( suite, owner=options.owner, host=options.host,
            pphrase=pphrase, silent = not options.verbose )
except SuiteIdentificationError, x:
    if options.debug:
        raise
    raise SystemExit( x )

if len(args) == 1:
    sys.exit(0)

# cylc ping SUITE TASKID
task_id = args[1]
try:
    tid = TaskID( task_id )
except TaskIDError,x:
    raise SystemExit(x)
else:
    task_id = tid.getstr()

try:
    proxy = cylc_pyro_client.client( suite, owner=options.owner,
            host=options.host, pfile=options.pfile ).get_proxy( 'remote' )
except Exception, x:
    if options.debug:
        raise
    raise SystemExit(x)

result = proxy.ping_task( task_id )

if not result.success:
    sys.exit( 'ERROR: ' + result.reason )

