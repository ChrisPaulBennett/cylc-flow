#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2011 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os, sys, re
import cycle_time
import cylc_pyro_client
from CylcOptionParsers import PromptOptionParser
from port_scan import SuiteIdentificationError

parser = PromptOptionParser( """cylc [control] remove|kill [options] SUITE [TASK_ID] [CYCLE]

Remove a task, or all tasks with a given cycle time, from a running
suite. See also 'cylc control purge'.

The target task will be forced to a spawn successor, if it has
not done so already, before being removed, unless you specify the
'--no-spawn' option.""",
["""TASK_ID              Task to remove (NAME%YYYYMMDDHH).
   CYCLE                Remove all tasks at this cycle (YYYYMMDDHH)."""])

parser.add_option( "--no-spawn", 
        help="Do not spawn successors before dying.",
        action="store_true", default=False, dest="no_spawn" )

(options, args) = parser.parse_args()

if len(args) != 2:
    parser.error( "Task ID or cycle time required" )

suite = parser.get_suite_name()

target = args[1]

kill_cycle = False
kill_task = False

if cycle_time.is_valid( target ):
    kill_cycle = True
elif re.search( '%', target ):
    kill_task = True
    try:
        ( name, cycle ) = target.split('%')
    except ValueError:
        parser.error( "Task ID must be NAME%YYYYMMDDHH")
    if not cycle_time.is_valid( cycle ):
        parser.error( "invalid cycle time: " + cycle )
else:
    parser.error( 'Input Format error? must be NAME%YYYYMMDDHH or YYYYMMDDHH' )

try:
    proxy = cylc_pyro_client.client( suite ).get_proxy( 'remote' )
except SuiteIdentificationError, x:
    raise SystemExit(x)

if kill_cycle:
    if not parser.prompt( 'Kill ALL tasks in ' + target + ' in' ):
        sys.exit(0)
    if options.no_spawn:
        result = proxy.die_cycle( target )
    else:
        result = proxy.spawn_and_die_cycle( target )

if kill_task:
    if not parser.prompt( 'Kill task ' + target + ' in'):
        sys.exit(0)
    if options.no_spawn:
       result = proxy.die( target )
    else:
       result = proxy.spawn_and_die( target )

if result.success:
    print result.reason
else:
    print 'ERROR:', result.reason
    sys.exit(1)
