#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2011 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os, re, sys
from optparse import OptionParser
from cylc.registration import localdb, RegistrationError
from cylc.config import get_suite_title, SuiteConfigError

parser = OptionParser( usage = """cylc [db] register [options] SUITE PATH

Register a suite in your private suite database. Suite registrations
associate a GROUP and a NAME with a suite definition directory. This 
must be done before you can use a suite - cylc commands reference a
particular suite by its GROUP:NAME.

Arguments:
     SUITE  -  Private suite database registration GROUP:NAME
     PATH   -  A cylc suite definition directory location.""" )

parser.add_option( "-v", "--verbose",
        help="Turn on verbose output.",
        action="store_true", default=False, dest="verbose" )

( options, args ) = parser.parse_args()

if len(args) != 2:
    parser.error( "Wrong number of arguments" )

# NEW REGISTRATION: cylc register SUITE PATH
suite = args[0]
rdir = args[1]
if not os.path.isdir( rdir ):
    print "Second argument is not a valid directory: " + rdir
    print "Trying reversed arguments..."
    # + cylc register PATH SUITE 
    suite = args[1]
    rdir = args[0]
if not os.path.isdir( rdir ):
    raise SystemExit( 'ERROR: Suite definition PATH not valid: ' + rdir )

# get suite title by parsing the config file
try:
    title = get_suite_title( path=rdir )
except SuiteConfigError,x:
    raise SystemExit(x)

reg = localdb()
try:
    reg.lock()
except RegistrationError, x:
    raise SystemExit(x)

reg.load_from_file()
try:
    reg.register( suite, rdir, title )
except RegistrationError, x:
    print >> sys.stderr, x
    reg.unlock()
    sys.exit(1)
reg.unlock()
reg.dump_to_file()
sys.exit(0)
