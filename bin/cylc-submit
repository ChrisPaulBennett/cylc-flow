#!/usr/bin/env python

# THIS FILE IS PART OF THE CYLC SUITE ENGINE.
# Copyright (C) 2008-2017 NIWA
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""cylc [task] submit|single [OPTIONS] ARGS

Submit a single task to run just as it would be submitted by its suite.  Task
messaging commands will print to stdout but will not attempt to communicate
with the suite (which does not need to be running).

For tasks present in the suite graph the given cycle point is adjusted up to
the next valid cycle point for the task. For tasks defined under runtime but
not present in the graph, the given cycle point is assumed to be valid.

WARNING: do not 'cylc submit' a task that is running in its suite at the
same time - both instances will attempt to write to the same job logs."""

import sys
from cylc.remote import remrun
if remrun().execute():
    sys.exit(0)

import os

from cylc.cfgspec.globalcfg import GLOBAL_CFG
from cylc.config import SuiteConfig
from cylc.cycling.loader import get_point
import cylc.flags
from cylc.job_host import RemoteJobHostManager
from cylc.mp_pool import SuiteProcPool
from cylc.option_parsers import CylcOptionParser as COP
from cylc.suite_srv_files_mgr import SuiteSrvFilesManager
from cylc.task_id import TaskID
from cylc.task_job_mgr import TaskJobManager
from cylc.task_proxy import TaskProxy
from cylc.task_state import TASK_STATUS_SUBMIT_FAILED
from cylc.templatevars import load_template_vars
import cylc.version  # Ensures '$CYLC_VERSION' is set.


def main():
    """cylc submit CLI.

    No TASK EVENT HOOKS are set for the submit command because there is
    no scheduler instance watching for task failure etc.

    Note: a suite contact env file is not written by this command (it
    would overwrite the real one if the suite is running).
    """
    parser = COP(
        __doc__, jset=True, icp=True,
        argdoc=[("REG", "Suite name"),
                ("TASK", "Target task (" + TaskID.SYNTAX + ")")])
    parser.set_defaults(sched=False, dry_run=False)
    parser.add_option(
        "-d", "--dry-run",
        help="Generate the job script for the task, but don't submit it.",
        action="store_true", dest="dry_run")
    (options, args) = parser.parse_args()
    if options.debug:
        cylc.flags.debug = True
    suite, task_id = args
    if not TaskID.is_valid_id(task_id):
        sys.exit("Invalid task ID " + task_id)
    suiterc = SuiteSrvFilesManager().get_suite_rc(suite)
    suite_dir = os.path.dirname(suiterc)
    # For user-defined batch system handlers
    sys.path.append(os.path.join(suite_dir, 'python'))
    suite_run_dir = GLOBAL_CFG.get_derived_host_item(
        suite, 'suite run directory')

    # load suite config
    config = SuiteConfig.get_inst(
        suite, suiterc,
        load_template_vars(options.templatevars, options.templatevars_file),
        cli_initial_point_string=options.icp)

    GLOBAL_CFG.create_cylc_run_tree(suite)

    RemoteJobHostManager.get_inst().single_task_mode = True
    task_job_mgr = TaskJobManager()
    task_job_mgr.job_file_writer.set_suite_env({
        'CYLC_UTC': str(config.cfg['cylc']['UTC mode']),
        'CYLC_DEBUG': str(cylc.flags.debug),
        'CYLC_VERBOSE': str(cylc.flags.verbose),
        'CYLC_SUITE_NAME': suite,
        'CYLC_CYCLING_MODE': str(cylc.flags.cycling_mode),
        'CYLC_SUITE_INITIAL_CYCLE_POINT': str(
            config.cfg['scheduling']['initial cycle point']),
        'CYLC_SUITE_FINAL_CYCLE_POINT': str(
            config.cfg['scheduling']['final cycle point']),
    })

    task_name, point_string = TaskID.split(task_id)
    itask = TaskProxy(
        config.get_taskdef(task_name),
        get_point(point_string).standardise(),
        is_startup=True)
    if options.dry_run:
        if not task_job_mgr.prep_submit_task_jobs(
                suite, [itask], dry_run=True):
            sys.exit(1)
        print "JOB SCRIPT=%s" % itask.get_job_log_path(
            itask.HEAD_MODE_LOCAL, tail=itask.JOB_FILE_BASE)
    else:
        task_job_mgr.submit_task_jobs(suite, [itask], proc_pool_size=1)
        proc_pool = SuiteProcPool.get_inst()
        while proc_pool.results:
            proc_pool.handle_results_async()
        proc_pool.close()
        proc_pool.join()
        if itask.summary['submit_method_id'] is not None:
            print 'Job ID:', itask.summary['submit_method_id']

    sys.exit(itask.state.status == TASK_STATUS_SUBMIT_FAILED)


if __name__ == "__main__":
    try:
        main()
    except Exception as exc:
        if cylc.flags.debug:
            raise
        sys.exit(str(exc))
