#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2012 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from cylc import cylc_mode
from optparse import OptionParser
from cylc.task_message import message
from cylc.port_scan import SuiteIdentificationError
from cylc.locking.task_lock import task_lock

usage = """cylc [task] started [options]

This command is part of the cylc task messaging interface, by which
means running tasks communicate with their parent suite; it is used to
report commencement of task execution (and acquires a task lock from the
lockserver, if the lockserver is used). 

NOTE that this command is automatically called at the start of task job
scripts; it does not need to be used in external task implementation.

Suite and task identity are determined from the task execution
environment supplied by the suite or by 'cylc [task] submit'. In the
latter case no communication occurs, but a message is printed to stdout.

See also:
    cylc [task] message
    cylc [task] succeeded
    cylc [task] failed"""

parser = OptionParser( usage )

( options, args ) = parser.parse_args()

if len( args ) != 0:
    parser.error( "Wrong number of arguments" )

# send start message
try:
    message().send_started()
except SuiteIdentificationError, x:
    raise SystemExit(x)

# acquire a task lock if using the lockserver
if not cylc_mode.mode().is_raw():
    try:
        if not task_lock().acquire():
            msg = "Failed to acquire a task lock" 
            try:
                message( msg, 'CRITICAL' ).send_failed()
            except SuiteIdentificationError, x:
                raise SystemExit(x)
    except Exception, z:
        msg = "Failed to connect to the lockserver" 
        try:
            message( msg, 'CRITICAL' ).send_failed()
        except SuiteIdentificationError, x:
            print >> sys.stderr, x
        raise SystemExit(z)
