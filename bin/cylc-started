#!/usr/bin/env python

# THIS FILE IS PART OF THE CYLC SUITE ENGINE.
# Copyright (C) 2008-2015 NIWA
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os, sys
from optparse import OptionParser
from cylc.task_message import message
import cylc.flags

usage = """cylc [task] started [OPTIONS]

This command is part of the cylc task messaging interface, used by
running tasks to communicate progress to their parent suite.

The started command reports commencement of task execution. It is
called automatically by task job scripts.

Suite and task identity are determined from the task execution
environment supplied by the suite (or by the single task 'submit'
command, in which case the message is just printed to stdout).

See also:
    cylc [task] message
    cylc [task] succeeded
    cylc [task] failed"""

parser = OptionParser( usage )

parser.add_option( "-v", "--verbose",
        help="Verbose output mode.",
        action="store_true", default=False, dest="verbose" )

( options, args ) = parser.parse_args()
cylc.flags.verbose = options.verbose

if len( args ) != 0:
    parser.error( "Wrong number of arguments" )

debug = False
try:
    # from task execution environment
    if os.environ['CYLC_DEBUG'] == 'True':
        debug = True
except KeyError:
    pass

# send start message
try:
    message().send_started()
except Exception, x:
    if debug:
        raise
    print >> sys.stderr, 'ERROR: task messaging failure.'
    raise SystemExit(x)
