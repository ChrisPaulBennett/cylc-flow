#!/bin/bash

set -e; trap "echo 'UNIT TEST FAILED (see output log)'" ERR

#          ________________________  
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|


dummy_mode=false
if [[ $# != 0 ]]; then
    if [[ $1 == '-d' || $1 == '--dummy' ]]; then
        dummy_mode=true

    elif [[ $1 == '-h' || $1 == '--help' ]]; then
        echo "Usage: cylc unit-test [options]"
        echo 
        echo "Run an automated test of core cylc functionality using a new copy of"
        echo "the userguide example system. This should be used to check that new"
        echo "developments in the cylc codebase have not introduced serious bugs."
        echo "The test runs a system registered as 'unit'; to watch its progress"
        echo "use 'cylc monitor -a unit'. Aside from small timing differences,"
        echo "results should be the same in real or dummy mode."
        echo
        echo "Currently the unit test does the following:"
        echo " 1 - Copies the userguide example system definition directory;"
        echo " 2 - Configures the new system;"
        echo " 3 - Registers the new system as 'unit';"
        echo " 4 - Starts the system at T0=06Z, with task X set to fail at 12Z;"
        echo " 5 - Unblocks the running system;"
        echo " 6 - Sets a stop time at 12Z (i.e. T0+30 hours);"
        echo " 7 - Waits for the system to stall as result of X failing;"
        echo " 8 - Inserts a new coldstart task at 06Z (T0+24 hours);"
        echo " 9 - Purges the failed X and dependants through to 00Z (T0+18 hours)"
        echo "     inclusive, which allows the system to get going again at 06Z;"
        echo "10 - Waits for the system to shut itself down at the 12Z stop time."
        echo "11 - Run a single task (startup) from the system with run-task." 
        echo
        echo "Options:"
        echo "  -h, --help   Print this help message and exit."
        echo "  -d, --dummy  Run the unit test in dummy mode."
        exit 0
    else
        echo "ERROR, no arguments required."
        exit 1
    fi
fi

if [[ ! -x bin/cylc ]]; then
    echo  "ERROR: run this unit test from the top level of a cylc installation."
    exit 1
fi

# UNIT TEST SYSTEM DIRECTORY
SYS_DIR=systems/UNIT
# log file for stdout and stderr
OUT=unit-test.out; OUT_SCHED=unit-test-sched.out
# cylc system log
LOGRC=$( cylc preferences -p | grep 'logging directory' )
LOGDIR=${LOGRC#*= }
LOG=$LOGDIR/unit/main

# START FROM A CLEAN SLATE
echo ">> CLEANING OUT any remnants of previous tests ... "
  # remove any existing unit test system
[[ -d $SYS_DIR ]] && rm -rf $SYS_DIR
  # unregister any existing registration for unit
  # 'register -d' fails if no Pyro nameserver!
cylc register -g unit && cylc register -d unit
  # remove output files
rm -f $OUT $OUT_SCHED
echo done

# COPY THE USERGUIDE EXAMPLE SYSTEM
echo
echo -n ">> COPYING userguide example system to $SYS_DIR ... "
cp -r systems/userguide $SYS_DIR > $OUT 2>&1 
echo done

# CONFIGURE THE TEST SYSTEM
echo
echo -n ">> CONFIGURING the test system ... "
cylc configure $SYS_DIR >> $OUT 2>&1
echo done

# REGISTER THE TEST SYSTEM
echo
echo -n ">> REGISTERING the test system as 'unit' ... "
cylc register --system $SYS_DIR unit >> $OUT 2>&1
echo done

# START UP THE TEST SYSTEM
echo
if ! $dummy_mode; then
    echo ">> STARTING at 2010010106, with FAIL_TASK=X%2010010112"
    echo "        self.items['environment']['FAIL_TASK'] = 'X%2010010112'" >> $SYS_DIR/system_config.py
else
    # use 36 hour clock offset, otherwise the system will catch up to
    # the clock before it finishes (=> longer time to wait for finish).
    echo ">> STARTING at 2010010106, with --clock-offset=36 --fail-out=X%2010010112"
fi

# startup errors (e.g. due to lockserver denying access to the system)
# won't be trapped here because we run cylc in the background!
if $dummy_mode; then
    cylc start -d --clock-offset=36 --fail-out=X%2010010112 --at=2010010106 unit >> $OUT_SCHED 2>&1 &
else
    cylc start --at=2010010106 unit >> $OUT_SCHED 2>&1 &
fi
echo -n "   Will wait 5 seconds for startup ... "
sleep 5
echo done

# now check for startup errors, as just described.
if grep '_cylc-start failed:  1' $OUT_SCHED  > /dev/null; then
    cat $OUT_SCHED
    munge 2> /dev/null # activate trap with a non-existent command
fi

# WAIT FOR ALL TASKS AT 2010010112 TO FINISH 
# at which point the system is stalled because X failed.
echo
echo ">> WAITING for system to stall at 2010010112 due to failed X"
echo -n "   ."
READY=false
while ! $READY; do
    READY=true
    for TASK in A B C D E F; do
        ! grep "${TASK}%2010010106 finished" $LOG > /dev/null 2>&1 && READY=false
    done
    ! grep "X%2010010112 failed" $LOG > /dev/null 2>&1 && READY=false
    echo -n .
    sleep 1
done
echo done

# UNBLOCK THE SYSTEM
echo
echo -n ">> UNLOCKING the system to allow intervention ..."
cylc unblock -f unit >> $OUT 2>&1
echo done

# SET A STOP TIME OF
echo
echo -n ">> SETTING STOP TIME 2010010212 ..."
cylc stop -f --at=2010010212 unit >> $OUT 2>&1
echo done

# INSERT A COLDSTART TASK AT 2010010206
echo
echo -n ">> INSERTING a coldstart task at 2010010206 ..."
cylc insert -f -t coldstart%2010010206 unit >> $OUT 2>&1
echo done

# PURGE THE FAILED TASK AND ITS DEPENDANTS THROUGH TO 2010010200
echo
echo ">> PURGING X%2010010112 and all dependants, through to 2010010200"
echo -n "   ... "
cylc purge -f -t X%2010010112 -s 2010010200 unit >> $OUT 2>&1
echo done

# WAIT FOR THE SYSTEM TO FINISH AT 2010010212
echo
echo ">> WAITING for the system to shut down at 2010010112"
echo -n "   ."
READY=false
while ! $READY; do
    READY=true
    ! grep "ALL TASKS FINISHED" $LOG > /dev/null 2>&1 && READY=false
    echo -n .
    sleep 1
done
echo done

# RUN A SINGLE TASK
# can be one that completes successfully or fails, it doesn't matter.
echo
# EXAMPLE OUTPUT FROM RUN-TASK:
# % cylc run-task -t startup%2010010106 unit
# Loading Cylc Preferences file: /home/oliverh/.cylcrc
#
# Cylc messages will be directed to stdout (=> the task log file).
# Logging directory is /home/oliverh/.cylc/log-files/unit-run-task
#
#  > SUBMITTING TASK: /tmp/cylc-2H4HPc </dev/null 1> /home/oliverh/startup%2010010106-haDDeS.out 2> /home/oliverh/startup%2010010106-haDDeS.err &
echo ">> RUN A SINGLE TASK (startup%2010010106) from the system"
FOO=$(cylc run-task -t startup%2010010106 unit)
STDOUT=$( echo $FOO | sed -e 's/.*1> //' | sed -e 's/ 2>.*//' )
STDERR=$( echo $FOO | sed -e 's/.*2> //' | sed -e 's/ &.*$//' )
echo "TASK OUTPUT LOGS:"
echo "  $STDOUT"
echo "  $STDERR"
echo -n "   ."
READY=false
while ! $READY; do
    grep 'cylc (run-task): startup%2010010106 finished' $STDOUT 2> /dev/null && READY=true
    echo -n .
    sleep 1
done
echo done

# DELETE THE SYSTEM DEFINITION DIRECTORY
echo
echo -n ">> DELETING system definition directory ..."
rm -rf $SYS_DIR
echo done

# FINISHED
echo 
echo ">> UNIT TEST OUTPUT LOGS:"
ls -l $OUT $OUT_SCHED
echo ">> CYLC MAIN LOG FOR THE UNIT TEST:"
ls -l $LOG
echo
echo ">> DONE"
