#!/usr/bin/env python

#C: THIS FILE IS PART OF THE CYLC FORECAST SUITE METASCHEDULER.
#C: Copyright (C) 2008-2012 Hilary Oliver, NIWA
#C: 
#C: This program is free software: you can redistribute it and/or modify
#C: it under the terms of the GNU General Public License as published by
#C: the Free Software Foundation, either version 3 of the License, or
#C: (at your option) any later version.
#C:
#C: This program is distributed in the hope that it will be useful,
#C: but WITHOUT ANY WARRANTY; without even the implied warranty of
#C: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#C: GNU General Public License for more details.
#C:
#C: You should have received a copy of the GNU General Public License
#C: along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
if '--use-ssh' in sys.argv[1:]: 
    sys.argv.remove( '--use-ssh' )
    from cylc.remote import remrun
    remrun().execute()

import os, gtk
import warnings
warnings.filterwarnings('ignore', 'use the new', Warning)
from cylc.CylcOptionParsers import cop

sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../lib')
sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/../')
from conf.CylcGlobals import cylc_tmpdir
from cylc.port_scan import SuiteNotFoundError

from cylc.gui.gcylc import MainApp
from cylc.gui.SuiteControl import ControlApp
from cylc.config import config, SuiteConfigError
from cylc.hostname import is_remote_host
from cylc.owner import is_remote_user

parser = cop( """cylc gui|gcylc [OPTIONS] [REG]
gcylc [OPTIONS] [REG]

This is the cylc graphical user interface. It is functionally equivalent
to the command line interface ('cylc help') in most respects.

    1/ gcylc &
This invokes the gcylc main window to display your registered suites.
Right-click on suites or groups to access all cylc functionality from
editing and graphing suites through to suite control and monitoring.

    2/ gcylc [-g,--graph] REG &
This directly invokes a suite control and monitoring application for a
particular suite. Alternatively you can get this by right-clicking on 
the suite in the main gcylc suite database viewer (1/ above). Without
the -g option the GUI will show a filtered text treeview on startup;
with it, the startup view will be dependency graph based.

NOTE: daemonize important suites with the POSIX nohup command:
    $ nohup gcylc [OPTIONS] REG &""", pyro=True,
    argdoc=[('[REG]', 'Suite name' )])

parser.add_option( "-g", "--graph",
        help="with REG: start a control GUI with the graphical view on.",
        action="store_true", default=False, dest="depgraph" )

( options, args ) = parser.parse_args()

# Make current working directory be $HOME. Otherwise (1) if the user
# attempts to start gcylc from a CWD that has been removed, Pyro will
# not be importable below; and (2) if the CWD gets removed later while
# gcylc is running, subprocesses spawned by gcylc will fail when they
# attempt to determine their CWD.
os.chdir(os.environ['HOME'])

if len( args ) == 0:
    app = MainApp( options.db, options.host, cylc_tmpdir )
    gtk.main()
    sys.exit(0)

from cylc.registration import localdb
from cylc.passphrase import passphrase

# dealias the suite name (an aliased name may be given for local suites)
if not is_remote_host( options.host ) and not is_remote_user( options.owner ):
    db = localdb(file=options.db, verbose=options.verbose)
    db.load_from_file()
    try:
        suite = db.unalias( args[0] )
        suiterc = db.getrc( suite )
    except Exception, x:
        if options.debug:
            raise
        raise SystemExit(x)
    pphrase = passphrase( suite, options.owner, options.host).get( options.pfile, suiterc )
else:
    suite = args[0]
    pphrase = passphrase( suite, options.owner, options.host).get( options.pfile )

gtk.settings_get_default().set_long_property("gtk-toolbar-icon-size", gtk.ICON_SIZE_SMALL_TOOLBAR, "main")
gtk.settings_get_default().set_long_property("gtk-button-images", True, "main")
gtk.settings_get_default().set_long_property("gtk-menu-images", True, "main")

if options.depgraph:
    views = ["graph"]
else:
    views = ["led", "tree"]

try:
    app = ControlApp( suite, pphrase, options.owner, options.host, None, cylc_tmpdir, views )
except Exception, x:
    if options.debug:
        raise
    raise SystemExit(x)
gtk.main()

