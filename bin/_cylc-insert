#!/usr/bin/env python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|

import os
import cycle_time
import check_switch
import cylc_pyro_client
from CylcOptionParsers import PromptOptionParser

parser = PromptOptionParser( """cylc insert [options] SYSTEM 

Insert a single task or a task group into a running system. 

Inserted tasks will spawn successors as normal (unless they are of the
'oneoff' type). If you don't want this, consider using 'cylc run-task').""" )

parser.add_option( "-t", "--task-id",
        help="Identity of a task to insert.",
        metavar="NAME%CYCLE", action="store", dest="task_id" )

parser.add_option( "-g", "--group",
        help="Identity of a task group to insert.",
        metavar="NAME%CYCLE", action="store", dest="group_id" )

(options, args) = parser.parse_args()

if not options.task_id and not options.group_id:
    parser.error( "Task or Group ID required" )
if options.task_id and options.group_id:
    parser.error( "Task OR Group ID required" )

if options.task_id:
    target = options.task_id
elif options.group_id:
    target = options.group_id

if parser.prompt( 'Insert ' + target + ' in'):
    # check input
    try:
        ( name, cycle ) = target.split('%')
    except ValueError:
        parser.error( "Task or Group ID must be NAME%YYYYMMDDHH")
    if not cycle_time.is_valid( cycle ):
        parser.error( "invalid cycle time: " + cycle )

    host = parser.get_pns_host()
    group = parser.get_groupname()

    god = cylc_pyro_client.client( host, group ).get_proxy( 'remote' )
    check_switch.check( god.insert( target,  os.environ['USER'] ))
