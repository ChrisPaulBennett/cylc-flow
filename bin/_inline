#!/usr/bin/env python

import os, re, sys
from shutil import move
import subprocess
import tempfile
from optparse import OptionParser
from collections import deque
from registration import localdb, centraldb, RegistrationError

done = []

def continuation_lines( inf ):
    outf = []
    cline = ''
    for line in inf:
        # detect continuation line endings
        m = re.match( '(.*)\\\$', line )
        if m:
            # add line to cline instead of appending to outf.
            cline += m.groups()[0]
        else:
            outf.append( cline + line )
            # reset cline 
            cline = ''
    return outf

def include_files( suitedir, inf, mark=False, single=False, label=False, level=None ):
    if level == None:
        level = ''
    else:
        if mark:
            level += '!'

    global done
    outf = []
    for line in inf:
        m = re.match( '\s*%include\s+([\w/\-\.]+)\s*$', line )
        if m:
            match = m.groups()[0]
            inc = os.path.join( suitedir, match )
            if inc not in done:
                if single:
                    done.append(inc)
                if os.path.isfile(inc):
                    print " + inlining", inc
                    if single or label:
                        outf.append('++++ START INLINED INCLUDE FILE ' + match + '\n' )
                    h = open(inc, 'rb')
                    inc = h.readlines()
                    h.close()
                    # recursive inclusion
                    outf.extend( include_files( suitedir, inc, mark, single, label, level ))
                    if single or label:
                        outf.append('---- END INLINED INCLUDE FILE ' + match + '\n' )
                else:
                    raise SystemExit( "File not found: " + inc )
            else:
                outf.append(level + line)
        else:
            # no match
            outf.append(level + line)
    return outf

parser = OptionParser( """cylc [prep] inline [options] SUITE 

View a temporary copy of a suite config (suite.rc) file in your $EDITOR
exactly as the config file parser sees it: with include-files inlined
and continuation lines joined. This can be used to get a quick global
view of a suite that uses include-files, or to trace parsing errors by
line number (suite validation is sufficiently informative, however, that
you should not need to do this).

If you want to edit the suite, in inlined form or not, or to view it
without inlined include-files, use the 'cylc prep edit' command.

The viewer process is spawned in the foreground as follows:
  $EDITOR <temporary inlined file in $TMPDIR>
(You must have $EDITOR and $TMDPIR defined in your shell environment). 

See also:
    cylc prep grep
    cylc prep edit
    cylc prep validate

Arguments:
  SUITE   - registered name of the suite.""")

parser.add_option( "-c","--centraldb",
        help="View a suite from the central database.",
        action="store_true", default=False, dest="central" )

parser.add_option( "--mark", "-m", 
        help="Mark inclusions in the left margin (line numbers will "
        "still correspond to those reported by the parser).",
        action="store_true", default=False, dest="mark" )

parser.add_option( "--label", "-l", 
        help="Label file inclusion boundaries with the file name "
        "(line numbers will not correspond to those reported by the parser).",
        action="store_true", default=False, dest="label" )

parser.add_option( "--nojoin", "-n", 
        help="Do not join continuation lines (line numbers will "
        "not correspond to those reported by the parser).",
        action="store_true", default=False, dest="nojoin" )

parser.add_option( "--single", "-s", 
        help="Inline and label just the first instance of any "
        "multiply-included file (line numbers will not correspond to "
        "those reported by the parser).",
        action="store_true", default=False, dest="single" )

( options, args ) = parser.parse_args()

if len(args) != 1:
    parser.error( "wrong number of arguments" )

suite = args[0]

try:
    editor = os.environ['EDITOR']
except KeyError:
    raise SystemExit( 'export $EDITOR before using this command' )

try:
    tmpdir = os.environ['TMPDIR']
except KeyError:
    raise SystemExit( 'export $TMPDIR before using this command' )

# find location of the suite definition directory
if options.central:
    reg = centraldb()
else:
    reg = localdb()
reg.load_from_file()

try:
    suitedir,descr = reg.get( suite )
except RegistrationError,x:
    raise SystemExit(x)

suiterc = os.path.join( suitedir, 'suite.rc' )

if not os.path.isfile( suiterc ):
    parser.error("Suite " + suite + " config file not found: " + suiterc )

h = open( suiterc, 'rb' )
lines = h.readlines()
h.close()

# inline any include files
lines = include_files( suitedir, lines, options.mark, options.single, options.label )

if not options.nojoin:
    # join any continuation lines
    lines = continuation_lines( lines )

inlined = tempfile.mktemp( suffix = ".rc", prefix = suite + '.', dir = tmpdir )
h = open( inlined, 'wb' )
h.writelines( lines )
h.close()

# set the file to be read only
os.chmod( inlined, 0444 )

# capture the temp file's mod time in case the user edits it
# and overrides the readonly mode.
modtime1 = os.stat( inlined ).st_mtime
 
# in case $EDITOR has options, e.g. 'emacs -nw':
command_list = re.split( ' ', editor )
command_list.append( inlined )
command = ' '.join( command_list )
try:
    # THIS BLOCKS UNTIL THE COMMAND COMPLETES
    retcode = subprocess.call( command_list )
    if retcode != 0:
        # the command returned non-zero exist status
        print >> sys.stderr, command, ' failed:', retcode
        sys.exit(1)
except OSError:
    # the command was not invoked
    print >> sys.stderr, 'ERROR: unable to execute:', command
    sys.exit(1)
 
# did the user edit the file
modtime2 = os.stat( inlined ).st_mtime

if modtime2 > modtime1:
    print
    print >> sys.stderr, 'WARNING: YOU HAVE EDITED THE TEMPORARY READ-ONLY SUITE.RC COPY, IF'
    print >> sys.stderr, 'YOU WANT TO RETAIN THE CHANGES, EXTRACT THEM FROM THE FILE HERE:'
    print >> sys.stderr, inlined
    print >> sys.stderr, 'In future, to *edit* a suite use \'cylc prep edit\', not \'cylc prep inline\'.'
    print
