#!/usr/bin/env python

import os, re, sys
from shutil import move
import subprocess
import tempfile
from optparse import OptionParser
from collections import deque
from registration import registrations

def include_files( suitedir, inf ):
    outf = []
    for line in inf:
        m = re.match( '\s*#include\s+([\w/\-\.]+)\s*$', line )
        if m:
            match = m.groups()[0]
            inc = os.path.join( suitedir, match )
            if os.path.isfile(inc):
                #print "Inlining", inc
                #outf.append('++++ START INLINED INCLUDE FILE ' + match  + ' (DO NOT DELETE THIS LINE!)\n')
                h = open(inc, 'rb')
                inc = h.readlines()
                h.close()
                # recursive inclusion
                outf.extend( include_files( suitedir, inc ))
                #outf.append('++++ END INLINED INCLUDE FILE ' + match  + ' (DO NOT DELETE THIS LINE!)\n')
            else:
                raise SystemExit( "File not found: " + inc )
        else:
            # no match
            outf.append( line )
    return outf

parser = OptionParser( """cylc inline SUITE 

View a suite config (suite.rc) file in your editor with all
include-files automatically inlined (which is how the cylc
config file parser sees the file, so this command is useful
for following up on line numbers reported in suite config errors).

The editing process is spawned in the foreground as follows:
  $EDITOR <temporary inlined include-file>
(You must have $EDITOR defined in your shell environment). 

DO NOT EDIT THE TEMPORARY INLINED SUITE.RC FILE - IT WILL BE 
DELETED WHEN YOU EXIT FROM THE EDITOR.

See also 'cylc grep', an include-file aware suite search command.

Arguments:
  SUITE   - registered name of the suite.""")

( options, args ) = parser.parse_args()

if len(args) != 1:
    parser.error( "wrong number of arguments" )

suite = args[0]

try:
    editor = os.environ['EDITOR']
except KeyError:
    raise SystemExit( 'export $EDITOR before using this command' )

# find location of the suite definition directory
reg = registrations()
if reg.is_registered( suite ):
    suitedir = reg.get( suite )
else:
    reg.print_all()
    raise SystemExit( "suite " + suite + " is not registered!" )

suiterc = os.path.join( suitedir, 'suite.rc' )

if os.path.isfile( suiterc ):
    h = open( suiterc, 'rb' )
    lines0 = h.readlines()
    h.close()
    # inline any include files
    lines = include_files( suitedir, lines0 )
else:
    parser.error("Suite " + suite + " config file not found: " + suiterc )

print 'Writing temporary inlined file for viewing:'
# write the inlined file to a temporary file
inlined = tempfile.mktemp( suffix = ".temp", prefix = suiterc, dir = suitedir )
print '  ', inlined
print 'DO NOT EDIT THIS FILE, it will be removed when you exit the editor.'
raw_input( 'Hit any key to invoke your editor to view the file...' )

h = open( inlined, 'wb' )
h.writelines( lines )
h.close()

command_list = [ editor, inlined ]
 
try:
    # THIS BLOCKS UNTIL THE COMMAND COMPLETES
    retcode = subprocess.call( command_list )
    if retcode != 0:
        # the command returned non-zero exist status
        print >> sys.stderr, ' '.join( command_list ), ' failed: ', retcode
        sys.exit(1)

except OSError:
    # the command was not invoked
    print >> sys.stderr, 'ERROR: unable to execute ', ' '.join(command_list)
    sys.exit(1)
 
print 'Removing temporary inlined file.'
os.unlink( inlined )
