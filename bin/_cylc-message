#!/usr/bin/python

""" 
This is a messaging interface between external tasks and the proxy
objects that represent them inside a cylc scheduler instance: the
message is sent by calling [proxy].incoming( PRIORITY, MESSAGE )
through the Pyro RPC mechanism. 
The task proxy is identified by its unique ID, NAME%YYYYMMDDHH

Cylc exports $SYSTEM_NAME, $CYCLE_TIME, and $TASK_NAME into 
the environment of each external task.
"""

import os
import sys
import Pyro.core
from Pyro.errors import NamingError, ProtocolError
from optparse import OptionParser
from time import sleep

# PARSE THE COMMAND LINE-----------------------------------------------
usage = """
General messages:
   cylc message [options] MESSAGE 
Automatic messages:
  cylc message [--started OR --succeeded OR --failed]
  cylc message [--set-all-restarts-completed OR --set-all-outputs-completed]

Send a message to a task proxy object in a running cylc instance.
EXTERNAL TASKS USE THIS SCRIPT TO COMMUNICATE WITH THEIR CYLC PROXY, 
in which case most inputs are taken from environment variables, but
it can also be used to fake task messages manually when debugging."""

parser = OptionParser( usage )

parser.set_defaults( started=False, success=False, failure=False, 
        all_restarts_completed=False, all_outputs_completed=False,
        priority='NORMAL')

parser.add_option( "-t", 
        metavar='NAME',
        help="task name, defaults to $TASK_NAME",
        action="store", dest="taskname" )

parser.add_option( "-s",
        metavar="NAME",
        help="Name of the running cylc instance, defaults to $SYSTEM_NAME",
        action="store", dest="system_name" )

parser.add_option( "-n", 
        help="Hostname of the machine running the Pyro nameserver, "
            "defaults to $PNSHOST, then localhost",
        metavar="HOSTNAME", action="store", dest="pns_host" )

parser.add_option( "--started",
        help="Send a special message indicating a task has"
        "started executing",
        action="store_true", dest="started" )

parser.add_option( "--succeeded",
        help="Send a special message indicating a task has"
        "completed successfully",
        action="store_true", dest="succeeded" )

parser.add_option( "--failed",
        help="Send a special message indicating a task has"
        "failed to complete successfully",
        action="store_true", dest="failed" )

parser.add_option( "-p",
        metavar="PRIORITY",
        type="choice",
        choices=[ 'NORMAL', 'WARNING', 'CRITICAL' ],
        help="message logging priority, default NORMAL",
        action="store", dest="priority" )

parser.add_option( "-c",
        metavar="YYYYMMDDHH",
        help="task cycle time, defaults to $CYCLE_TIME",
        action="store", dest="ctime" )

parser.add_option( "--all-restart-outputs-completed", 
        help="report all forecast model restart outputs completed at once",
        action="store_true", dest="all_restarts_completed" )

parser.add_option( "--all-outputs-completed", 
        help="report all task outputs completed at once "
             "EXCEPT for the special 'completed' and 'finished' outputs",
        action="store_true", dest="all_outputs_completed" )

( options, args ) = parser.parse_args()

# GET TASK NAME--------------------------------------------------------
if options.taskname:
    # command line
    taskname = options.taskname
else:
    # Default to $TASK_NAME
    if 'TASK_NAME' in os.environ.keys():
        taskname = os.environ[ 'TASK_NAME' ]
    else:
        print 'ERROR, cylc message: no task name provided'
        sys.exit(1)

# GET SYSTEM NAME------------------------------------------------------
if options.system_name:
    # command line
    system_name = options.system_name
else:
    # Default to $SYSTEM_NAME
    if 'SYSTEM_NAME' in os.environ.keys():
        system_name = os.environ[ 'SYSTEM_NAME' ]
    else:
        print 'ERROR, cylc message: no system name provided'
        sys.exit(1)

# GET PYRO NAMESERVER HOST---------------------------------------------
if options.pns_host:
    # command line
    pns_host = options.pns_host

elif 'PNS_HOST' in os.environ.keys():
    # environment
   pns_host = os.environ[ 'PNS_HOST' ]

else:
    # Default to localhost
    pns_host = 'localhost'
    print 'WARNING, cylc message: no Pyro nameserver hostname provided!'
    print 'will attempt to connect to a namerserver on localhost'
     
# GET TASK CYCLE TIME--------------------------------------------------
if options.ctime:
    # command line
    ctime = options.ctime
else:
    # Default to $CYCLE_TIME
    if 'CYCLE_TIME' in os.environ.keys():
        ctime = os.environ[ 'CYCLE_TIME' ]
    else:
        print 'ERROR, cylc message: no cycle time provided!'
        sys.exit(1)
 
# CHECK ARGS AND OPTIONS-----------------------------------------------

# the automatic messaging options must be used alone
if options.started or options.succeeded or options.failed \
        or options.all_restarts_completed \
        or options.all_outputs_completed:
   if len( sys.argv ) != 2:
       print "cylc message ERROR: no other options or arguments"
       print "are allowed with --started, --succeeded, or --failed"
       sys.exit(1)

elif len( args ) == 0:
    parser.error( "no message supplied" )

elif len( args ) == 1:
    # quoted string supplied
    message = args[0]

else:
    # bare string supplied
    message = ' '.join(args)

# CONNECT TO THE CORRECT TASK PROXY OBJECT-----------------------------
count = 0
while True:
    count += 1
    try:
        task = Pyro.core.getProxyForURI('PYRONAME://' + pns_host + '/' + system_name + '.' + taskname + '%' + ctime )
       
    except ProtocolError:
        # retry if temporary network problems prevented connection

        # TO DO: do we need to single out just the 'connection failed error?'

        # http://pyro.sourceforge.net/manual/10-errors.html
        # Exception: ProtocolError,
        #    Error string: connection failed
        #    Raised by: bindToURI method of PYROAdapter
        #    Description: Network problems caused the connection to fail.
        #                 Also the Pyro server may have crashed.
        #                 (presumably after connection established - hjo)

        print 'cylc message [' + str( count ) + ']: Network Problems, RETRYING in 5 seconds'
        sleep(5)

    except NamingError:
        # can't find nameserver, or no such object registered ...
        print 'PYRO NAMESERVER ERROR'
        raise

    except Exception:
        # all other exceptions
        print 'ERROR'
        raise

    else:
        # successful connection
        break

# DO THE MESSAGING----------------------------------------------------

# the "all completed" special options are implemented as short cut
# functions in the task proxy objects

if options.all_restarts_completed:
    # set all forecast model restart outputs completed
    task.set_all_restarts_completed()
    sys.exit(0)

if options.all_outputs_completed:
    task.set_all_internal_outputs_completed()
    sys.exit(0)

if options.started:
    task.incoming( 'NORMAL', "started" )

elif options.succeeded:
    task.incoming( 'NORMAL', "completed" )
    task.incoming( 'NORMAL', "finished" )

elif options.failed:
    task.incoming( 'NORMAL', "completed" )
    task.incoming( 'CRITICAL', "failed" )

else:
    task.incoming( 'NORMAL', message )

#    # nameserver not found, or object not registered with it?
#    print "ERROR: failed to connect to " + task_name + "_" + ctime
#    print "Trying dead letter box"
#    try:
#        dead_box = Pyro.core.getProxyForURI('PYRONAME://' + system_name + '.' + 'dead_letter_box' )
#        dead_box.incoming( message )
#    except:
#        # nameserver not found, or object not registered with it?
#        print "ERROR: failed to connect to pyro nameserver"
#        sys.exit(1)
