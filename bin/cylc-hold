#!/usr/bin/env python

# THIS FILE IS PART OF THE CYLC SUITE ENGINE.
# Copyright (C) 2008-2015 NIWA
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
if '--use-ssh' in sys.argv[1:]:
    sys.argv.remove( '--use-ssh' )
    from cylc.remote import remrun
    if remrun().execute( force_required=True ):
        sys.exit(0)

from cylc.prompt import prompt
from cylc.network.suite_command import SuiteCommandClient
from cylc.CylcOptionParsers import cop, multitask_usage
from cylc.command_prep import prep_pyro
import cylc.flags

parser = cop( """cylc [control] hold [OPTIONS] ARGS

Hold one or more waiting tasks, or a whole suite. Held tasks do not
submit even if they are ready to run.
""" + multitask_usage + """

See also 'cylc [control] release'.""", pyro=True, multitask=True,
    argdoc=[("REG", "Suite name"),
    ('[MATCH]', 'Task or family name matching regular expression'),
    ('[POINT]', 'Task cycle point (e.g. date-time or integer)') ])

parser.add_option(
    "--after",
    help="Hold whole suite AFTER this cycle point.",
    metavar="CYCLE_POINT", action="store", dest="hold_point_string")

(options, args) = parser.parse_args()

suite, pphrase = prep_pyro( args[0], options ).execute()

whole_suite = True
if len(args) == 3:
    whole_suite = False
    name = args[1]
    point_string = args[2]
    prompt('Hold task(s) %s at %s in %s' % (name, point_string, suite),
            options.force)
elif options.hold_point_string:
    prompt('Hold suite after %s' % options.hold_point_string, options.force)
elif len(args) == 1:
    prompt('Hold suite %s' % suite, options.force)
else:
    parser.error("Wrong number of arguments")

pclient = SuiteCommandClient(suite, pphrase, options.owner, options.host,
                             options.pyro_timeout, options.port)
if options.print_uuid:
    print >> sys.stderr, 'Client UUID: %s' % pclient.get_client_uuid()
if options.hold_point_string:
    pclient.put_command('hold suite after', options.hold_point_string)
elif whole_suite:
    pclient.put_command('hold suite now')
else:
    pclient.put_command('hold task now', name, point_string, options.is_family)
