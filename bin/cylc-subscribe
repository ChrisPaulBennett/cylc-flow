#!/usr/bin/env python3

# THIS FILE IS PART OF THE CYLC SUITE ENGINE.
# Copyright (C) 2008-2019 NIWA & British Crown (Met Office) & Contributors.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""cylc subscribe [OPTIONS] REG

(This command is for internal use.)
Invoke suite subscriber to receive published workflow output.
"""

import asyncio
import json
import sys
import time

from google.protobuf.json_format import MessageToDict

from cylc.flow.option_parsers import CylcOptionParser as COP
from cylc.flow.network.scan import get_scan_items_from_fs, re_compile_filters
from cylc.flow.network.subscriber import WorkflowSubscriber, process_delta_msg
from cylc.flow.terminal import cli_function
from cylc.flow.ws_data_mgr import DELTAS_MAP

if '--use-ssh' in sys.argv[1:]:
    sys.argv.remove('--use-ssh')
    from cylc.flow.remote import remrun
    if remrun():
        sys.exit(0)


def print_message(topic, data, subscriber=None, once=False):
    """Print protobuf message."""
    print(f'Received: {topic}')
    sys.stdout.write(
        json.dumps(MessageToDict(data), indent=4) + '\n')
    if once and subscriber is not None:
        subscriber.stop()


def get_option_parser():
    """Augment options parser to current context."""
    parser = COP(__doc__, comms=True)

    delta_keys = list(DELTAS_MAP)
    pb_topics = ("Directly published data-store topics include: '" +
              ("', '").join(delta_keys[:-1]) +
              "' and '" + delta_keys[-1] + "'.")

    parser.add_option(
        "-T", "--topics",
        help="Specify a comma delimited list of subscription topics. "
             + pb_topics,
        action="store", dest="topics", default='workflow')

    parser.add_option(
        "-o", "--once",
        help="Show a single publish then exit.",
        action="store_true", default=False, dest="once")


    return parser


@cli_function(get_option_parser)
def main(_, options, suite):
    cre_owner, cre_name = re_compile_filters(None, ['.*'])
    host = None
    port = None
    if options.host is None or options.port is None:
        while True:
            for s_reg, s_host, _, s_pub_port in get_scan_items_from_fs(
                    cre_owner, cre_name):
                if s_reg == suite:
                    host = s_host
                    port = int(s_pub_port)
                    break
            if host and port:
                break
            time.sleep(5)
    else:
        host = options.host
        port = options.port

    print(f'Connecting to tcp://{host}:{port}')
    topic_set = set()
    for topic in options.topics.split(','):
        topic_set.add(topic.encode('utf-8'))

    subscriber = WorkflowSubscriber(
        suite,
        host=host,
        port=port,
        topics=topic_set
    )

    subscriber.loop.create_task(
        subscriber.subscribe(
            process_delta_msg,
            func=print_message,
            subscriber=subscriber,
            once=options.once
        )
    )

    # run Python run
    try:
        subscriber.loop.run_forever()
    except KeyboardInterrupt:
        print('\nDisconnecting')
        subscriber.stop()
        exit()


if __name__ == '__main__':
    main()
