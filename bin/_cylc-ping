#!/usr/bin/env python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|


import os, sys, re
import socket
from optparse import OptionParser
import Pyro.errors
import cylc_pyro_ns
import cylc_pyro_client

parser = OptionParser( """cylc ping [options] [SUITE]
    
Check if a particular cylc suite is running, or list all running suites. 

This command first attempts to get a proxy for a particular suite
object from the Pyro Nameserver, then it attempts to call a method on
the remote object (the former condition is necessary but not sufficient
to show that a suite is running, because it is possible for a suite
to abort without deregistering its Pyro Nameserver objects).

If you are not the owner of the target suite, the username must be
supplied so that the Pyro nameserver group name can be inferred.

Arguments:
SUITE             Name of a cylc suite to check on """ )

#parser.add_option( "-e", "--error", 
#        help="Exit with non-zero error status if SUITE  is not running.",
#        action="store_true", default=False, dest="error" )

parser.add_option( "-u", "--user",
        help="Owner of the target suite, defaults to $USER. "
        "Needed to infer the Pyro nameserver group name.",
        metavar="USERNAME", default=os.environ["USER"],
        action="store", dest="username" )

parser.add_option( "--host",
        help="Pyro Nameserver host (defaults to local host name).",
        metavar="HOSTNAME", action="store", default=socket.getfqdn(),
        dest="pns_host" )

parser.add_option( "-p", "--practice",
        help="Target a suite running in practice mode.", 
        action="store_true", default=False, dest="practice" )

( options, args ) = parser.parse_args()

host = options.pns_host
user = options.username

groups = []
if len(args) == 1:
    suitename = args[0]
    # TO DO: groupname calc should be centralised
    groups = [ ':cylc.' + user + '.' + suitename ]

elif len(args) == 0:
    ns = cylc_pyro_ns.ns( host )
    groups = ns.get_groups()

else:
    parser.error( "Too many arguments" ) 

for group in groups:
    try:
        cylc_pyro_client.client( host, group ).ping()
    except:
        print group + ' is not running'
    else:
        print group + ' is running'
