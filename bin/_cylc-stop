#!/usr/bin/env python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|


import os, sys
import cycle_time
import check_switch
from connector import connector
from CylcOptionParsers import PromptOptionParser
from Pyro.errors import NamingError

parser = PromptOptionParser( """cylc stop [options] SYSTEM 

Get a running scheduler to shut down after all currently running tasks
have finished (this is the default), or after all tasks have passed some
future cycle time and finished, or immediately (see WARNING below).""" )

parser.add_option( "--now", 
        help="Stop the system immediately. WARNING: any tasks that are "
        "still running will be unable to phone home, AND the final cylc "
        "state dump file will not correctly reflect the state of tasks "
        "that finish successfully after the scheduler has shut down.",
        action="store_true", default=False, dest="shutdownnow" )

parser.add_option( "--at", 
        help="Do not launch any new tasks beyond CYCLE, and "
        "shut the system down when all tasks reach that cycle.",
        metavar="CYCLE", action="store", dest="stop_time" )

(options, args) = parser.parse_args()
try:
    god = connector( parser.get_pns_host(), parser.get_groupname(), 'remote' ).get()
except NamingError:
    print 'ERROR: system ' + args[0] + ' not running?'
    sys.exit(1)
except Exception, x:
    print 'ERROR: ', x
    sys.exit(1)

if options.stop_time:
    stop_at = options.stop_time
    if not cycle_time.is_valid( stop_at ):
        parser.error( "invalid cycle time: " + stop_at )
    if parser.prompt( 'Set stop time ' + stop_at + ' for'):
        check_switch.check( god.set_stop_time( stop_at, os.environ['USER'] ))

elif options.shutdownnow:
    if parser.prompt( 'Shutdown NOW' ):
        check_switch.check( god.shutdown_now( os.environ['USER'] ))
else:
    if parser.prompt( 'Shutdown' ):
        check_switch.check( god.shutdown( os.environ['USER'] ))
