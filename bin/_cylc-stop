#!/usr/bin/env python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|


import os, sys
import cycle_time
import check_switch
import cylc_pyro_client
from CylcOptionParsers import PromptOptionParser
from Pyro.errors import NamingError

parser = PromptOptionParser( """cylc stop [options] SYSTEM [CYCLE]

Shut a system down as soon as all currently running tasks have finished,
or after each task has passed a specified cycle time and finished, or
immediately (WARNING: see '--now' below).""",
[ """[CYCLE]              Shut down after all tasks have passed this
                        cycle time (YYYYMMDDHH)""" ] )

parser.add_option( "--now", 
        help="Stop the system immediately. WARNING: any tasks that are "
        "still running will be unable to 'phone home', AND the final cylc "
        "state dump file will not correctly reflect the state of tasks "
        "that finish successfully after the scheduler has shut down "
        "(by default these will be re-run if the system is restarted).",
        action="store_true", default=False, dest="shutdownnow" )

(options, args) = parser.parse_args()

stop_at = False
if len( args ) == 2:
    stop_at = True
    stop_time = args[1] 

host = parser.get_pns_host()
group = parser.get_groupname()
user = os.environ['USER']

god = cylc_pyro_client.client( host, group ).get_proxy( 'remote' )

if stop_at:
    if not cycle_time.is_valid( stop_time ):
        parser.error( "invalid cycle time: " + stop_time )
    if parser.prompt( 'Set stop time ' + stop_time + ' for'):
        check_switch.check( god.set_stop_time( stop_time, user ))

elif options.shutdownnow:
    if parser.prompt( 'Shutdown NOW' ):
        check_switch.check( god.shutdown_now( user ))
else:
    if parser.prompt( 'Shutdown' ):
        check_switch.check( god.shutdown( user ))
