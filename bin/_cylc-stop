#!/usr/bin/python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|


import os
import cycle_time
from connector import connector
from CylcOptionParsers import PromptOptionParser

parser = PromptOptionParser( """cylc stop [options] SYSTEM 

Shut down a cylc system after all currently running tasks have finished.""" )

parser.add_option( "--now", 
        help="Shutdown the system NOW, even if tasks are still running. "
        "NOTE THAT THIS DOES NOT KILL RUNNING EXTERNAL TASKS",
        action="store_true", default=False, dest="shutdownnow" )

parser.add_option( "--at", 
        help="Do not launch any new tasks beyond CYCLE, and "
        "shut the system down when all tasks reach that cycle.",
        metavar="CYCLE", action="store", dest="stop_time" )

(options, args) = parser.parse_args()
god = connector( parser.get_pns_host(), parser.get_groupname(), 'remote' ).get()

if options.stop_time:
    stop_at = options.stop_time
    if not cycle_time.is_valid( stop_at ):
        parser.error( "invalid cycle time: " + stop_at )
    if parser.prompt( 'Set stop time ' + stop_at + ' for'):
        print god.set_stop_time( stop_at, os.environ['USER'] )

elif options.shutdownnow:
    if parser.prompt( 'Shutdown NOW' ):
        print god.shutdown_now( os.environ['USER'] )

else:
    if parser.prompt( 'Shutdown' ):
        print god.shutdown( os.environ['USER'] )
