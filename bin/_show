#!/usr/bin/env python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|

import os, re, sys
import cycle_time
import port_scan
import cylc_pyro_client
from registration import registrations
from CylcOptionParsers import NoPromptOptionParser_u

parser = NoPromptOptionParser_u( """cylc show [options] SUITE [TASK NAME] [TASK ID]

Print global or task-specific information from a running suite: title and
task list, task descriptions, current state of task prerequisites and
outputs and, for contact tasks, whether or not the delayed start time
has been reached.""",
["""TASK NAME            Name of a suite task class - print description.
   TASK ID              ID (NAME%YYYYMMDDHH) - also print prerequisites etc."""] )

(options, args) = parser.parse_args()

host = options.host
owner = options.owner
suite = parser.get_suite_name()

prnt_suite = False
prnt_name = False
prnt_id = False

if len(args) == 2:
    target = args[1]
    try:
        name, cycle = target.split( '%' )
    except ValueError:
        prnt_name = True
        name = target
    else:
        prnt_id = True
        id = target
else:
    prnt_suite = True
 
running, port = port_scan.get_port( suite, owner, host )
if not running:
    raise SystemExit( "suite " + suite + " is not running" )

god = cylc_pyro_client.client( suite, owner, host, port ).get_proxy( 'remote' )
title, defdir, username = god.get_suite_info()

if prnt_suite:
    print suite + ' (' + owner + ') --> ' + defdir
    print title

    for task in god.get_task_list():
        print ' + ', task

if prnt_name or prnt_id:
    info = god.get_task_info( [ name ] )
    print 'Task ' + name + ' in suite ' + suite + ':' 
    for name in info.keys():
        for line in info[name]:
            print '  ' + line

if prnt_id:
    if not cycle_time.is_valid( cycle ):
        parser.error( "invalid cycle time: " + cycle )

    # PREREQUISITES AND OUTPUTS
    result = god.get_task_requisites( [ id ] )

    if id not in result:
        print "Task " + id + " not found in " + suite
        sys.exit(1)

    for id in result.keys():
        [ pre, out, extra_info ] = result[ id ]

        print id + ' prerequisites (- => not satisfied):'
        if len( pre ) == 0:
            print '  (None)'
        for item in pre:
            [ msg, state ] = item
            if state:
                descr = '  + '
            else:
                descr = '  - '
            print descr + msg

        print id + ' outputs (- => not completed):'
        if len( out ) == 0:
            print '  (None)'
        for item in out:
            [ msg, state ] = item
            if state:
                descr = '  + '
            else:
                descr = '  - '
            print descr + msg

        if len( extra_info.keys() ) > 0:
            print 'Other:'
            for item in extra_info:
                print '  o ', item, '...', extra_info[ item ]
