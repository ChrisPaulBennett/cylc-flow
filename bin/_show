#!/usr/bin/env python

import os, re, sys
import cycle_time
import cylc_pyro_client
from CylcOptionParsers import NoPromptOptionParser_u
from port_scan import SuiteIdentificationError

parser = NoPromptOptionParser_u( """cylc [info] show [options] SUITE [TASK NAME] [TASK ID]

Print global or task-specific information from a running suite: title and
task list, task descriptions, current state of task prerequisites and
outputs and, for clock-triggered tasks, whether or not their delayed
start time has been reached.""",
["""TASK NAME            Name of a suite task class - print description.
   TASK ID              ID (NAME%YYYYMMDDHH) - also print prerequisites etc."""] )

(options, args) = parser.parse_args()

suite = parser.get_suite_name()

prnt_suite = False
prnt_name = False
prnt_id = False

if len(args) == 2:
    target = args[1]
    try:
        name, cycle = target.split( '%' )
    except ValueError:
        prnt_name = True
        name = target
    else:
        prnt_id = True
        id = target
else:
    prnt_suite = True
 
try:
    proxy = cylc_pyro_client.client( suite, owner=options.owner, host=options.host ).get_proxy( 'remote' )
except SuiteIdentificationError, x:
    raise SystemExit(x)

title, defdir, username = proxy.get_suite_info()

if prnt_suite:
    print suite + ' (' + owner + ') --> ' + defdir
    print title

    for task in proxy.get_task_list():
        print ' + ', task

if prnt_name or prnt_id:
    info = proxy.get_task_info( [ name ] )
    print 'Task ' + name + ' in suite ' + suite + ':' 
    for name in info.keys():
        print ' + ', info[name]

if prnt_id:
    if not cycle_time.is_valid( cycle ):
        parser.error( "invalid cycle time: " + cycle )

    # PREREQUISITES AND OUTPUTS
    result = proxy.get_task_requisites( [ id ] )

    if id not in result:
        print "Task " + id + " not found in " + suite
        sys.exit(1)

    for id in result.keys():
        [ pre, out, extra_info ] = result[ id ]

        print id + ' prerequisites (- => not satisfied):'
        if len( pre ) == 0:
            print '  (None)'
        for item in pre:
            [ msg, state ] = item
            if state:
                descr = '  + '
            else:
                descr = '  - '
            print descr + msg

        print id + ' outputs (- => not completed):'
        if len( out ) == 0:
            print '  (None)'
        for item in out:
            [ msg, state ] = item
            if state:
                descr = '  + '
            else:
                descr = '  - '
            print descr + msg

        if len( extra_info.keys() ) > 0:
            print 'Other:'
            for item in extra_info:
                print '  o ', item, '...', extra_info[ item ]
