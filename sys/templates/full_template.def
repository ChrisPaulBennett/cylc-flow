# THIS IS A cylon TASK CLASS DEFINITION FILE
# See full_template.def for documented entries

# [foo] => foo is optional.

%NAME
    # task name, and optional short display name
    foo[, f]

%DESCRIPTION
    # Provide a concise description of what this task does. This
    # information can be accessed at run time by the remote control.
    The quick brown fox
    jumped over the lazy dog.

%TYPE
      # Task type, and one or more optional modifiers 
    free_task[, oneoff, sequential, dummy, contact, catchup_contact ]
      # OR
    forecast_model[, oneoff, sequential, dummy, contact, catchup_contact ]

    # A FREE_TASK spawns its successor as soon as it enters the
    # 'running' state. This means successive instances can run in
    # parallel, or overlap, if the opportunity arises (i.e.
    # prerequisites allowing). This task type, with possible modifiers,
    # should be used for all non-forecast model tasks.

    # Real forecast models, when 'warm cycling', write special 'restart'
    # outputs that are used to initialise the next forecast, i.e. during
    # a forecast run the model writes out a 'state dump' valid at the
    # start time of the next forecast. Multiple restart outputs may be
    # generated to allow one or more subsequent forecasts to be omitted
    # if necessary. A FORECAST_MODEL task class registers the number (N
    # say) of restart outputs that are generated by each run of the real
    # forecast model it represents, and special restart outputs and
    # prerequisites are defined for *the next N cycles* (i.e. for the
    # next N valid times for the task class).  A forecast model cannot
    # start running until its restart prerequisites is satisfied, but
    # the same prerequisite can be satisfied by the previous N instances
    # if one or more cycles has to be omitted. This allows cylon to
    # continue running over seemingly dire system problems with minimal
    # intervention.  The successor of a forecast model is spawned as
    # soon as its last restart output is completed (not after the first
    # one, if there is more than one, otherwise the next-plus-one
    # instance could trigger off the current instance, and so on, in
    # normal operation). 

    # TASK TYPE MODIFIERS, can be used with forecast_model or free_task. 

    # (a) A SEQUENTIAL task does not spawn a successor until it is
    # finished. Use to force successive instances of a free task to
    # run in sequence, when instances of the external task can not be
    # allowed to run at the same time (e.g. if they would interfere with
    # each other in some way).
    
    # (b) A ONEOFF task never spawns a successor. Use for 'cold start'
    # tasks that supply initial inputs for starting a system from
    # scratch. See also %STARTUP_PREREQUISITES below.

    # (c) A CONTACT task waits on an external event, such as incoming
    # external data, i.e. it "makes contact" with the external world. 
    # The event is expected at some defined time interval after the task
    # reference time (e.g. observational data might come 3.5 hours after 
    # its nominal validity time); see %CONTACT_DELAY_HOURS below. In
    # real time operation a contact task will not begin running until
    # the clock time has reached this delayed start time. In catchup
    # operation a contact task will begin running immediately (other
    # prerequisites allowing) because the delayed start time has already
    # passed.  A CACTHUP_CONTACT task maintains awareness, through a
    # class variable (i.e. not per instance), of whether or not it has
    # 'caught up' yet.  This can be used for rare occasions when some
    # dependent task needs to behave differently according to whether
    # its upstream contact task has caught up or not.

    # (d) A DUMMY task always uses the cylon dummy task program for its
    # external task, even in real mode. The dummy task program
    # masquerades as the task it represents by reporting its outputs
    # completed at the right time. This can be used to provide 'fake'
    # cold start prerequisites to get the system running when they real
    # inputs have been put in place by some external means prior to
    # running cylon.

%CONTACT_DELAY_HOURS
    # For tasks with the 'contact' attribute only (see %TYPE above).
    # Estimated time delay, in hours, after reference time, that the
    # external event occurs in real time operation. This is used in
    # dummy mode to properly simulate the behaviour of contact tasks. 

    4.5

[%OWNER]
    # What username the task should run as. Defaults to the owner of the
    # running cylon instance.

    bob

%VALID_HOURS
    # comma separated hours in the day valid for this task type

    0,6,12,18

%EXTERNAL_TASK
    # The external program or script to invoke when all of my
    # prerequisites have been satisfied. This script is expected to be
    # in $PATH for the owner, or in the system 'tasks' subdirectory.

    # tasks with the 'dummy' attribute do not need to define this.

    run-foo.sh

[ %EXPORT ]
    # specify additional environment variable name value pairs to pass
    # to the external task (other than $MY_REFERENCE_TIME and $NAME).
    # May contain $(MY_REFERENCE_TIME) and $(NAME), as for outputs.

    FOO foo
    BAR bar

%RUN_LENGTH_MINUTES
    # Estimated run length in minutes, used in dummy mode.
    # May be conditional on valid hours, as for %PREREQUISITES.

           20
    0,12 | 25
    6,18 | 35

%PREREQUISITES
    # Zero or more prerequisite messages on separate lines

    # These are LITERAL STRINGS with some variable substitution:
    # $(MY_REFERENCE_TIME [+/- <hours>])

    # May be conditional on a comma separated list of HOURS
    # (which must occur in %VALID_HOURS).

    # Note that defined RESTARTs create an additional prerequisite.

           foo finished for $(MY_REFERENCE_TIME)
           file bar_$(MY_REFERENCE_TIME)_utc.nc ready
    0,12 | file baz_$(MY_REFERENCE_TIME)_utc.nc ready

[%STARTUP_PREQUISITES]
    # As for %PREREQUISITES above, but only used once at start time.
    # Can be used in conjunction with a 'oneoff' task (above) if
    # a task has different input requirements for a 'cold start'
    # than for normal warm cycling operation.

%OUTPUTS
    # List of all output messages that are important for task scheduling
    # purposes (i.e. that other tasks may depend on through their
    # prerequisites), prefixed by the approximate time in minutes that
    # the output is completed (the time is used in dummy mode).

    # These are LITERAL STRINGS with some variable substitution:
    # $(MY_REFERENCE_TIME [+/- <hours>])

    # DO NOT REGISTER TASK 'started' AND 'finished' MESSAGES.
    # These are generated automatically: 
    #                       0: <NAME> started
    #   <%RUN_LENGTH_MINUTES>: <NAME> finished
    # Other tasks may depend on these automatically supplied outputs.

    # May be conditional on %VALID_HOURS as for prerequisites.

    # Note that defined RESTARTs create additional outputs.

           10: file foo_0_$(MY_REFERENCE_TIME).nc ready
    0,12 | 15: file foo_1_$(MY_REFERENCE_TIME).nc ready
    6,18 | 15: file foo_2_$(MY_REFERENCE_TIME).nc ready

%RESTART_LIST_MINUTES
    # comma separated list of times at which restart outputs are
    # generated (see above).

    # This automatically creates in ONE ADDITIONAL PREREQUISITE and N
    # ADDTIONAL OUTPUTS, where N is the number of times registered.

    5,10,15

[%COTEMPORAL_DEPENDANTS_ONLY] 
    # NOTE SPELLING: 'dependAnts' not 'dependEnts'!

    # If you set this to True for tasks that are known to have only
    # cotemporal (same reference time) downstream dependants, they will
    # be deleted as soon as they are finished AND there are no other
    # tasks yet to be finished at their reference time or earlier.

    # DO NOT SET THIS 'True' FOR TASKS THAT HAVE DOWNSTREAM DEPENDANTS
    # IN OTHER FORECAST CYCLES.  This includes FORECAST MODELS, which
    # depend on restart outputs from a previous cycle.

    # default: False.  
    True

[%ONEOFF_FOLLOW_ON]
    oneoff tasks that have non-cotemporal dependants must nominate a
    follow on task to "hand the baton on to" so that cylon knows when it
    can delete the oneoff task from the system (it will not be deleted
    before the follow on task exists). 

