# THIS IS A cyclon TASK CLASS DEFINITION FILE
# See full_template.def for documented entries

# [foo] => foo is optional.

%NAME
    # task name, and optional short display name

    foo[, f]

%TYPE
    # Type of task:

    #  (a) normal[, contact]
    #  a normal task spawns a successor as soon as its last "restart"
    #  output is completed, or right away if it has no resetart outputs.
    
    #  (b) oneoff[, contact]
    #  a oneoff task does not spawn a successor. Can be used to supply
    #  initial inputs for starting up a system (cold start). See also
    #  the %STARTUP_PREREQUISITES key below.

    # Tasks that wait on external events (i.e. they "make contact" with
    # the external world) such as incoming external data, should declare
    # the 'contact' attribute. In real time operation a running contact
    # task will begin reporting its outputs at an estimated
    # %CONTACT_DELAY_HOURS (below) hours after its own reference time
    # (e.g. some set of observational data might be ready 3 hours after
    # its nominal validity time). In catchup operation a contact task
    # will begin reporting its outputs immediately because the external
    # event has already occurred.

%CONTACT_DELAY_HOURS
    # For tasks with the 'contact' attribute only (see %TYPE above).
    # Estimated time delay, in hours, after reference time, that the
    # external event occurs in real time operation. This is used in
    # dummy mode to properly simulate the behaviour of contact tasks. 

    4.5

[%OWNER]
    # What username the task should run as. Defaults to the owner of the
    # running cyclon instance.

    bob

%VALID_HOURS
    # comma separated hours in the day valid for this task type

    0,6,12,18

%EXTERNAL_TASK
    # The external program or script to invoke when all of my
    # prerequisites have been satisfied. This script is expected to be
    # in $PATH for the owner, or in the system 'tasks' subdirectory.

    run-foo.sh

[ %EXPORT ]
    # specify additional environment variable name value pairs to pass
    # to the external task (other than $MY_REFERENCE_TIME and $NAME).
    # May contain $(MY_REFERENCE_TIME) and $(NAME), as for outputs.

    FOO foo
    BAR bar

%RUN_LENGTH_MINUTES
    # Estimated run length in minutes, used in dummy mode.
    # May be conditional on valid hours, as for %PREREQUISITES.

           20
    0,12 | 25
    6,18 | 35

%PREREQUISITES
    # Zero or more prerequisite messages on separate lines

    # These are LITERAL STRINGS with some variable substitution:
    # $(MY_REFERENCE_TIME [+/- <hours>])

    # May be conditional on a comma separated list of HOURS
    # (which must occur in %VALID_HOURS).

           foo finished for $(MY_REFERENCE_TIME)
           file bar_$(MY_REFERENCE_TIME)_utc.nc ready
    0,12 | file baz_$(MY_REFERENCE_TIME)_utc.nc ready

[%STARTUP_PREQUISITES]
    # As for %PREREQUISITES above, but only used once at start time.
    # Can be used in conjunction with a 'oneoff' task (above) if
    # a task has different input requirements for a 'cold start'
    # than for normal warm cycling operation.

%OUTPUTS
    # List of all output messages that are important for task scheduling
    # purposes (i.e. that other tasks may depend on through their
    # prerequisites), prefixed by the approximate time in minutes that
    # the output is completed (the time is used in dummy mode).

    # These are LITERAL STRINGS with some variable substitution:
    # $(MY_REFERENCE_TIME [+/- <hours>])

    # DO NOT REGISTER TASK 'started' AND 'finished' MESSAGES.
    # These are generated automatically: 
    #                       0: <NAME> started
    #   <%RUN_LENGTH_MINUTES>: <NAME> finished
    # Other tasks may depend on these automatically supplied outputs.

    # May be conditional on %VALID_HOURS as for prerequisites.

           10: file foo_0_$(MY_REFERENCE_TIME).nc ready
    0,12 | 15: file foo_1_$(MY_REFERENCE_TIME).nc ready
    6,18 | 15: file foo_2_$(MY_REFERENCE_TIME).nc ready
           20: <NAME> restart files ready for $(MY_REFERENCE_TIME+6)

[%COTEMPORAL_DEPENDANTS_ONLY] 
    # NOTE SPELLING: 'dependAnts' not 'dependEnts'!

    # If you set this to True for tasks that are known to have only
    # cotemporal (same reference time) downstream dependants, they will
    # be deleted as soon as they are finished AND there are no other
    # tasks yet to be finished at their reference time or earlier.

    # DO NOT SET THIS 'True' FOR TASKS THAT HAVE DOWNSTREAM DEPENDANTS
    # IN OTHER FORECAST CYCLES.

    # default: False.  

    True
