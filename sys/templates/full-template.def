# THIS IS A CYLC TASK DEFINITION FILE

# [foo] => foo is optional, and/or dependent on task type

%NAME
    # task name, and optional short name for display by the monitor
    foo[, f]

%DESCRIPTION
    # A concise description of this task. 'cylc control' can 
    # get this information by interrogating tasks at run time. 
    This task post-processes storm surge model output and writes
    xml data to be included in site-specific 'seagram' products.  

%TYPE
      # Task type, and one or more optional modifiers 
    free_task[,      oneoff, sequential, dummy, contact, catchup_contact ]
      # OR
    forecast_model[, oneoff, sequential, dummy, contact, catchup_contact ]

    # TASK TYPES:

    # *(1) A FREE_TASK has no dependence on its own previous instance
    # and can thus spawn its successor as soon as it enters the
    # 'running' state. This means successive instances of a free_task
    # can run in parallel, or overlap, if the opportunity arises
    # (prerequisites allowing). All non-forecast model tasks should
    # probably be of this type.

    # *(2) A FORECAST_MODEL depends on a previous instance of the same
    # task to provide special 'restart' prerequisites: during a
    # forecast, a warm-cycling model will write out a state dump valid
    # at the start time of the next forecast, for use in initialising
    # it. Multiple restart outputs may be generated to allow one or more
    # subsequent forecasts to be omitted if necessary. A forecast_model
    # registers how many of these are generated, which cylc assumes are
    # intended for use by the next N valid start times for the task and
    # automatically adds special outputs and prerequisites to represent
    # them in the system. 
    # A forecast model cannot start running until
    # its restart prerequisite is satisfied, but the same prerequisite
    # can potentially be satisfied by a restart output from any of the
    # previous N forecasts. This allows cylc to continue running when
    # one or more cycles of a particular model have to be omitted
    # because of problems. But in normal operation we only want a model
    # to trigger off the most recent previous forecast, which means that
    # a forecast model cannot spawn a successor until its *last* restart
    # output is completed (otherwise there is a chance the next-plus-one
    # instance could come into existence and trigger before the the
    # current instance, and so on, in normal operation). 
    
    # MODIFIERS:

    # * (a) A SEQUENTIAL task does not spawn a successor until it is
    # finished. You can use this to force successive instances of a free
    # task to run in sequence if instances of the external task can
    # not be allowed to run at the same time (perhaps because they would
    # interfere with each other through use of the same temporary files,
    # or similar).
    
    # * (b) A ONEOFF task never spawns a successor. Use for 'cold start'
    # tasks that supply initial inputs for starting a system from
    # scratch. See also %STARTUP_PREREQUISITES below.

    # * (c) A CONTACT task waits on an external event, such as incoming
    # external data, i.e. it "makes contact" with the external world. 
    # The event is expected at some defined time interval after the task
    # cycle time (e.g. observational data might come 3.5 hours after 
    # its nominal validity time); see %CONTACT_DELAY below. In
    # real time operation a contact task will not begin running until
    # the clock time has reached this delayed start time. In catchup
    # operation a contact task will begin running immediately (other
    # prerequisites allowing) because the delayed start time has already
    # passed.  A CACTHUP_CONTACT task maintains awareness, through a
    # class variable (i.e. not per instance), of whether or not it has
    # 'caught up' yet.  This can be used for rare occasions when some
    # dependent task needs to behave differently according to whether
    # its upstream contact task has caught up or not.

    # * (d) A DUMMY task always uses the cylc dummy task program for its
    # external task, even in real mode. The dummy task program
    # masquerades as the task it represents by reporting its outputs
    # completed at the right time. This can be used to provide 'fake'
    # cold start prerequisites to get the system running when they real
    # inputs have been put in place by some external means prior to
    # running cylc.

[%CONTACT_DELAY]    # in HOURS
    # For tasks with the 'contact' modifier only (see %TYPE above).
    # Estimated time delay, in hours, after cycle time, that the
    # external event occurs in real time operation. This is used in
    # dummy mode to properly simulate the behaviour of contact tasks. 

    4.5

[%OWNER]
    # Username to sudo-run this task under (default: the cylc user)

    bob

%CYCLE_TIMES    # HOURS in the day
    # comma separated hours in the day valid for this task type

    0,6,12,18

%EXTERNAL_TASK
    # The external program or script to invoke when all of my
    # prerequisites have been satisfied. This script is expected to be
    # in $PATH for the owner, or in the system 'tasks' subdirectory.

    # tasks with the 'dummy' attribute do not need to define this.

    run-foo.sh

[%ENVIRONMENT]
    # specify additional environment variable name value pairs to pass
    # to the external task (other than $MY_CYCLE_TIME and $NAME).
    # May contain $(MY_CYCLE_TIME) and $(NAME), as for outputs.

    FOO foo
    BAR bar

%ESTIMATED_RUN_TIME   # in minutes
    # Used in dummy mode, to simulate the real task.
    # May be conditional on valid hours, as for %PREREQUISITES.

           20
    0,12 | 25
    6,18 | 35

%PREREQUISITES
    # Zero or more prerequisite messages on separate lines

    # These are LITERAL STRINGS with some variable substitution:
    # $(MY_CYCLE_TIME [+/- <hours>])

    # May be conditional on a comma separated list of HOURS
    # (which must occur in %CYCLE_TIMES).

    # Note that defined RESTARTs create an additional prerequisite.

           "foo finished for $(MY_CYCLE_TIME)"
           "file bar_$(MY_CYCLE_TIME)_utc.nc ready"
    0,12 | "file baz_$(MY_CYCLE_TIME)_utc.nc ready"

[%STARTUP_PREREQUISITES]
    # As for %PREREQUISITES above, but only used once at start time.
    # Can be used in conjunction with a 'oneoff' task (above) if
    # a task has different input requirements for a 'cold start'
    # than for normal warm cycling operation.

%OUTPUTS
    # List of all output messages that are important for task scheduling
    # purposes (i.e. that other tasks may depend on through their
    # prerequisites), prefixed by the approximate time in minutes that
    # the output is completed (the time is used in dummy mode).

    # These are LITERAL STRINGS with some variable substitution:
    # $(MY_CYCLE_TIME [+/- <hours>])

    # DO NOT REGISTER TASK 'started' AND 'finished' MESSAGES.
    # These are generated automatically: 
    #                       0: <NAME> started
    #   <%RUN_LENGTH_MINUTES>: <NAME> finished
    # Other tasks may depend on these automatically supplied outputs.

    # May be conditional on %CYCLE_TIMES as for prerequisites.

    # Note that defined RESTARTs create additional outputs.

           10: "file foo_0_$(MY_CYCLE_TIME).nc ready"
    0,12 | 15: "file foo_1_$(MY_CYCLE_TIME).nc ready"
    6,18 | 15: "file foo_2_$(MY_CYCLE_TIME).nc ready"

[%ESTIMATED_RESTART_DUMP_TIMES]
    # forecast_models only
    # comma separated list of times at which restart outputs are
    # generated (see above).

    # This automatically creates in ONE ADDITIONAL PREREQUISITE and N
    # ADDTIONAL OUTPUTS, where N is the number of times registered.

    5,10,15

[%SINGLE_CYCLE] 
    # If you set this to True for tasks that are known to have only
    # cotemporal (same cycle time) downstream dependants, they will
    # be deleted as soon as they are finished AND there are no other
    # tasks yet to be finished at their cycle time or earlier.

    # DO NOT SET THIS 'True' FOR TASKS THAT HAVE DOWNSTREAM DEPENDANTS
    # IN OTHER FORECAST CYCLES.  This includes FORECAST MODELS, which
    # depend on restart outputs from a previous cycle.

    # default: False.  
    True

[%ONEOFF_FOLLOW_ON]
    task_foo
    #oneoff tasks that have non-cotemporal dependants must nominate a
    #follow on task to "hand the baton on to" so that cylc knows when it
    #can delete the oneoff task from the system (it will not be deleted
    #before the follow on task exists). 

