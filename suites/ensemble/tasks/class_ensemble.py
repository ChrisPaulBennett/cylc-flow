
#!/usr/bin/env python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|

# WARNING: THIS FILE WAS AUTO-GENERATED BY cylc configure

from daemon import daemon
from asynchronous import asynchronous
from tied import tied
from free import free
from family import family
from mod_oneoff import oneoff
from mod_sequential import sequential
from mod_contact import contact
from mod_catchup_contact import catchup_contact
from prerequisites_fuzzy import fuzzy_prerequisites
from prerequisites import prerequisites
from outputs import outputs
from cycling_daemon import cycling_daemon
from time import sleep
from task_output_logs import logfiles
import cycle_time
import task_state
import ordered_dict

class ensemble(family):

    name = 'ensemble'
    short_name = 'ens'
    instance_count = 0

    description = []
    description.append("foo")

    owner = None
    external_task = 'None'  # TO DO: STRING REQUIRED FOR JOB_SUBMIT TASK PATH ENV INTERP
    remote_host = None
    job_submit_method = None

    valid_hours = [0,6,12,18]

    def __init__( self, c_time, initial_state, startup = False ):

        # adjust cycle time to next valid for this task
        self.c_time = self.nearest_c_time( c_time )
        self.tag = self.c_time
        self.id = self.name + '%' + self.c_time
        hour = self.c_time[8:10]

        self.prerequisites = prerequisites( self.id )
        self.prerequisites.add( "B%" + self.c_time + " finished" )
        self.suicide_prerequisites = prerequisites( self.id )
        self.familyfinished_prerequisites = prerequisites( self.id )

        self.familyfinished_prerequisites.add( "C1%" + self.c_time + " finished" )
        self.familyfinished_prerequisites.add( "C2%" + self.c_time + " finished" )
        self.familyfinished_prerequisites.add( "C3%" + self.c_time + " finished" )

        self.logfiles = logfiles()

        self.outputs = outputs( self.id )
        self.outputs.register()

        self.output_patterns = []

        self.env_vars = ordered_dict.ordered_dict()
        self.env_vars['WRAP'] = 'F.sh'
        self.env_vars['FOO'] = 'foo'
        self.env_vars['ANALYSIS_TIME'] = self.c_time

        self.commandline = []

        self.directives = {}

        self.extra_scripting = []

        family.__init__( self, initial_state )

