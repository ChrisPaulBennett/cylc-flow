
#!/usr/bin/env python

#         __________________________
#         |____C_O_P_Y_R_I_G_H_T___|
#         |                        |
#         |  (c) NIWA, 2008-2010   |
#         | Contact: Hilary Oliver |
#         |  h.oliver@niwa.co.nz   |
#         |    +64-4-386 0461      |
#         |________________________|

# WARNING: THIS FILE WAS AUTO-GENERATED BY cylc configure

from daemon import daemon
from asynchronous import asynchronous
from tied import tied
from free import free
from mod_oneoff import oneoff
from mod_sequential import sequential
from mod_contact import contact
from mod_catchup_contact import catchup_contact
from prerequisites_fuzzy import fuzzy_prerequisites
from prerequisites import prerequisites
from outputs import outputs
from cycling_daemon import cycling_daemon
from time import sleep
from task_output_logs import logfiles
import cycle_time
import task_state
import ordered_dict

class X(contact, free):
    # AUTO-GENERATED FROM /home/oliverh/cylc/master/suites/ensemble/taskdef/X.def

    name = 'X'
    short_name = 'x'
    instance_count = 0

    description = []
    description.append("Task X")

    owner = None
    external_task = 'X.sh'

    remote_host = None
    job_submit_method = None
    valid_hours = [0,6,12,18]

    def __init__( self, c_time, initial_state, startup = False ):

        # adjust cycle time to next valid for this task
        self.c_time = self.nearest_c_time( c_time )
        self.tag = self.c_time
        self.id = self.name + '%' + self.c_time
        hour = self.c_time[8:10]

        self.real_time_delay = 1.0

        self.prerequisites = prerequisites( self.id )
        self.suicide_prerequisites = prerequisites( self.id )
        self.logfiles = logfiles()

        self.outputs = outputs( self.id )
        self.outputs.register()

        if startup:
            # overwrite prerequisites for startup case
            self.prerequisites = prerequisites( self.id )
            self.prerequisites.add( 'startup%'  + self.c_time + ' finished', None )
        self.output_patterns = []

        self.env_vars = ordered_dict.ordered_dict()

        self.commandline = []

        self.directives = {}

        self.extra_scripting = []
        free.__init__( self, initial_state )

