Sequenz To Do List

* only topnet-test tasks have been updated for the change that adds
  abdication status to the state dump file.

* new RUN_LENGTH def field must be reference hour dependent

* go through all 'requisite' class methods, get rid of those that
  aren't used, and make sure the remaining ones are sensibly named

* rationalize CRITICAL and "failed" message processing? Should the
  former always imply the latter? Currently critical status affects
  logging, but a task is only considered failed if a "failed"
  message is received.

* note on stuck oper_interface tasks (if no files arrive on the
  operational system): once the prior-to-stuck finished instance gets
  deleted, as it falls beyond cutoff, there'll be nothing to satisfy
  future topnet tasks?  - This won't happen anymore as we always keep
  the last *finished* oper_interface rather than basing cutoff on
  reference time alone. However, still need to deal with said stuck task
  ... do we need remote control to get the stuck task to abdicate and
  die? - then topnet will carry on as normal SO LONG AS there are
  non-stuck oper_interfaces finishing within topnet's fuzzy prerequisite
  window. 

* allow remote-control to set a proper stop time (as opposed to an
  instant shutdown).

* remote control "hold", whereby the control system runs as usual but
  does not run any new tasks (and corresponding "release").

* document the new default O(n) brokered dependency negotation
  algorithm.

* if any task fails the system should pause itself before deleting
  any prerequisites of the failed tasks, to allow a clean restart
  on fixing the problem.

* non-O(n^2) will_get_satisfaction() for use with broker method 

* possible problem with non-broker (interaction) method: if more than
  one fuzzy satisfying postrequisite, do we end up with the most recent?

* just before a task runs, try to re-satisfy fuzzy prerequisites in case
  a more up-to-date satisfier has shown up while the task was waiting
  for other prerequisites to be satisfied ... OR (better?!) don't try to
  satisfy fuzzy prerequistes until after all non-fuzzy ones have been
  satsified. 

* streamflow 'caughtup' indicator does not need to specify the
  reference time that catchup was achieved even though streamflow
  catches up long before nzlam, because the indicator is only used to
  determine how far ahead of nzlam we allow topnet to get (? I need 
  to think about this).

* in dummy mode, the dummy clock time should be written to the state
  dump file so that the clock doesn't reset to the configured start time
  (plus any configured offset) on a restart.

* retrofit proper exception handling throughout (current use is
  sporadic).
