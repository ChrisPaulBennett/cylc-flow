To Do

* contact tasks need not start *running* until their time is up
  (after doing this see if task.ready_to_abdicate can be simplified). 

* allow mixed fuzzy and non-fuzzy prerequisites (currently have to 
  set identical fuzzy bounds to simulate the non-fuzzy case; see
  topnet.py).

* the same user can't currently run multiple cyclon instances in dummy
  mode, because the 'pkill dummy-task.py' on shutdown will kill all of
  his dummy tasks.

* re slipping back into catchup mode with TopNet:  We were caught up and
  have apparently slipped back a bit. reverting to catching up mode will
  suddenly reduce topnet's cutoff time and may result in deletion of a
  finished nzlam task that is still needed to satisfy topnet prereqs.
  => FIX TOPNET'S CUTOFF VARIABLE ONCE CAUGHT UP?

* allow automatic deletion of lame tasks by remote request? 

* lame tasks can be detected beyond the oldest running task, not just in
  the last ref time batch

* remote controlled prerequisite dump for specified tasks, to allow
  operator to see which prerequisites have yet to be satisfied.

* a task should be allowed to declare multiple outputs at the same time
  (currently this is detected as an error condition)

* STATE DUMP INFORMATION SHOULD BE A DICT, LIKE CONFIG, TO ALLOW
  arbitrary additional information to be added by new task classes.
  
* does 'caught up' detection work properly for prerequisiteless parallel
  contact tasks?

* all sys.exit(1) calls should be routed through a clean shutdown, so
  that Pyro nameserver group entries can be deleted automatically.

* allow remote-control to set a proper stop time (as opposed to an
  instant shutdown).

* consider use of the broker for task.will_get_satisfaction()? The is
  method as is is O(n^2), but n is only the size of the oldest batch of
  tasks, not all tasks (used in identifying lame tasks). 

* just before a task runs, try to re-satisfy fuzzy prerequisites in case
  a more up-to-date satisfier has shown up while the task was waiting
  for other prerequisites to be satisfied ... OR (better?!) don't try to
  satisfy fuzzy prerequistes until after all non-fuzzy ones have been
  satsified. 

* streamflow 'caughtup' indicator does not need to specify the
  reference time that catchup was achieved even though streamflow
  catches up long before nzlam, because the indicator is only used to
  determine how far ahead of nzlam we allow topnet to get (? I need 
  to think about this).

* in dummy mode, the dummy clock time should be written to the state
  dump file so that the clock doesn't reset to the configured start time
  (plus any configured offset) on a restart.

* retrofit proper exception handling (current use is sporadic).

* task.quick_death should default to False, as for the task 
  def key that maps to it (%COTEMPORAL_DEPENDANTS_ONLY).

* user_config is imported in task_classes.py to get start_time. It may
  be better to pass this in at task initialisation?
