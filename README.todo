To Do

* a task should be allowed to declare multiple outputs at the same time.

* STATE DUMP INFORMATION SHOULD BE A DICT, LIKE CONFIG, TO ALLOW
  arbitrary additional information to be added by new task classes.
  
* does 'caught up' detection work properly for prerequisiteless parallel
  contact tasks?

* do messages need to have task name preprended?

* can reference time be appended to messages automatically?

* all sys.exit(1) calls should be routed through a clean shutdown, so
  that Pyro nameserver group entries can be deleted automatically.

* allow remote-control to set a proper stop time (as opposed to an
  instant shutdown).

* will_get_satisfaction() is still O(n^2)

* THE SYSTEM SHOULD NOT DELETE ANY SPENT TASKS AFTER A TASK HAS FAILED,
  to prevent deletion of prerequisites of the failed task that will be
  needed again at restart, after fixing the problem. This won't cause a
  massive overpopulation problem as the failed task will soon hold up
  the whole system anyway, because of the runahead limit.

* just before a task runs, try to re-satisfy fuzzy prerequisites in case
  a more up-to-date satisfier has shown up while the task was waiting
  for other prerequisites to be satisfied ... OR (better?!) don't try to
  satisfy fuzzy prerequistes until after all non-fuzzy ones have been
  satsified. 

* streamflow 'caughtup' indicator does not need to specify the
  reference time that catchup was achieved even though streamflow
  catches up long before nzlam, because the indicator is only used to
  determine how far ahead of nzlam we allow topnet to get (? I need 
  to think about this).

* in dummy mode, the dummy clock time should be written to the state
  dump file so that the clock doesn't reset to the configured start time
  (plus any configured offset) on a restart.

* retrofit proper exception handling (current use is sporadic).
