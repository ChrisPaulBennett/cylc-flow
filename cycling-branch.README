
Cylc generalized cycling branch.

Working (except see To Do below) with several cycling classes:
  +HoursOfTheDay (= original NWP mechanism)
  +Daily (increment by whole days, with stride and start delay)
  +Anniversary (increment by whole years, with stride and start delay)

Suite defines a default cycling class, which can be overridden 
for particular graph sections.

The units of a cycle time offset n (in foo[T-n]) are defined by the
cycling class in use for a graph section. 

TO DO:
 + Cycle times are still passed around as strings and temporarily
 converted to cycle time objects whenever time manipulation
 is required - we should move entirely to objects USING THE NEW
 taskid.py CLASSES.
 + USE 'a:INT' INTERNALLY FOR ASYNC TAGS TO MAKE CHECKING FOR TAG
VALIDITY EASIER.
 + To complete the extension to YYYYMMDDHHmmss (i.e. with mmss) check
 for any hardwired assumptions about ctime string length (e.g. in suite 
 log filtering - command and GUI).

A MINIMUM RUNAHEAD limit is now computed automatically by each cycler in
a suite.  Note however that for 6-hrly tasks, for example, with no
intercycle dependence, a limit of just 1 hour does NOT stall the suite
(with intercycle dependence it does). => NEED TO clearly explain when
the runahead limit can stall a suite (and automatically compute a true
minimum below which the suite will stall?)
BUT NOW I'm computing runahead limiting based only on old waiting 
(rather than unfailed) task, which frees up model-type suites - maybe no 
stallng now?

